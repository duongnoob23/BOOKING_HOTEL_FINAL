reducers và extraReducers khác nhau như thế nào? Tại sao chia làm 2?
Khác biệt về chức năng:
reducers: Là nơi bạn định nghĩa các hàm xử lý trạng thái đồng bộ (synchronous). Đây là các hành động đơn giản, được gọi trực tiếp thông qua dispatch từ giao diện người dùng hoặc code của bạn. Các hàm này nhận state và action, sau đó cập nhật trạng thái ngay lập tức.

extraReducers: Là nơi bạn xử lý các hành động bất đồng bộ (asynchronous), thường liên quan đến các thunk (như createAsyncThunk). Nó được thiết kế để xử lý các trạng thái phụ thuộc vào vòng đời của một promise (pending, fulfilled, rejected).

Tại sao chia làm 2?
Tách biệt logic đồng bộ và bất đồng bộ: Redux Toolkit muốn giữ code rõ ràng. reducers dành cho các hành động đơn giản, còn extraReducers xử lý các tác vụ phức tạp hơn (như gọi API, chờ dữ liệu).

Tự động hỗ trợ vòng đời bất đồng bộ: Với extraReducers, bạn có thể dễ dàng phản ứng với các trạng thái của một thunk (đang tải, thành công, thất bại) mà không cần tự viết logic phức tạp.

Ví dụ trong code của bạn:
reducers:
loginStart: Đặt loading = true ngay lập tức khi người dùng nhấn nút đăng nhập. Đây là hành động đồng bộ, không cần chờ gì cả.

loginSuccess: Cập nhật trạng thái (token, user, v.v.) sau khi đăng nhập thành công. Đây là logic đồng bộ, chỉ cần gán giá trị.

javascript

loginStart(state) {
  state.loading = true;
  state.error = null;
}

extraReducers:
Xử lý restoreAuth, một tác vụ bất đồng bộ (lấy token từ AsyncStorage hoặc API).

Có 3 trạng thái:
pending: Đang tải dữ liệu (giống như "đang kiểm tra token").

fulfilled: Hoàn thành, có dữ liệu trả về (token hợp lệ).

rejected: Lỗi xảy ra (token không hợp lệ hoặc không lấy được).

javascript

extraReducers: (builder) => {
  builder
    .addCase(restoreAuth.pending, (state) => {
      state.loading = true; // Đang kiểm tra token
    })
    .addCase(restoreAuth.fulfilled, (state, action) => {
      if (action.payload) {
        state.accessToken = action.payload.accessToken; // Token hợp lệ
        state.isLoggedIn = true;
      }
      state.loading = false;
    });
}

Ví dụ dễ hiểu:
reducers: Giống như bạn bật công tắc đèn (on/off ngay lập tức).

extraReducers: Giống như bạn bật máy giặt – phải chờ máy chạy (pending), xong thì báo hoàn thành (fulfilled), hoặc lỗi thì báo hỏng (rejected).

2. Tại sao restoreAuth tự động được gọi khi khởi động?
Giải thích:
Hàm restoreAuth không tự động chạy. Nó chỉ chạy khi bạn gọi dispatch(restoreAuth()) trong code. Trong dự án của bạn, điều này xảy ra trong App.js nhờ useEffect.

Code liên quan:
javascript

const AppContent = () => {
  const dispatch = useAppDispatch();

  useEffect(() => {
    dispatch(restoreAuth()); // Gọi khi ứng dụng khởi động
  }, [dispatch]);

  return <Navigation />;
};

useEffect chạy một lần khi component AppContent được mount (tức là khi ứng dụng khởi động). Nó gọi dispatch(restoreAuth()) để kiểm tra token từ AsyncStorage.

Chức năng:
Mục đích là để khôi phục trạng thái đăng nhập (nếu người dùng đã đăng nhập trước đó) mà không cần đăng nhập lại. Điều này cải thiện trải nghiệm người dùng.

Ví dụ dễ hiểu:
Giống như khi bạn mở lại ứng dụng Zalo, nó tự động đăng nhập nếu bạn chưa đăng xuất trước đó. restoreAuth làm việc tương tự bằng cách kiểm tra token lưu trữ.

3. Chức năng của selector và dispatch là gì?
Dispatch:
Chức năng: Gửi một hành động (action) đến store để cập nhật trạng thái.

Cách hoạt động: Khi bạn gọi dispatch, Redux sẽ tìm reducer tương ứng với action đó và chạy nó.

Selector:
Chức năng: Lấy dữ liệu từ store để sử dụng trong component.

Cách hoạt động: Bạn dùng useSelector (hoặc useAppSelector) để chọn một phần cụ thể của trạng thái.

Ví dụ trong code của bạn:
Dispatch:
javascript

const LoginScreen = () => {
  const dispatch = useAppDispatch();

  const handleLogin = () => {
    dispatch(loginStart()); // Gửi action để bắt đầu đăng nhập
  };

  return <Button title="Login" onPress={handleLogin} />;
};

Khi nhấn nút "Login", dispatch(loginStart()) gửi hành động loginStart, làm cho state.loading = true.

Selector:
javascript

const LoginScreen = () => {
  const { loading, error } = useAppSelector((state) => state.auth);

  return (
    <View>
      <Button title="Login" disabled={loading} />
      {error && <Text>Lỗi: {error}</Text>}
    </View>
  );
};

useAppSelector lấy loading và error từ store để hiển thị trạng thái (đang tải, lỗi).

Ví dụ dễ hiểu:
Dispatch: Giống như bạn bấm nút gọi phục vụ trong nhà hàng – bạn yêu cầu một việc (action).

Selector: Giống như bạn nhìn vào thực đơn để xem món nào đang có sẵn – bạn lấy thông tin từ trạng thái hiện tại.

4. createAsyncThunk là gì? Chức năng và ví dụ
Chức năng:
createAsyncThunk là một hàm trong Redux Toolkit giúp bạn tạo các hành động bất đồng bộ (thunk). Nó tự động tạo ra 3 trạng thái: pending, fulfilled, và rejected, để dễ dàng xử lý trong extraReducers.

Dùng để: Gọi API, xử lý dữ liệu bất đồng bộ (như đăng nhập, lấy token), và cập nhật trạng thái dựa trên kết quả.

Cấu trúc:
javascript

export const restoreAuth = createAsyncThunk('auth/restoreAuth', async () => {
  const token = await AsyncStorage.getItem('accessToken');
  if (token) {
    return { accessToken: token, user: null };
  }
  return null;
});

'auth/restoreAuth': Tên hành động (dùng để debug và khớp với extraReducers).

async () => {...}: Logic bất đồng bộ (lấy token từ AsyncStorage).

Cách hoạt động:
Khi dispatch(restoreAuth()) được gọi:
pending: Trạng thái bắt đầu (state.loading = true).

fulfilled: Nếu thành công, trả về dữ liệu (token, user).

rejected: Nếu lỗi, trả về thông tin lỗi.

Ví dụ dễ hiểu:
Giả sử bạn đặt hàng online:
createAsyncThunk giống như quá trình đặt hàng:
pending: Đang gửi yêu cầu đến cửa hàng.

fulfilled: Đơn hàng giao thành công, bạn nhận được đồ ăn.

rejected: Lỗi (hết hàng, không giao được).

Trong code:
javascript

export const orderFood = createAsyncThunk('order/food', async (foodId) => {
  const response = await api.orderFood(foodId);
  return response.data; // { food: 'Pizza', status: 'delivered' }
});

extraReducers: (builder) => {
  builder
    .addCase(orderFood.pending, (state) => {
      state.loading = true; // Đang đặt hàng
    })
    .addCase(orderFood.fulfilled, (state, action) => {
      state.food = action.payload.food; // Nhận được Pizza
      state.loading = false;
    })
    .addCase(orderFood.rejected, (state) => {
      state.error = 'Hết hàng!'; // Lỗi
      state.loading = false;
    });
};

Ứng dụng trong dự án của bạn:
restoreAuth dùng createAsyncThunk để kiểm tra token bất đồng bộ. Nếu token tồn tại, trạng thái isLoggedIn sẽ được cập nhật mà không cần người dùng đăng nhập lại.

Tóm tắt:
reducers vs extraReducers: Đồng bộ vs bất đồng bộ, tách biệt để code rõ ràng.

restoreAuth tự chạy: Do useEffect trong App.js gọi dispatch.

dispatch và selector: Gửi hành động và lấy dữ liệu từ store.

createAsyncThunk: Tạo hành động bất đồng bộ với 3 trạng thái (pending, fulfilled, rejected).






Trong handleApply, inforFilter vẫn là giá trị cũ tại thời điểm onApply được gọi, vì React chưa re-render.
Để khắc phục, bạn cần một cách để đảm bảo inforFilter là giá trị mới nhất từ store. Cách đơn giản nhất là dùng useEffect, nhưng nếu muốn tránh useEffect, bạn có thể dùng store.getState() từ Redux trực tiếp.
Giải pháp nhanh và hiệu quả hơn: Dùng store.getState()
Redux Toolkit cung cấp cách truy cập store trực tiếp qua dispatch hoặc useStore.

đây là cách để lấy state của một initState trong redux khi mà componet chưa kịp render lại ,mặc dù redux reducer đã cập nhật rồi

Cách hoạt động:
Modal dispatch updateFilter, cập nhật inforFilter trong Redux store.
Trong handleApply của ListHotelByLocation, bạn dùng store.getState() để lấy state mới nhất từ Redux store ngay sau khi updateFilter chạy (vì updateFilter là đồng bộ).
Sau đó, gọi fetchHotelByLocation với latestInforFilter, đảm bảo API nhận dữ liệu mới nhất.
Component sẽ re-render khi hotelByLocation thay đổi (do fetchHotelByLocation).
Ưu điểm:
Nhanh: Không cần chờ re-render để lấy state mới, truy cập trực tiếp store.
Hiệu quả: Không cần useEffect, giảm overhead.
Phân tách trách nhiệm: Modal chỉ cập nhật state, ListHotelByLocation xử lý API.
Nhược điểm:
Dùng store.getState() không phải cách khuyến nghị chính thức của Redux Toolkit (vì phá vỡ tính "reactive" của useAppSelector), nhưng vẫn hoạt động tốt trong trường hợp này.
Nếu lạm dụng getState(), có thể gây khó khăn khi debug hoặc bảo trì.

Trong dự án thực tế:
Nếu ưu tiên tối ưu hiệu suất và đơn giản: Dùng Cách 1 (dispatch cả updateFilter và fetchHotelByLocation trong modal).
Nếu ưu tiên bảo trì và mở rộng: Dùng Cách 2 (dùng useEffect trong ListHotelByLocation).
Nếu muốn nhanh và hiệu quả nhất trong trường hợp cụ thể này: Dùng giải pháp tối ưu với store.getState().
Với dự án của bạn:
Vì bạn đang học và muốn hiểu rõ luồng, tôi khuyên dùng Cách 2 với useEffect:
Nó đúng với cách hoạt động của Redux/React (re-render khi state thay đổi).
Dễ bảo trì và mở rộng khi thêm modal mới.
An toàn hơn store.getState() về mặt kiến trúc.
Nếu bạn muốn thử giải pháp với store.getState() hoặc cần tối ưu thêm (như debounce API), cứ nói nhé! Tôi sẽ hỗ trợ ngay.