import React, { cloneElement, useEffect, useState, useRef } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  SafeAreaView,
  Image,
  Button,
  Modal,
  Alert,
} from "react-native";
import Icon from "react-native-vector-icons/FontAwesome"; // Sử dụng FontAwesome cho icons
import { FlatList } from "react-native";
import { API_BASE_URL } from "../../Constant/Constant";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import {
  fetchAmenityList,
  fetchHotelById,
  fetchHotelByLocation,
  fetchHotelList,
  fetchLocationList,
  fetchServiceList,
  updateTempFilter,
  applyFilter,
} from "../../Redux/Slice/hotelSlice";
import ModalLocationList from "../../Components/Modal/Home/ModalLocationList";
import cloneDeep from "lodash/cloneDeep";
import { Picker } from "@react-native-picker/picker";
import ModalCheckIn from "../../Components/Modal/Home/ModalCheckIn";
import ModalCheckOut from "../../Components/Modal/Home/ModalCheckOut";
import ModalGuestsAndRooms from "../../Components/Modal/Home/ModalGuestsAndRooms";
import { skeletonLoading } from "../../Redux/Slice/hotelSlice";
import { updateFilter } from "../../Redux/Slice/hotelSlice";
import { fetchListService } from "../../Redux/Slice/serviceSlice";
import { fetchUserInfo } from "../../Redux/Slice/authSlice";
import ReusableModal from "../../Components/Modal/FlexibleModal/ReusableModal";
import ModalBookingCancelled from "../../Components/Modal/Booking/ModalBookingCancelled";
import ModalDatePicker from "../../Components/Modal/Home/ModalDatePicker"; // Đã import
import { showToast } from "../../Utils/toast";
const HomeScreen = ({ navigation }) => {
  const { hotelHistorySearch, hotelList, locationList, inforFilter } =
    useAppSelector((state) => state.hotel); // lấy thông tin danh sách tìm kiếm sau khi search, danh sách ưu đãi cuối tuần, lịch sử tìm kiếm
  const dispatch = useAppDispatch();

  const [open, setOpen] = useState({
    Modal_1: false,
    Modal_CheckIn: false,
    Modal_CheckOut: false,
    Modal_GuestsAndRooms: false,
  }); // Modal đóng mở 4 chức năng tìm kiếm
  const [checkInDate, setCheckInDate] = useState(new Date());
  const [checkOutDate, setCheckOutDate] = useState(new Date());

  const continueSearch = hotelHistorySearch; // biến lưu dữ liệu danh sách tìm kiếm

  // console.log(">>>>> 104 HomeScreen inforFilter", inforFilter);
  // console.log("----- 105 HomeScreen selectDay", selectDay);
  useEffect(() => {
    dispatch(fetchServiceList());
    dispatch(fetchAmenityList());
    dispatch(fetchHotelList());
    dispatch(fetchLocationList());
  }, [dispatch]);

  // useEffect(() => {
  //   dispatch(fetchHotelList());
  // }, [hotelHistorySearch]);

  const handleToHotelDetails = (item) => {
    const id = item?.hotelId;
    dispatch(fetchHotelById(id));
    navigation.navigate("HotelDetails", { item });
  }; // hàm chuyển sang hotel Detail, nên bắt try catch , kiểm tra xem có id không, nên gọi dispatch ở bên hotelDetails

  const handleCloseModal = (name) => {
    const open_ = cloneDeep(open);
    open_[name] = false;
    setOpen(open_);
  };

  const WidthtwoRowScrollView = 210 * Math.ceil(continueSearch.length / 2);

  const handleModalCheck = (name, value) => {
    const open_ = cloneDeep(open);
    open_[name] = value;
    setOpen(open_);
  }; // Hàm mở modal , với các modal chọn thời gian thì cần phải set lại thời gian hiển thị

  const formatToDDMMYYYY = (date) => {
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const year = date.getFullYear();
    return `${year}-${month}-${day}`;
  };// chuẩn hóa ngày tháng năm hiển thì YYYY-MM-DD

  const normalizeDate = (date) => {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate());
  };// chuẩn hóa về ngày tháng năm, không có giờ để tiện so sánh (do việt nam bị lệch múi giờ)

  const handleConfirmDate = (name, date) => {
    // Chuẩn hóa date và today để bỏ qua giờ/phút/giây
    date = normalizeDate(date);
    const today = normalizeDate(new Date());

    // 0. Nếu là checkin
    if (name === "checkin") {
      // 1. So sánh: ngày check-in không được nhỏ hơn ngày hiện tại
      if (date <= today) {
        showToast({
          type: "warning", // hoặc "error", "info"
          text1: "Chọn lại ngày checkin",
          text2: "Ngày CheckIn phải lớn hơn hoặc bằng ngày hiện tại",
          position: "top",
          duration: 3000,
        });
        // Alert.alert("Ngày CheckIn phải lớn hơn hoặc bằng ngày hiện tại");
        return;
      }

      // Format ngày check-in để lưu vào inforFilter
      const formattedCheckInDate = formatToDDMMYYYY(date);

      // 2. Kiểm tra ngày check-out
      setCheckInDate(date);
      let updatedFilter = { ...inforFilter, checkin: formattedCheckInDate };

      if (inforFilter?.checkout && inforFilter.checkout !== "") {
        // Đã có check-out, chuyển check-out thành Date để so sánh
        const checkoutParts = inforFilter.checkout.split("-"); // "DD-MM-YYYY" => ["DD", "MM", "YYYY"]
        if (checkoutParts.length === 3) {
          // Đảm bảo có đủ 3 phần tử
          const checkoutDay = parseInt(checkoutParts[2]);
          const checkoutMonth = parseInt(checkoutParts[1]) - 1;
          const checkoutYear = parseInt(checkoutParts[0]);

          if (
            !isNaN(checkoutYear) &&
            !isNaN(checkoutMonth) &&
            !isNaN(checkoutDay)
          ) {
            const checkoutDate = new Date(
              checkoutYear,
              checkoutMonth,
              checkoutDay
            );
            console.log("-2", checkoutParts);
            console.log("-1", checkoutDate);

            // 3. Nếu check-out nhỏ hơn hoặc bằng check-in, đặt check-out = check-in + 1
            if (checkoutDate <= date) {
              console.log("kiểm tra ngày checkout ", checkoutDate);
              console.log("kiểm tra ngày date ", date);
              const nextDay = new Date(date);
              nextDay.setDate(date.getDate() + 1);
              updatedFilter.checkout = formatToDDMMYYYY(nextDay);
              setCheckOutDate(nextDay);
            }
            // Nếu check-out lớn hơn check-in, giữ nguyên
          } else {
            console.log("Dữ liệu checkout không hợp lệ:", checkoutParts);
          }
        }
      } else {
        // 3. Chưa có check-out, đặt check-out = check-in + 1
        const nextDay = new Date(date);
        nextDay.setDate(date.getDate() + 1);
        updatedFilter.checkout = formatToDDMMYYYY(nextDay);
        setCheckOutDate(nextDay);
      }

      // Cập nhật filter vào Redux
      dispatch(updateFilter(updatedFilter));
      handleModalCheck("Modal_CheckIn", false);
    }

    // 0. Nếu là checkout
    if (name === "checkout") {
      // 1. So sánh: check-out không được nhỏ hơn ngày hiện tại
      if (date <= today) {
        showToast({
          type: "warning", // hoặc "error", "info"
          text1: "Chọn lại ngày checkout",
          text2: "Ngày CheckOut phải lớn hơn ngày hiện tại",
          position: "top",
          duration: 3000,
        });
        // Alert.alert("Ngày CheckOut phải lớn hơn ngày hiện tại");
        return;
      }

      // So sánh: check-out phải lớn hơn check-in
      if (inforFilter?.checkin && inforFilter.checkin !== "") {
        const checkinParts = inforFilter.checkin.split("-"); // "DD-MM-YYYY" => ["DD", "MM", "YYYY"]
        if (checkinParts.length === 3) {
          // Đảm bảo có đủ 3 phần tử
          const checkinDay = parseInt(checkinParts[2]);
          const checkinMonth = parseInt(checkinParts[1]) - 1;
          const checkinYear = parseInt(checkinParts[0]);

          if (
            !isNaN(checkinYear) &&
            !isNaN(checkinMonth) &&
            !isNaN(checkinDay)
          ) {
            const checkinDate = new Date(checkinYear, checkinMonth, checkinDay);
            console.log("2", checkinParts);
            console.log("3", checkinDate);

            if (date <= checkinDate) {
              showToast({
                type: "warning", // hoặc "error", "info"
                text1: "Chọn lại ngày checkout",
                text2: "Ngày CheckOut phải lớn hơn ngày CheckIn",
                position: "top",
                duration: 3000,
              });
              // Alert.alert("Ngày CheckOut phải lớn hơn ngày CheckIn");
              return;
            }
          } else {
            console.log("Dữ liệu checkin không hợp lệ:", checkinParts);
          }
        }
      }

      // Format ngày check-out để lưu vào inforFilter
      setCheckOutDate(date);
      const formattedCheckOutDate = formatToDDMMYYYY(date);

      // Cập nhật filter vào Redux
      dispatch(
        updateFilter({ ...inforFilter, checkout: formattedCheckOutDate })
      );
      handleModalCheck("Modal_CheckOut", false);
    }
  };

  const handleFilterHotel = () => {
    dispatch(skeletonLoading());
    dispatch(fetchHotelByLocation(inforFilter));
    console.log(">>> run 0");
    navigation.navigate("ListHotelLocation");
  }; // hàm gọi ListHotelByLocation search từ nút tìm kiếm

  const handleContinueSearch = (item) => {
    // console.log(item);
    const inforFilter_ = {
      locationId: item?.locationId,
      checkin: item?.checkIn,
      checkout: item?.checkOut,
      adults: item?.adults,
      children: item?.children,
      amenityIds: [],
      serviceIds: [],
      sortById: 1,
    };
    // console.log("inforFIlter Fake", inforFilter_);
    dispatch(skeletonLoading());
    dispatch(fetchHotelByLocation(inforFilter_));

    navigation.navigate("ListHotelLocation");
  }; // Hàm gọi HotelDetails từ HistorySearch

  // console.log("1", inforFilter);

  const HotelRequestList = ({ item }) => {
    return (
      <TouchableOpacity
        style={styles.dealItem}
        onPress={() => handleToHotelDetails(item)}
      >
        <View style={styles.dealImage}>
          <Image
            source={{
              uri: `${item.imageUrl}`,
            }}
            style={styles.image}
          />
        </View>
        <View style={styles.dealDetails}>
          <Text style={styles.dealName}>{item.hotelName}</Text>
          <View style={styles.dealReviews}>
            <Icon
              style={styles.iconStart}
              name="star"
              size={24}
              color="#EBA731"
            />
            <Text style={styles.dealPoint}>{item.hotelRating} </Text>
            <Text style={styles.dealReviewsText}>
              Đánh giá ({item.sumReview}){" "}
            </Text>
          </View>
          <Text style={styles.dealDesc}>{item.promotionName}</Text>
          <View style={styles.dealFooter}>
            <Text style={styles.dealSale}>Giảm 25%</Text>
            <Text style={styles.dealPrice}> {item.price}</Text>
            <TouchableOpacity>
              <Text style={styles.dealBooking}>Đặt ngay </Text>
            </TouchableOpacity>
          </View>
        </View>
      </TouchableOpacity>
    );
  }; // phần hiển thị giao diện ưu đãi cuối cùng , cần phải chỉnh sửa lại để hiển thị nhiều loại ưu đãi trong dữ liệu hơn