\---src
    +---Components
    |   +---Icon
    |   |       getServiceIcon.js
    |   |       getServiceIconOrderFood.js
    |   |       
    |   +---Map
    |   |       MapCheckScreen.js
    |   |       MapPriceScreen.js
    |   |       
    |   +---Modal
    |   |   +---Booking
    |   |   |       ModalBookingCancelled.js
    |   |   |       
    |   |   +---FlexibleModal
    |   |   |       ReusableModal.js
    |   |   |       TestModal.js
    |   |   |       
    |   |   \---Home
    |   |           ModalAmenity.js
    |   |           ModalCheckIn.js
    |   |           ModalCheckOut.js
    |   |           ModalFilter.js
    |   |           ModalGuestsAndRooms.js
    |   |           ModalLocationList.js
    |   |           ModalSort.js
    |   |           
    |   +---Notification
    |   |       NotificationItem.js
    |   |       
    |   +---RenderList
    |   |       HotelContinueSearchList.js
    |   |       HotelRequestList.js
    |   |       
    |   \---Skeleton
    |       +---Auth
    |       |       SkeletonInfoConfirm.js
    |       |       
    |       +---Home
    |       |       SkeletonListHotelByLocation.js
    |       |       
    |       \---Hotels
    |               SkeletonHotelDetails.js
    |               SkeletonHotelRoomList.js
    |               SkeletonOrderConfirm.js
    |               SkeletonPriceScreen.js
    |               
    +---Constant
    |       Constant.js
    |       
    +---hooks
    |       useWebSocket.js
    |       
    +---Pages
    |   +---Account
    |   |       AccountScreen.js
    |   |       
    |   +---Auth
    |   |       ForgotPasswordScreen.js
    |   |       GoogleLogin.js
    |   |       LoginScreen.js
    |   |       PhoneLogin.js
    |   |       RegisterScreen.js
    |   |       TermScreen.js
    |   |       VerifyAccountScreen.js
    |   |       
    |   +---Booking
    |   |       BookingHistoryDetails.js
    |   |       BookingScreen.js
    |   |       RoomBooked.js
    |   |       RoomBooking.js
    |   |       RoomCancelled.js
    |   |       RoomCheckedOut.js
    |   |       test.js
    |   |       
    |   +---Detail
    |   |       DetailScreen.js
    |   |       
    |   +---Foods
    |   |       FoodCart.js
    |   |       FoodDetails.js
    |   |       OrderFood.js
    |   |       test.js
    |   |       
    |   +---Home
    |   |       HomeScreen.js
    |   |       test.js
    |   |       
    |   +---Hotels
    |   |       AllComment.js
    |   |       AllPolicy.js
    |   |       CheckScreen.js
    |   |       HotelDetails.js
    |   |       HotelRoomList.js
    |   |       InfoConfirmScreen.js
    |   |       ListHotelByLocation.js
    |   |       OrderConfirmScreen.js
    |   |       PhotoScreen.js
    |   |       PriceScreen.js
    |   |       test.js
    |   |       test.txt
    |   |       ToastSuccess.js
    |   |       
    |   +---Loading
    |   |       Loading.js
    |   |       
    |   +---Notification
    |   |       NotificationScreen.jsx
    |   |       NotificationScreenQuan.js
    |   |       test.js
    |   |       
    |   +---Payment
    |   |       BillPayment.js
    |   |       OrderPayment.js
    |   |       paymentApi.js
    |   |       PaymentButton.js
    |   |       PaymentResultScreenQuan.js
    |   |       PaymentScreenQuan.js
    |   |       PaymentWebViewScreenQuan.js
    |   |       SuccessPayment.js
    |   |       test.js
    |   |       
    |   +---Profile
    |   |       EditProfile.js
    |   |       PersonalVoucher.js
    |   |       Points.js
    |   |       PointsHistory.js
    |   |       Profile.js
    |   |       RewardMember.js
    |   |       test.js
    |   |       VoucherDetail.js
    |   |       
    |   +---Promotion
    |   |       Discount.js
    |   |       DiscountHistory .js
    |   |       DiscountHistoryExpired.js
    |   |       DiscountHistoryUse.js
    |   |       PromotionScreen.js
    |   |       
    |   +---Reviews
    |   |       RateApp.js
    |   |       RateDetails.js
    |   |       RateReviews.js
    |   |       test.js
    |   |       
    |   +---Setting
    |   |       ChangePasswordScreen.js
    |   |       SettingsScreen.js
    |   |       
    |   \---Test
    |           Test.js
    |           
    +---Redux
    |   |   apiQuan.js
    |   |   hook.js
    |   |   store.js
    |   |   
    |   \---Slice
    |           authSlice.js
    |           bookingSlice.js
    |           hotelSlice.js
    |           notificationSlice.js
    |           paymentSlice.js
    |           promotionSlice.js
    |           serviceSlice.js
    |           text.js
    |           voucherSlice.js
    |           
    +---Routes
    |       AccountStack.js
    |       AuthStack.js
    |       BookingStack.js
    |       HomeStack.js
    |       index.js
    |       MainTab.js
    |       Navigation.js
    |       NotifiStack.js
    |       PromoStack.js
    |       
    \---Utils
            convertToCartItems.js
            formarPrice.js
            notificationsQuan.js
            


src\Components\Icon\getServiceIcon.js

import React from "react";
import { View, Text, StyleSheet } from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";

const getServiceIcon = (serviceType, size = 18, color = "#007AFF") => {
  let iconName = "";
  let serviceName = "";

  // Xác định icon và tên dịch vụ tiếng Việt dựa trên serviceType
  switch (serviceType) {
    case "AMENITY":
      iconName = "bed-outline";
      serviceName = "Tiện nghi";
      break;
    case "BREAKFAST":
      iconName = "cafe-outline";
      serviceName = "Bữa sáng";
      break;
    case "LUNCH":
      iconName = "fast-food-outline";
      serviceName = "Bữa trưa";
      break;
    case "DINNER":
      iconName = "restaurant-outline";
      serviceName = "Bữa tối";
      break;
    case "BUFFET":
      iconName = "pizza-outline";
      serviceName = "Tiệc buffet";
      break;
    case "SPA":
      iconName = "water-outline";
      serviceName = "Spa";
      break;
    case "TRANSPORT":
      iconName = "car-outline";
      serviceName = "Di chuyển";
      break;
    case "ROOM":
      iconName = "home-outline";
      serviceName = "Phòng";
      break;
    default:
      iconName = "help-outline";
      serviceName = "Không xác định";
      break;
  }

  return (
    <View style={[styles.container, { borderColor: color }]}>
      <Ionicons name={iconName} size={size} color={color} style={styles.icon} />
      <Text style={[styles.serviceText, { color }]}>{serviceName}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: "row",
    alignItems: "center",
    borderWidth: 1,
    borderRadius: 8,
    paddingHorizontal: 4,
    paddingVertical: 2,
    marginBottom: 3,
  },
  icon: {
    marginRight: 3, // Khoảng cách giữa icon và tên dịch vụ
  },
  serviceText: {
    fontSize: 12,
    fontWeight: "400",
  },
});

export default getServiceIcon;

src\Components\Icon\getServiceIconOrderFood.js

import React from "react";
import Ionicons from "react-native-vector-icons/Ionicons";

const getServiceIconOrderFood = (serviceType, size = 28, color = "#007AFF") => {
  let iconName = "";

  // Xác định tên biểu tượng dựa trên serviceType
  switch (serviceType) {
    case "AMENITY":
      iconName = "bed-outline";
      break;
    case "BREAKFAST":
      iconName = "cafe-outline";
      break;
    case "LUNCH":
      iconName = "fast-food-outline";
      break;
    case "DINNER":
      iconName = "restaurant-outline";
      break;
    case "BUFFET":
      iconName = "pizza-outline";
      break;
    case "SPA":
      iconName = "water-outline";
      break;
    case "TRANSPORT":
      iconName = "car-outline";
      break;
    case "ROOM":
      iconName = "home-outline";
      break;
    default:
      iconName = "help-outline";
      break;
  }

  return <Ionicons name={iconName} size={size} color={color} />;
};

export default getServiceIconOrderFood;


src\Components\Map\MapCheckScreen.js

import React, { useEffect, useState } from "react";
import {
  StyleSheet,
  View,
  Text,
  TouchableOpacity,
  Linking,
} from "react-native";
import MapView, { Marker } from "react-native-maps";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import { mapOpenClose } from "../../Redux/Slice/hotelSlice";

const MapCheckScreen = () => {
  const { map, hotelDetail } = useAppSelector((state) => state.hotel);
  const dispatch = useAppDispatch();

  // Activity list from hotelDetail
  const activityList = hotelDetail?.nearBy?.activityList || [];

  // Convert activityList to markers with coordinates
  const markers = activityList.map((activity) => ({
    title: activity.name,
    latitude: parseFloat(activity.latitude),
    longitude: parseFloat(activity.longitude),
  }));

  // Calculate the initial region to encompass all markers
  const calculateInitialRegion = () => {
    if (markers.length === 0) {
      return {
        latitude: 16.060126, // Default fallback (Da Nang Museum)
        longitude: 108.223118,
        latitudeDelta: 0.05,
        longitudeDelta: 0.05,
      };
    }

    const latitudes = markers.map((marker) => marker.latitude);
    const longitudes = markers.map((marker) => marker.longitude);

    const minLat = Math.min(...latitudes);
    const maxLat = Math.max(...latitudes);
    const minLng = Math.min(...longitudes);
    const maxLng = Math.max(...longitudes);

    const latitude = (minLat + maxLat) / 2;
    const longitude = (minLng + maxLng) / 2;
    const latitudeDelta = (maxLat - minLat) * 1.5 || 0.05; // Add padding
    const longitudeDelta = (maxLng - minLng) * 1.5 || 0.05; // Add padding

    return {
      latitude,
      longitude,
      latitudeDelta,
      longitudeDelta,
    };
  };

  const handleOpenMap = () => {
    if (map === true) {
      openMapLocation();
      dispatch(mapOpenClose(false));
    }
  };

  useEffect(() => {
    handleOpenMap();
  }, [map]);

  const openMapLocation = () => {
    // Open the first marker's location as a fallback
    const { latitude, longitude } = markers[0] || calculateInitialRegion();
    const url = `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;
    Linking.openURL(url).catch((err) =>
      console.error("Error opening map:", err)
    );
  };

  const openMapDirections = (latitude, longitude) => {
    const url = `https://www.google.com/maps/dir/?api=1&destination=${latitude},${longitude}`;
    Linking.openURL(url).catch((err) =>
      console.error("Error opening directions:", err)
    );
  };

  return (
    <View>
      <View style={styles.mapContainer}>
        <View style={styles.mapWapper}>
          <MapView style={styles.map} initialRegion={calculateInitialRegion()}>
            {markers.map((marker, index) => (
              <Marker
                key={index}
                coordinate={{
                  latitude: marker.latitude,
                  longitude: marker.longitude,
                }}
                title={marker.title}
                onPress={() =>
                  openMapDirections(marker.latitude, marker.longitude)
                }
              />
            ))}
          </MapView>
        </View>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  mapContainer: {
    width: "100%", // Adjusted to full width
    height: 300, // Increased height for better visibility
    marginHorizontal: "auto",
    backgroundColor: "white",
  },
  mapWapper: {
    width: "100%",
    height: "100%",
    backgroundColor: "white",
  },
  map: {
    flex: 1,
  },
});

export default MapCheckScreen;

src\Components\Map\MapPriceScreen.js

import React, { useEffect, useState } from "react";
import {
  StyleSheet,
  View,
  Text,
  TouchableOpacity,
  Linking,
} from "react-native";
import MapView, { Marker } from "react-native-maps";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import { mapOpenClose } from "../../Redux/Slice/hotelSlice";

const MapPriceScreen = ({ route, data }) => {
  // const data = route?.params;
  console.log("data mappppp", data);
  const { map } = useAppSelector((state) => state.hotel);
  const dispatch = useAppDispatch();
  const [latitude, longitude] = (data && data.split(",")) || [
    21.0312, 105.8341,
  ];

  const lat = parseFloat(latitude);
  const lon = parseFloat(longitude);
  console.log(latitude, longitude);
  const handleOpenMap = () => {
    if (map === true) {
      openMapLocation();
      dispatch(mapOpenClose(false));
    }
  };
  console.log(map);
  useEffect(() => {
    handleOpenMap();
  }, [map]);
  const startCoordinate = {
    latitude: lat, // Lăng Chủ tịch Hồ Chí Minh
    longitude: lon,
  };

  //   const [showButtons, setShowButtons] = useState(false); // State để hiển thị nút

  const openMapLocation = () => {
    const url = `https://www.google.com/maps/search/?api=1&query=${startCoordinate.latitude},${startCoordinate.longitude}`;
    Linking.openURL(url).catch((err) =>
      console.error("Error opening map:", err)
    );
  };

  const openMapDirections = () => {
    const url = `https://www.google.com/maps/dir/?api=1&destination=${startCoordinate.latitude},${startCoordinate.longitude}`;
    Linking.openURL(url).catch((err) =>
      console.error("Error opening directions:", err)
    );
  };

  return (
    <View>
      <View style={styles.mapContainer}>
        <View style={styles.mapWapper}>
          <MapView
            style={styles.map}
            initialRegion={{
              latitude: startCoordinate.latitude,
              longitude: startCoordinate.longitude,
              latitudeDelta: 0.01,
              longitudeDelta: 0.01,
            }}
          >
            <Marker
              coordinate={startCoordinate}
              // title="Lăng Chủ tịch Hồ Chí Minh"
              //   onPress={() => setShowButtons((pre) => !pre)}
            />
          </MapView>
        </View>
      </View>
      {/* {showButtons && (
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={openMapDirections}>
            <Text style={styles.buttonText}>Chỉ đường</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.button} onPress={openMapLocation}>
            <Text style={styles.buttonText}>Xem vị trí</Text>
          </TouchableOpacity>
        </View>
      )} */}
    </View>
  );
};

const styles = StyleSheet.create({
  mapContainer: {
    width: "90%",
    height: 200,
    marginHorizontal: "auto",
    backgroundColor: "white",
  },
  mapWapper: {
    width: "100%",
    height: "100%",
    backgroundColor: "white",
  },
  map: {
    flex: 1,
  },
  buttonContainer: {
    //     position: "absolute",
    //     bottom: 0,
    //     right: 0,
    //     flexDirection: "row",
  },
  button: {
    backgroundColor: "#4285F4", // Màu xanh giống Google Maps
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 5,
    marginLeft: 5,
  },
  buttonText: {
    color: "#FFFFFF",
    fontSize: 12,
    fontWeight: "bold",
  },
});

export default MapPriceScreen;

src\Components\Modal\Booking\ModalBookingCancelled.js

import React, { useState } from "react";
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  Modal,
  TextInput,
  Alert,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { useAppDispatch, useAppSelector } from "../../../Redux/hook";
import { fetchConfirmBookingCancelled } from "../../../Redux/Slice/bookingSlice";
import { fetchBookingStatus } from "../../../Redux/Slice/hotelSlice";

const ModalBookingCancelled = ({
  visible,
  onClose,
  onConfirm,
  bookingId,
  navigation,
  handleToBookingScreen,
  policyRoomList, // Nhận mảng từ props
}) => {
  const bookingStatus = useAppSelector((state) => state.booking);
  const [cancelReason, setCancelReason] = useState("");
  const [error, setError] = useState("");
  const dispatch = useAppDispatch();

  const handleConfirmCancelled = () => {
    try {
      if (!cancelReason?.trim()) {
        setError("Vui lòng nhập lý do hủy phòng.");
        return;
      }

      const value = {
        bookingId: bookingId,
        reason: cancelReason,
      };

      console.log("bookingId", bookingId);
      console.log("Xác nhận hủy phòng với lý do:", cancelReason);

      dispatch(fetchConfirmBookingCancelled(value))
        .unwrap()
        .catch((error) => {
          Alert.alert("Lỗi", `Không thể hủy đặt phòng: ${error.message}`);
        });

      dispatch(fetchBookingStatus())
        .unwrap()
        .catch((error) => {
          Alert.alert(
            "Lỗi",
            `Không thể cập nhật trạng thái đặt phòng: ${error.message}`
          );
        });

      setError("");
      setCancelReason("");
      onClose();
      handleToBookingScreen();
    } catch (error) {
      Alert.alert("Lỗi", `Không thể xử lý hủy phòng: ${error.message}`);
    }
  };

  const renderPolicyItem = (policy, index) => {
    if (!policy?.name || !policy?.description) return null;
    return (
      <View key={policy?.id || `policy-${index}`} style={styles.policyItem}>
        <Ionicons
          name="newspaper-outline"
          size={20}
          color="#191D39"
          style={styles.iconPolicy}
        />
        <View style={styles.policyContent}>
          <Text style={styles.policyName}>{policy.name}</Text>
          <Text style={styles.policyDescription}>{policy.description}</Text>
          {policy?.condition && policy?.value && (
            <Text style={styles.policyDetails}>
              Điều kiện: {policy.condition} giờ, Hoàn tiền: {policy.value}
            </Text>
          )}
        </View>
      </View>
    );
  };

  return (
    <Modal
      animationType="fade"
      transparent={true}
      visible={visible}
      onRequestClose={onClose}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContainer}>
          <View style={styles.header}>
            <Text style={styles.headerText}>Chính sách hủy phòng</Text>
            <TouchableOpacity onPress={onClose}>
              <Ionicons name="close" size={24} color="#000" />
            </TouchableOpacity>
          </View>
          <ScrollView style={styles.policies}>
            {policyRoomList?.length > 0 ? (
              <>
                <Text style={styles.sectionTitle}>Danh sách chính sách</Text>
                {policyRoomList.map((policy, index) =>
                  renderPolicyItem(policy, index)
                )}
              </>
            ) : (
              <Text style={styles.emptyText}>Không có chính sách nào.</Text>
            )}
            <View style={styles.reasonContainer}>
              <Text style={styles.reasonLabel}>Lý do hủy phòng</Text>
              <TextInput
                style={[styles.reasonInput, error ? styles.inputError : null]}
                placeholder="Nhập lý do hủy phòng..."
                placeholderTextColor="#999"
                value={cancelReason}
                onChangeText={(text) => {
                  setCancelReason(text);
                  setError("");
                }}
                multiline
                numberOfLines={4}
              />
              {error && <Text style={styles.errorText}>{error}</Text>}
            </View>
          </ScrollView>
          <View style={styles.footer}>
            <TouchableOpacity style={styles.cancelButton} onPress={onClose}>
              <Text style={styles.cancelButtonText}>Hủy</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.applyButton}
              onPress={handleConfirmCancelled}
            >
              <Text style={styles.applyButtonText}>Xác nhận hủy</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

export default ModalBookingCancelled;

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  modalContainer: {
    backgroundColor: "#FFF",
    borderRadius: 12,
    padding: 20,
    width: "90%",
    maxHeight: "80%",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 5,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingBottom: 15,
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  headerText: {
    fontSize: 20,
    fontWeight: "700",
    color: "#000",
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: "#333",
    marginBottom: 10,
  },
  policies: {
    maxHeight: 400,
    paddingVertical: 10,
  },
  policyItem: {
    flexDirection: "row",
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#F0F0F0",
  },
  iconPolicy: {
    marginRight: 12,
    marginTop: 5,
  },
  policyContent: {
    flex: 1,
  },
  policyName: {
    fontSize: 16,
    fontWeight: "600",
    color: "#191D39",
    marginBottom: 4,
  },
  policyDescription: {
    fontSize: 14,
    color: "#555",
    lineHeight: 20,
  },
  policyDetails: {
    fontSize: 13,
    color: "#777",
    marginTop: 4,
  },
  policyType: {
    fontSize: 13,
    color: "#777",
    marginTop: 2,
  },
  emptyText: {
    fontSize: 14,
    color: "#666",
    textAlign: "center",
    padding: 20,
  },
  reasonContainer: {
    marginTop: 15,
    marginBottom: 20,
  },
  reasonLabel: {
    fontSize: 16,
    fontWeight: "600",
    color: "#000",
    marginBottom: 8,
  },
  reasonInput: {
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 8,
    padding: 12,
    fontSize: 14,
    color: "#000",
    backgroundColor: "#F9F9F9",
    textAlignVertical: "top",
    minHeight: 100,
  },
  inputError: {
    borderColor: "#FF0000",
  },
  errorText: {
    fontSize: 12,
    color: "#FF0000",
    marginTop: 5,
  },
  footer: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingTop: 15,
    borderTopWidth: 1,
    borderTopColor: "#E0E0E0",
  },
  cancelButton: {
    backgroundColor: "#FFF",
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 10,
    paddingVertical: 12,
    paddingHorizontal: 20,
    flex: 1,
    marginRight: 10,
    alignItems: "center",
  },
  cancelButtonText: {
    fontSize: 16,
    color: "#000",
    fontWeight: "500",
  },
  applyButton: {
    backgroundColor: "#FF3B30",
    borderRadius: 10,
    paddingVertical: 12,
    paddingHorizontal: 20,
    flex: 1,
    alignItems: "center",
  },
  applyButtonText: {
    fontSize: 16,
    color: "#FFF",
    fontWeight: "600",
  },
});

src\Components\Modal\FlexibleModal\ReusableModal.js
import React from "react";
import {
  View,
  Text,
  Modal,
  StyleSheet,
  TouchableOpacity,
  ActivityIndicator,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

const ReusableModal = ({
  visible,
  type = "confirm", // confirm, loading, success, error, warning
  title = "",
  message = "",
  confirmText = "Xác nhận",
  cancelText = "Hủy",
  onConfirm,
  onCancel,
  confirmButtonStyle,
  cancelButtonStyle,
}) => {
  // Hàm render biểu tượng hoặc ActivityIndicator dựa trên type
  const renderIcon = () => {
    switch (type) {
      case "loading":
        return <ActivityIndicator size="large" color="#00F598" />;
      case "success":
        return <Ionicons name="checkmark-circle" size={50} color="#00F598" />;
      case "error":
        return <Ionicons name="close-circle" size={50} color="#FF3B30" />;
      case "warning":
        return <Ionicons name="warning" size={50} color="#FF9500" />;
      case "confirm":
      default:
        return <Ionicons name="help-circle" size={50} color="#007AFF" />;
    }
  };

  // Hàm render nội dung Modal
  const renderContent = () => {
    return (
      <>
        {renderIcon()}
        <Text style={styles.modalTitle}>
          {title ||
            (type === "loading"
              ? "Đang xử lý"
              : type === "success"
              ? "Thành công!"
              : type === "error"
              ? "Lỗi!"
              : type === "warning"
              ? "Cảnh báo!"
              : "Xác nhận")}
        </Text>
        <Text style={styles.modalText}>
          {message ||
            (type === "loading"
              ? "Vui lòng chờ trong giây lát..."
              : type === "success"
              ? "Thao tác đã hoàn tất."
              : type === "error"
              ? "Đã có lỗi xảy ra."
              : type === "warning"
              ? "Hãy kiểm tra lại trước khi tiếp tục."
              : "Bạn có chắc chắn muốn tiếp tục?")}
        </Text>
      </>
    );
  };

  // Hàm render các nút
  const renderButtons = () => {
    if (type === "loading") return null;
    return (
      <View style={styles.buttonContainer}>
        {type === "confirm" && (
          <TouchableOpacity
            style={[styles.cancelButton, cancelButtonStyle]}
            onPress={onCancel}
          >
            <Text style={styles.buttonText}>{cancelText}</Text>
          </TouchableOpacity>
        )}
        <TouchableOpacity
          style={[styles.confirmButton, confirmButtonStyle]}
          onPress={onConfirm}
        >
          <Text style={styles.buttonText}>{confirmText}</Text>
        </TouchableOpacity>
      </View>
    );
  };

  return (
    <Modal visible={visible} transparent={true} animationType="fade">
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          {renderContent()}
          {renderButtons()}
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  modalContent: {
    backgroundColor: "white",
    padding: 20,
    borderRadius: 10,
    alignItems: "center",
    width: "80%",
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#333",
    marginVertical: 10,
  },
  modalText: {
    fontSize: 16,
    color: "#333",
    textAlign: "center",
    marginBottom: 20,
  },
  buttonContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    width: "100%",
  },
  confirmButton: {
    backgroundColor: "#00F598",
    borderRadius: 8,
    paddingVertical: 10,
    paddingHorizontal: 20,
    flex: 1,
    marginLeft: 5,
    alignItems: "center",
  },
  cancelButton: {
    backgroundColor: "#FF3B30",
    borderRadius: 8,
    paddingVertical: 10,
    paddingHorizontal: 20,
    flex: 1,
    marginRight: 5,
    alignItems: "center",
  },
  buttonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default ReusableModal;

src\Components\Modal\Home\ModalAmenity.js

import React, { useState } from "react";
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { useAppDispatch, useAppSelector } from "../../../Redux/hook";
import {
  applyFilter,
  updateFilter,
  updateTempFilter,
} from "../../../Redux/Slice/hotelSlice";
const ModalAmenity = ({ onClose }) => {
  const { amenityList, tempFilter } = useAppSelector((state) => state.hotel);
  const amenitiesData = amenityList;
  const dispatch = useAppDispatch();

  const [selectedAmenities, setSelectedAmenities] = useState(
    tempFilter.amenityIds || []
  );

  // console.log(">>> 22 Modalamenity inforFilter:", inforFilter);
  // console.log(">>> 22 Modalamenity inforFilter:", inforFilter.amenityIds);

  const toggleAmenity = (id) => {
    let updatedAmenities;
    if (selectedAmenities.includes(id)) {
      updatedAmenities = selectedAmenities.filter(
        (amenityId) => amenityId !== id
      );
    } else {
      updatedAmenities = [...selectedAmenities, id];
    }
    setSelectedAmenities(updatedAmenities);
    dispatch(updateTempFilter({ amenityIds: updatedAmenities }));
  };

  const handleApply = () => {
    // dispatch(updateFilter({ ...inforFilter, amenityIds: selectedAmenities }));

    // console.log(inforFilter.amenityIds);
    // onClose();

    dispatch(applyFilter()); // Copy tempFilter vào inforFilter
    onClose();
    // try {
    //   dispatch(applyFilter());
    //   onClose();
    // } catch (error) {
    //   console.log(error);
    // }
  };

  const getIconForAmenity = (name) => {
    switch (name) {
      case "Wi-fi miễn phí":
        return "wifi-outline";
      case "Phòng gym":
        return "barbell-outline";
      case "Thích hợp trẻ em":
        return "happy-outline";
      case "Bữa sáng miễn phí":
        return "restaurant-outline";
      default:
        return "ellipse-outline";
    }
  };

  // Log để debug
  // console.log("amenitiesData:", amenitiesData);

  // Nếu không hiển thị thì trả về null

  return (
    <View style={styles.modalContent}>
      {/* Kiểm tra dữ liệu trước khi render */}
      {!amenitiesData || amenitiesData.length === 0 ? (
        <View style={styles.emptyContainer}>
          <Text>Không có tiện nghi nào</Text>
        </View>
      ) : (
        <ScrollView style={styles.scrollView}>
          <View style={styles.amenitiesContainer}>
            {amenitiesData.map((amenity) => {
              const isSelected = selectedAmenities.includes(amenity.id);
              return (
                <TouchableOpacity
                  key={amenity.id}
                  style={[
                    styles.amenityButton,
                    isSelected && styles.amenityButtonSelected,
                  ]}
                  onPress={() => toggleAmenity(amenity.id)}
                >
                  <Ionicons
                    name={getIconForAmenity(amenity.name)}
                    size={40}
                    color={isSelected ? "#FFF" : "#0090FF"}
                    style={styles.amenityIcon}
                  />
                  <Text
                    style={[
                      styles.amenityText,
                      isSelected && styles.amenityTextSelected,
                    ]}
                  >
                    {amenity.name}
                  </Text>
                </TouchableOpacity>
              );
            })}
          </View>
        </ScrollView>
      )}

      {/* Nút Áp dụng */}
      <View style={styles.footer}>
        <TouchableOpacity style={styles.cancelButton} onPress={onClose}>
          <Text style={styles.cancelButtonText}>Xóa</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.applyButton} onPress={handleApply}>
          <Text style={styles.applyButtonText}>Áp dụng</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};
export default ModalAmenity;
const styles = StyleSheet.create({
  modalContent: {
    backgroundColor: "#FFF",
    marginHorizontal: 0,
    marginVertical: 0,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  headerText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#000",
  },
  scrollView: {
    maxHeight: 400,
    minHeight: 400,
  },
  amenitiesContainer: {
    flexDirection: "row",
    flexWrap: "wrap",
    paddingVertical: 15,
  },
  amenityButton: {
    flexDirection: "column",
    alignItems: "center",
    backgroundColor: "#FFF",
    borderWidth: 1,
    borderColor: "#0090FF",
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 15,
    margin: 5,
    width: "47%", // 2 cột
  },
  amenityButtonSelected: {
    backgroundColor: "#0090FF",
    borderColor: "#0090FF",
  },
  amenityIcon: {
    marginBottom: 5, // Khoảng cách giữa icon và text
  },
  amenityText: {
    fontSize: 12,
    color: "#000",
    textAlign: "center",
  },
  amenityTextSelected: {
    color: "#FFF",
  },
  footer: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 15,
    borderTopWidth: 1,
    borderTopColor: "#E0E0E0",
  },
  cancelButton: {
    backgroundColor: "#FFF",
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 20,
    flex: 1,
    marginRight: 10,
    alignItems: "center",
  },
  cancelButtonText: {
    fontSize: 16,
    color: "#000",
  },
  applyButton: {
    backgroundColor: "#00F598",
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 20,
    flex: 1,
    alignItems: "center",
  },
  applyButtonText: {
    fontSize: 16,
    color: "#FFF",
    fontWeight: "bold",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
});


src\Components\Modal\Home\ModalCheckIn.js

import React from "react";
import { View, Text, TouchableOpacity, StyleSheet, Modal } from "react-native";
import { Picker } from "@react-native-picker/picker";
import { useDispatch } from "react-redux";

const ModalCheckIn = ({
  visible,
  onClose,
  selectDay,
  setSelectDay,
  confirm,
}) => {
  const dispatch = useDispatch();
  const days = Array.from({ length: 31 }, (_, i) => i + 1);
  const months = Array.from({ length: 12 }, (_, i) => i + 1);
  const years = Array.from({ length: 10 }, (_, i) => 2025 + i);
  return (
    <Modal visible={visible} transparent={true} animationType="none">
      <View style={styles.modalOverlay}>
        <View style={styles.datePickerContainer}>
          <Text style={styles.modalTitle}>Chọn ngày nhận phòng</Text>
          <View style={styles.pickerContainer}>
            <Picker
              style={styles.picker}
              selectedValue={selectDay.day}
              onValueChange={(value) =>
                setSelectDay({ ...selectDay, day: value })
              }
            >
              {days.map((day) => (
                <Picker.Item key={day} label={`${day}`} value={day} />
              ))}
            </Picker>
            <Picker
              style={styles.picker}
              selectedValue={selectDay.month}
              onValueChange={(value) =>
                setSelectDay({ ...selectDay, month: value })
              }
            >
              {months.map((month) => (
                <Picker.Item key={month} label={`${month}`} value={month} />
              ))}
            </Picker>
            <Picker
              style={styles.picker}
              selectedValue={selectDay.year}
              onValueChange={(value) =>
                setSelectDay({ ...selectDay, month: value })
              }
            >
              {years.map((year) => (
                <Picker.Item key={year} label={`${year}`} value={year} />
              ))}
            </Picker>
          </View>
          <View style={styles.modalButtons}>
            <TouchableOpacity
              style={styles.modalButton}
              onPress={() => onClose("Modal_CheckIn", "false")}
            >
              <Text style={styles.modalButtonText}>Hủy</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.modalButton, styles.confirmButton]}
              onPress={() => confirm("checkin")}
            >
              <Text style={styles.modalButtonText}>Xác nhận</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};
export default ModalCheckIn;

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  datePickerContainer: {
    backgroundColor: "white",
    borderRadius: 10,
    padding: 20,
    width: "100%",
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 15,
    textAlign: "center",
  },
  pickerContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  picker: {
    flex: 1,
    height: 150,
  },
  modalButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 20,
  },
  modalButton: {
    backgroundColor: "#f5f5f5",
    padding: 10,
    borderRadius: 5,
    flex: 1,
    marginHorizontal: 5,
    alignItems: "center",
  },
  confirmButton: {
    backgroundColor: "#0090FF",
  },
  modalButtonText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
});

src\Components\Modal\Home\ModalCheckOut.js

import React from "react";
import { View, Text, TouchableOpacity, StyleSheet, Modal } from "react-native";
import { Picker } from "@react-native-picker/picker";

const ModalCheckOut = ({
  visible,
  onClose,
  selectDay,
  setSelectDay,
  confirm,
}) => {
  const days = Array.from({ length: 31 }, (_, i) => i + 1);
  const months = Array.from({ length: 12 }, (_, i) => i + 1);
  const years = Array.from({ length: 10 }, (_, i) => 2025 + i);
  return (
    <Modal visible={visible} transparent={true} animationType="none">
      <View style={styles.modalOverlay}>
        <View style={styles.datePickerContainer}>
          <Text style={styles.modalTitle}>Chọn ngày trả phòng</Text>
          <View style={styles.pickerContainer}>
            <Picker
              style={styles.picker}
              selectedValue={selectDay.day}
              onValueChange={(value) =>
                setSelectDay({ ...selectDay, day: value })
              }
            >
              {days.map((day) => (
                <Picker.Item key={day} label={`${day}`} value={day} />
              ))}
            </Picker>
            <Picker
              style={styles.picker}
              selectedValue={selectDay.month}
              onValueChange={(value) =>
                setSelectDay({ ...selectDay, month: value })
              }
            >
              {months.map((month) => (
                <Picker.Item key={month} label={`${month}`} value={month} />
              ))}
            </Picker>
            <Picker
              style={styles.picker}
              selectedValue={selectDay.year}
              onValueChange={(value) =>
                setSelectDay({ ...selectDay, year: value })
              }
            >
              {years.map((year) => (
                <Picker.Item key={year} label={`${year}`} value={year} />
              ))}
            </Picker>
          </View>
          <View style={styles.modalButtons}>
            <TouchableOpacity
              style={styles.modalButton}
              onPress={() => onClose("Modal_CheckOut", "false")}
            >
              <Text style={styles.modalButtonText}>Hủy</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.modalButton, styles.confirmButton]}
              onPress={() => confirm("checkout")}
            >
              <Text style={styles.modalButtonText}>Xác nhận</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};
export default ModalCheckOut;

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  datePickerContainer: {
    backgroundColor: "white",
    borderRadius: 10,
    padding: 20,
    width: "100%",
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 15,
    textAlign: "center",
  },
  pickerContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  picker: {
    flex: 1,
    height: 150,
  },
  modalButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 20,
  },
  modalButton: {
    backgroundColor: "#f5f5f5",
    padding: 10,
    borderRadius: 5,
    flex: 1,
    marginHorizontal: 5,
    alignItems: "center",
  },
  confirmButton: {
    backgroundColor: "#0090FF",
  },
  modalButtonText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
});


src\Components\Modal\Home\ModalFilter.js
import React, { useState } from "react";
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { useAppDispatch, useAppSelector } from "../../../Redux/hook";
import {
  applyFilter,
  updateFilter,
  updateTempFilter,
} from "../../../Redux/Slice/hotelSlice";
const ModalFilter = ({ onClose }) => {
  const { inforFilter, filterList, tempFilter } = useAppSelector(
    (state) => state.hotel
  );

  const serviceData = filterList;

  const dispatch = useAppDispatch();

  const [selectedService, setSelectService] = useState(
    tempFilter.serviceIds || []
  );

  const toggleService = (id) => {
    let updateService;
    if (selectedService.includes(id)) {
      updateService = selectedService.filter((serviceId) => serviceId !== id);
    } else {
      updateService = [...selectedService, id];
    }

    setSelectService(updateService);
    dispatch(updateTempFilter({ serviceIds: updateService }));
  };

  const handleApply = () => {
    dispatch(applyFilter());
    //  dispatch(updateFilter({ ...inforFilter, serviceIds: selectedService }));
    //  console.log(inforFilter.serviceIds);
    onClose();
    // try {
    //   dispatch(applyFilter());
    //   onClose();
    // } catch (error) {
    //   console.log(error);
    // }
  };

  const getIconForAmenity = (amenity) => {
    const { name } = amenity;

    // Ánh xạ từng name với một icon khác nhau
    const nameIcons = {
      "Nhìn ra thành phố": "eye-outline",
      "Phòng tắm riêng": "water-outline",
      "Đồ vệ sinh cá nhân miễn phí": "brush-outline",
      "Két an toàn": "lock-closed-outline",
      "Nhà vệ sinh": "water-outline",
      "Lò sưởi": "flame-outline",
      "Bồn tắm hoặc Vòi sen": "water-outline",
      "Khăn tắm": "bandage-outline",
      "Ra trải giường": "bed-outline",
      "Ổ điện gần giường": "cube-outline",
      "Sàn lát gạch/đá cẩm thạch": "cube-outline",
      "Bàn làm việc": "cube-outline",
      "Ghế cao dành cho trẻ em": "accessibility-outline",
      "Khu vực tiếp khách": "accessibility-outline",
      TV: "tv-outline",
      Dép: "footsteps-outline",
      "Tủ lạnh": "snow-outline",
      "Máy pha trà/cà phê": "cafe-outline",
      "Máy sấy tóc": "cube-outline",
      "Dịch vụ báo thức": "alarm-outline",
      "Ấm đun nước điện": "flash-outline",
      "Truyền hình cáp": "videocam-outline",
      "Két an toàn cỡ laptop": "laptop-outline",
      "Tủ hoặc phòng để quần áo": "shirt-outline",
      "Các tầng trên chỉ lên được bằng cầu thang": "cube-outline",
      "Giấy vệ sinh": "document-outline",
      "Máy điều hòa độc lập cho từng phòng": "snow-outline",
      "Bánh mì trứng": "egg-outline",
      "Phở bò": "egg-outline",
      "Bún riêu": "fish-outline",
      "Cháo gà": "nutrition-outline",
      "Bánh cuốn": "leaf-outline",
      "Cơm tấm sườn bì chả": "fast-food-outline",
      "Canh chua cá lóc": "fish-outline",
      "Gà kho gừng": "nutrition-outline",
      "Cá kho tộ": "fish-outline",
      "Bò xào lúc lắc": "flame-outline",
      "Lẩu hải sản": "fish-outline",
      "Tôm nướng muối ớt": "flame-outline",
      "Bò bít tết": "flame-outline",
      "Cua rang me": "fish-outline",
      "Mực xào sa tế": "fish-outline",
      "Salad cá ngừ": "nutrition-outline",
      "Sushi cá hồi": "fish-outline",
      "Hàu nướng phô mai": "fish-outline",
      "Sườn BBQ": "flame-outline",
      "Gỏi cuốn": "leaf-outline",
      Massage: "hand-right-outline",
      "Xông hơi": "thermometer-outline",
      "Phòng gym": "barbell-outline",
      "Đưa đón sân bay": "airplane-outline",
      "Thuê xe": "car-sport-outline",
      Taxi: "car-outline",
      "Dọn phòng": "brush-outline",
      "Giặt ủi": "shirt-outline",
      "Trang trí phòng đặc biệt": "sparkles-outline",
    };
    // Trả về icon theo name, nếu không tìm thấy thì dùng icon mặc định
    return nameIcons[name] || "ellipse-outline";
  };

  return (
    <View style={styles.modalContent}>
      {/* Kiểm tra dữ liệu trước khi render */}
      {!serviceData || serviceData.length === 0 ? (
        <View style={styles.emptyContainer}>
          <Text>Không có tiện nghi nào</Text>
        </View>
      ) : (
        <ScrollView style={styles.scrollView}>
          <View style={styles.amenitiesContainer}>
            {serviceData.map((amenity) => {
              const isSelected = selectedService.includes(amenity.id);
              return (
                <TouchableOpacity
                  key={amenity.id}
                  style={[
                    styles.amenityButton,
                    isSelected && styles.amenityButtonSelected,
                  ]}
                  onPress={() => toggleService(amenity.id)}
                >
                  <Ionicons
                    name={getIconForAmenity(amenity)} // Truyền toàn bộ đối tượng amenity
                    size={40}
                    color={isSelected ? "#FFF" : "#0090FF"}
                    style={styles.amenityIcon}
                  />
                  <Text
                    style={[
                      styles.amenityText,
                      isSelected && styles.amenityTextSelected,
                    ]}
                  >
                    {amenity.name}
                  </Text>
                </TouchableOpacity>
              );
            })}
          </View>
        </ScrollView>
      )}

      {/* Nút Áp dụng */}
      <View style={styles.footer}>
        <TouchableOpacity style={styles.cancelButton} onPress={onClose}>
          <Text style={styles.cancelButtonText}>Xóa</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.applyButton} onPress={handleApply}>
          <Text style={styles.applyButtonText}>Áp dụng</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};
export default ModalFilter;
const styles = StyleSheet.create({
  modalContent: {
    backgroundColor: "#FFF",
    marginHorizontal: 0,
    marginVertical: 0,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  headerText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#000",
  },
  scrollView: {
    maxHeight: 400,
    minHeight: 400,
  },
  amenitiesContainer: {
    flexDirection: "row",
    flexWrap: "wrap",
    paddingVertical: 15,
  },
  amenityButton: {
    flexDirection: "column",
    alignItems: "center",
    backgroundColor: "#FFF",
    borderWidth: 1,
    borderColor: "#0090FF",
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 15,
    margin: 5,
    width: "47%", // 2 cột
  },
  amenityButtonSelected: {
    backgroundColor: "#0090FF",
    borderColor: "#0090FF",
  },
  amenityIcon: {
    marginBottom: 5, // Khoảng cách giữa icon và text
  },
  amenityText: {
    fontSize: 12,
    color: "#000",
    textAlign: "center",
  },
  amenityTextSelected: {
    color: "#FFF",
  },
  footer: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 15,
    borderTopWidth: 1,
    borderTopColor: "#E0E0E0",
  },
  cancelButton: {
    backgroundColor: "#FFF",
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 20,
    flex: 1,
    marginRight: 10,
    alignItems: "center",
  },
  cancelButtonText: {
    fontSize: 16,
    color: "#000",
  },
  applyButton: {
    backgroundColor: "#00F598",
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 20,
    flex: 1,
    alignItems: "center",
  },
  applyButtonText: {
    fontSize: 16,
    color: "#FFF",
    fontWeight: "bold",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
});


src\Components\Modal\Home\ModalGuestsAndRooms.js
import React, { useEffect, useState } from "react";
import { View, Text, TouchableOpacity, StyleSheet, Modal } from "react-native";
import { useAppSelector, useAppDispatch } from "../../../Redux/hook";
import { updateFilter } from "../../../Redux/Slice/hotelSlice";

const ModalGuestsAndRooms = ({
  visible,
  onClose,
  // inforFilter,
  // setInforFilter,
}) => {
  const {
    hotelList,
    locationList,
    hotelDetail,
    hotelByLocation,
    loading,
    error,
    inforFilter,
  } = useAppSelector((state) => state.hotel);

  const dispatch = useAppDispatch();
  const [tempValues, setTempValues] = useState({});

  useEffect(() => {
    const initValue = {
      adults: inforFilter.adults || 1,
      children: inforFilter.children || 0,
      roomNumber: inforFilter.roomNumber || 1,
    };
    setTempValues(initValue);
  }, []);

  // console.log("temValue", tempValues);
  // console.log("infoFilter", inforFilter);

  const increaseValue = (key) => {
    setTempValues((prev) => ({
      ...prev,
      [key]: prev[key] + 1,
    }));
  };

  const decreaseValue = (key) => {
    setTempValues((prev) => {
      if (key === "roomNumber" && prev[key] <= 0) return prev;
      if (prev[key] <= 0) return prev;
      return {
        ...prev,
        [key]: prev[key] - 1,
      };
    });
  };

  const handleConfirm = () => {
    // setInforFilter((prev) => ({
    //   ...prev,
    //   adults: tempValues.adults,
    //   children: tempValues.children,
    //   roomNumber: tempValues.roomNumber,
    // }));

    dispatch(
      updateFilter({
        ...inforFilter,
        adults: tempValues.adults,
        children: tempValues.children,
        roomNumber: tempValues.roomNumber,
      })
    );
    onClose("Modal_GuestsAndRooms", false);
  };

  const handleCloseModal = () => {
    const initValue = {
      adults: inforFilter.adults || 1,
      children: inforFilter.children || 0,
      roomNumber: inforFilter.roomNumber || 1,
    };
    setTempValues(initValue);
    onClose("Modal_GuestsAndRooms", false);
  };

  return (
    <Modal visible={visible} transparent={true} animationType="none">
      <View style={styles.modalOverlay}>
        <View style={styles.modalContainer}>
          <Text style={styles.modalTitle}>Chọn phòng và khách</Text>

          {/* Số phòng */}
          <View style={styles.row}>
            <Text style={styles.label}>Phòng</Text>
            <View style={styles.counterContainer}>
              <TouchableOpacity
                style={styles.button}
                onPress={() => decreaseValue("roomNumber")}
              >
                <Text style={styles.buttonText}>−</Text>
              </TouchableOpacity>
              <Text style={styles.value}>{tempValues.roomNumber}</Text>
              <TouchableOpacity
                style={styles.button}
                onPress={() => increaseValue("roomNumber")}
              >
                <Text style={styles.buttonText}>+</Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* Số người lớn */}
          <View style={styles.row}>
            <Text style={styles.label}>Người lớn</Text>
            <View style={styles.counterContainer}>
              <TouchableOpacity
                style={styles.button}
                onPress={() => decreaseValue("adults")}
              >
                <Text style={styles.buttonText}>−</Text>
              </TouchableOpacity>
              <Text style={styles.value}>{tempValues.adults}</Text>
              <TouchableOpacity
                style={styles.button}
                onPress={() => increaseValue("adults")}
              >
                <Text style={styles.buttonText}>+</Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* Số trẻ em */}
          <View style={styles.row}>
            <Text style={styles.label}>Trẻ em</Text>
            <View style={styles.counterContainer}>
              <TouchableOpacity
                style={styles.button}
                onPress={() => decreaseValue("children")}
              >
                <Text style={styles.buttonText}>−</Text>
              </TouchableOpacity>
              <Text style={styles.value}>{tempValues.children}</Text>
              <TouchableOpacity
                style={styles.button}
                onPress={() => increaseValue("children")}
              >
                <Text style={styles.buttonText}>+</Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* Nút Hủy và Xác nhận */}
          <View style={styles.modalButtons}>
            <TouchableOpacity
              style={styles.modalButton}
              onPress={() => handleCloseModal()}
            >
              <Text style={styles.modalButtonText}>Hủy</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.modalButton, styles.confirmButton]}
              onPress={handleConfirm}
            >
              <Text style={styles.modalButtonText}>Xác nhận</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};
export default ModalGuestsAndRooms;

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  modalContainer: {
    backgroundColor: "white",
    borderRadius: 10,
    padding: 20,
    width: "80%",
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  row: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: "500",
  },
  counterContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  button: {
    backgroundColor: "#f5f5f5",
    paddingHorizontal: 15,
    paddingVertical: 5,
    borderRadius: 5,
    marginHorizontal: 10,
  },
  buttonText: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#333",
  },
  value: {
    fontSize: 16,
    fontWeight: "bold",
    minWidth: 30,
    textAlign: "center",
  },
  modalButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 20,
  },
  modalButton: {
    backgroundColor: "#f5f5f5",
    padding: 10,
    borderRadius: 5,
    flex: 1,
    marginHorizontal: 5,
    alignItems: "center",
  },
  confirmButton: {
    backgroundColor: "#0090FF",
  },
  modalButtonText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
});


src\Components\Modal\Home\ModalLocationList.js
import React from "react";
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
} from "react-native";
import Icon from "react-native-vector-icons/FontAwesome";
import { useAppSelector } from "../../../Redux/hook";

const ModalLocationList = ({ position, onClose, onSelect }) => {
  //   const locations = [
  //     { description: "Đà Nẵng rất đẹp", id: 1, name: "Đà Nẵng", rating: 4.5 },
  //     { description: "Lạng Sơn rất đẹp", id: 2, name: "Lạng Sơn", rating: 4.5 },
  //     { description: "Lạng Sơn rất đẹp", id: 3, name: "Lạng Sơn1", rating: 4.5 },
  //     { description: "Lạng Sơn rất đẹp", id: 4, name: "Lạng Sơn2", rating: 4.5 },
  //     { description: "Lạng Sơn rất đẹp", id: 5, name: "Lạng Sơn3", rating: 4.5 },
  //   ];

  const { hotelList, locationList, hotelDetail, loading, error } =
    useAppSelector((state) => state.hotel);

  return (
    <View
      style={[
        styles.container,
        {
          top: position.top,
          left: position.left,
          width: position.width,
        },
      ]}
    >
      <Text style={styles.modalTitle}>Chọn địa điểm</Text>

      <ScrollView style={styles.scrollView}>
        {locationList &&
          locationList?.map((item) => (
            <TouchableOpacity
              key={item.id.toString()}
              style={styles.locationItem}
              onPress={() => {
                onSelect(item.id.toString());
                onClose();
              }}
            >
              <Icon name="map-marker" size={24} color="#0090FF" />
              <Text style={styles.locationText}>{item.name}</Text>
            </TouchableOpacity>
          ))}
      </ScrollView>

      <TouchableOpacity style={styles.closeButton} onPress={onClose}>
        <Text style={styles.closeButtonText}>Đóng</Text>
      </TouchableOpacity>
    </View>
  );
};

export default ModalLocationList;

const styles = StyleSheet.create({
  container: {
    position: "absolute",
    backgroundColor: "white",
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
    zIndex: 1000,
  },
  scrollView: {
    maxHeight: 200, // Giới hạn chiều cao để cuộn
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 15,
    textAlign: "center",
    padding: 10,
  },
  locationItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 10,
    paddingHorizontal: 15,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  locationText: {
    fontSize: 16,
    marginLeft: 10,
  },
  closeButton: {
    marginTop: 20,
    backgroundColor: "#0090FF",
    paddingVertical: 10,
    borderRadius: 5,
    alignItems: "center",
    marginHorizontal: 15,
    marginBottom: 15,
  },
  closeButtonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
  },
});


src\Components\Modal\Home\ModalSort.js
import React, { useState } from "react";
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { useAppDispatch, useAppSelector } from "../../../Redux/hook";
import {
  updateFilter,
  updateTempFilter,
  applyFilter,
} from "../../../Redux/Slice/hotelSlice";
const ModalSort = ({ onClose }) => {
  const { sortList, inforFilter, tempFilter } = useAppSelector(
    (state) => state.hotel
  );
  const sortData = sortList;
  //   console.log(sortList);

  const dispatch = useAppDispatch();

  const [selectedSorts, setSelectedSorts] = useState(tempFilter.sortById);

  //   console.log(">>> 22 Modalamenity inforFilter:", inforFilter);
  //   console.log(">>> 22 Modalamenity inforFilter:", inforFilter.sortById);

  const toggleSort = (id) => {
    setSelectedSorts(id);
    dispatch(updateTempFilter({ sortById: id }));
  };

  const getIconForSort = (name) => {
    switch (name) {
      case "Giá tăng dần":
        return "cash-outline";
      case "Giá giảm dần":
        return "cash-outline";
      case "Đánh giá tăng dần":
        return "chatbox-ellipses-outline";
      case "Đánh giá giảm dần":
        return "chatbox-ellipses-outline";
      default:
        return "menu-outline";
    }
  };

  const handleApply = () => {
    // try {
    dispatch(applyFilter());
    // dispatch(updateFilter({ ...inforFilter, sortById: selectedSorts }));
    // console.log(inforFilter.sortById);
    onClose();
    // } catch (error) {
    //   console.log(error);
    // }
  };

  return (
    <View style={styles.modalContent}>
      {/* Header của View */}
      {/* <View style={styles.header}>
        <Text style={styles.headerText}>Tiện nghi</Text>
        <TouchableOpacity onPress={onClose}>
          <Ionicons name="close" size={24} color="#000" />
        </TouchableOpacity>
      </View> */}

      {/* Kiểm tra dữ liệu trước khi render */}
      {!sortData || sortData.length === 0 ? (
        <View style={styles.emptyContainer}>
          <Text>Không có tiện nghi nào</Text>
        </View>
      ) : (
        <ScrollView style={styles.scrollView}>
          <View style={styles.amenitiesContainer}>
            {sortData.map((item) => {
              {
                /* const isSelected = selectedAmenities.includes(item.id); */
              }
              return (
                <TouchableOpacity
                  key={item.id}
                  style={[
                    styles.amenityButton,
                    item.id === selectedSorts && styles.amenityButtonSelected,
                  ]}
                  onPress={() => toggleSort(item.id)}
                >
                  <Ionicons
                    name={getIconForSort(item.name)}
                    size={40}
                    color={item.id === selectedSorts ? "#FFF" : "#0090FF"}
                    style={styles.amenityIcon}
                  />
                  <Text
                    style={[
                      styles.amenityText,
                      item.id === selectedSorts && styles.amenityTextSelected,
                    ]}
                  >
                    {item.name}
                  </Text>
                </TouchableOpacity>
              );
            })}
          </View>
        </ScrollView>
      )}

      {/* Nút Áp dụng */}
      <View style={styles.footer}>
        <TouchableOpacity style={styles.cancelButton} onPress={onClose}>
          <Text style={styles.cancelButtonText}>Xóa</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.applyButton} onPress={handleApply}>
          <Text style={styles.applyButtonText}>Áp dụng</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};
export default ModalSort;

const styles = StyleSheet.create({
  modalContent: {
    backgroundColor: "#FFF",
    marginHorizontal: 0,
    marginVertical: 0,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  headerText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#000",
  },
  scrollView: {
    maxHeight: 400,
    minHeight: 400,
  },
  amenitiesContainer: {
    flexDirection: "row",
    flexWrap: "wrap",
    paddingVertical: 15,
  },
  amenityButton: {
    flexDirection: "column",
    alignItems: "center",
    backgroundColor: "#FFF",
    borderWidth: 1,
    borderColor: "#0090FF",
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 15,
    margin: 5,
    width: "47%", // 2 cột
  },
  amenityButtonSelected: {
    backgroundColor: "#0090FF",
    borderColor: "#0090FF",
  },
  amenityIcon: {
    marginBottom: 5, // Khoảng cách giữa icon và text
  },
  amenityText: {
    fontSize: 12,
    color: "#000",
    textAlign: "center",
  },
  amenityTextSelected: {
    color: "#FFF",
  },
  footer: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 15,
    borderTopWidth: 1,
    borderTopColor: "#E0E0E0",
  },
  cancelButton: {
    backgroundColor: "#FFF",
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 20,
    flex: 1,
    marginRight: 10,
    alignItems: "center",
  },
  cancelButtonText: {
    fontSize: 16,
    color: "#000",
  },
  applyButton: {
    backgroundColor: "#00F598",
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 20,
    flex: 1,
    alignItems: "center",
  },
  applyButtonText: {
    fontSize: 16,
    color: "#FFF",
    fontWeight: "bold",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
});



src\Components\Notification\NotificationItem.js

import React from 'react';
import { View, Text ,StyleSheet} from 'react-native';
//import styles from '../styles/notificationStyles'; // Tách styles để tái sử dụng

const formatDate = (dateArray) => {
    console.log('dateArray', dateArray);
    const date = new Date(
        dateArray[0],
        dateArray[1] - 1,
        dateArray[2],
        dateArray[3],
        dateArray[4],
        dateArray[5]
    );

    const pad = (n) => n.toString().padStart(2, '0');

    return `${pad(date.getDate())}/${pad(date.getMonth() + 1)}/${date.getFullYear()} ${pad(date.getHours())}:${pad(date.getMinutes())}`;
};
const NotificationItem = ({ item }) => (
    <View style={[styles.notificationItem, !item.isRead && styles.unread]}>
        <Text style={styles.title}>{item.title}</Text>
        <Text style={styles.message}>{item.message}</Text>
        <Text style={styles.date}>{formatDate(item.createdAt)}</Text>
    </View>
);

export default React.memo(NotificationItem);
const styles = StyleSheet.create({
    container: { flex: 1, padding: 20 },
    header: { fontSize: 24, fontWeight: 'bold', marginBottom: 10 },
    notificationItem: {
        padding: 10,
        borderBottomWidth: 1,
        borderBottomColor: '#ccc',
        marginBottom: 10,
    },
    unread: {
        backgroundColor: '#d0ebff', // Màu cho thông báo chưa đọc
    },
    title: { fontSize: 16, fontWeight: 'bold' },
    message: { fontSize: 14, color: '#333' },
    date: { fontSize: 12, color: '#666' },
});




src\Components\RenderList\HotelRequestList.js
import React, { useEffect, useState } from "react";
import { View, Text, TouchableOpacity, StyleSheet, Image } from "react-native";
import Icon from "react-native-vector-icons/FontAwesome"; // Sử dụng FontAwesome cho icons
const HotelRequestList = ({ item, navigation }) => {
  return (
    <TouchableOpacity
      style={styles.dealItem}
      onPress={() => navigation.navigate("HotelDetails")}
    >
      <View style={styles.dealImage}>
        <Image
          source={{
            uri: `${item.imageUrl}`,
          }}
          style={styles.image}
        />
      </View>
      <View style={styles.dealDetails}>
        <Text style={styles.dealName}>{item.hotelName}</Text>
        <View style={styles.dealReviews}>
          <Icon
            style={styles.iconStart}
            name="star"
            size={24}
            color="#EBA731"
          />
          <Text style={styles.dealPoint}>{item.hotelRating} </Text>
          <Text style={styles.dealReviewsText}>
            Đánh giá ({item.sumReview}){" "}
          </Text>
        </View>
        <Text style={styles.dealDesc}>{item.promotionName}</Text>
        <View style={styles.dealFooter}>
          <Text style={styles.dealSale}>Giảm 25%</Text>
          <Text style={styles.dealPrice}> {item.price}</Text>
          <TouchableOpacity>
            <Text style={styles.dealBooking}>Đặt ngay </Text>
          </TouchableOpacity>
        </View>
      </View>
    </TouchableOpacity>
  );
};

export default HotelRequestList;

const styles = StyleSheet.create({
  dealItem: {
    alignItems: "flex-start",
    backgroundColor: "#FFFFFF",
    borderRadius: 8,
    marginRight: 10,
    width: 250,
    backgroundColor: "#EFEFEF",
  },
  dealImage: {
    width: 250,
    height: 150,
    borderRadius: 5,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  },
  image: {
    width: 240,
    height: 140,
    borderRadius: 5,
  },
  dealDetails: {
    marginLeft: 8,
    marginRight: 10,
    width: "100%",
  },
  dealName: {
    fontSize: 14,
    fontWeight: "500",
    marginTop: 5,
    marginBottom: 5,
    color: "black",
  },
  dealReviews: {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    marginBottom: 5,
  },
  iconStart: {
    marginRight: 10,
  },
  dealPoint: {
    color: "red",
    fontWeight: "400",
    marginRight: 10,
    fontSize: 12,
  },

  dealReact: {
    fontSize: 12,
  },
  dealReviewsText: {
    fontSize: 12,
  },
  dealLocation: {
    color: "black",
    marginRight: 12,
  },
  dealLocationName: {
    fontSize: 12,
  },
  dealFooter: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginRight: 10,
  },
  dealSale: {
    color: "#EBA731",
    fontWeight: "bold",
    fontSize: 14,
  },
  dealPrice: {
    fontWeight: "600",
    fontSize: 14,
  },
  dealDesc: {
    fontSize: 12,
    fontWeight: 400,
    marginBottom: 5,
  },
  dealBooking: {
    fontSize: 14,
    fontWeight: 400,
    borderRadius: 10,
    backgroundColor: "#00F598",
    color: "white",
    paddingHorizontal: 20,
    paddingVertical: 4,
  },
  dealText: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
    marginTop: 5,
    textAlign: "center",
  },
});


src\Components\Skeleton\Auth\SkeletonInfoConfirm.js

import React from "react";
import { View, StyleSheet, SafeAreaView } from "react-native";
import { MotiView } from "moti";

const SkeletonInfoConfirm = () => {
  return (
    <SafeAreaView style={styles.container}>
      {/* Tiêu đề */}
      <MotiView
        style={styles.skeletonTitle}
        from={{ opacity: 0.3 }}
        animate={{ opacity: 1 }}
        transition={{ type: "timing", duration: 1000, loop: true }}
      />

      {/* Các trường nhập liệu */}
      <View style={styles.inputSection}>
        {/* Trường Họ */}
        <View style={styles.inputContainer}>
          <MotiView
            style={styles.skeletonIcon}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <MotiView
            style={styles.skeletonInput}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
        </View>

        {/* Trường Tên */}
        <View style={styles.inputContainer}>
          <MotiView
            style={styles.skeletonIcon}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <MotiView
            style={styles.skeletonInput}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
        </View>

        {/* Trường Email */}
        <View style={styles.inputContainer}>
          <MotiView
            style={styles.skeletonIcon}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <MotiView
            style={styles.skeletonInput}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
        </View>

        {/* Trường Số điện thoại */}
        <View style={styles.inputContainer}>
          <MotiView
            style={styles.skeletonIcon}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <MotiView
            style={styles.skeletonCountry}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />

          <MotiView
            style={styles.skeletonInputPhone}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <MotiView
            style={styles.skeletonCheckIcon}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
        </View>
      </View>

      {/* Nút xác nhận */}
      <MotiView
        style={styles.skeletonButton}
        from={{ opacity: 0.3 }}
        animate={{ opacity: 1 }}
        transition={{ type: "timing", duration: 1000, loop: true }}
      />

      {/* Nút đăng nhập */}
      <MotiView
        style={styles.skeletonLoginButton}
        from={{ opacity: 0.3 }}
        animate={{ opacity: 1 }}
        transition={{ type: "timing", duration: 1000, loop: true }}
      />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    paddingHorizontal: 20,
    paddingVertical: 30,
  },
  inputSection: {
    // flex: 1,
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
    marginBottom: 20,
  },
  // Skeleton styles
  skeletonTitle: {
    width: 200,
    height: 25,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginTop: 30,
    marginBottom: 50,
    alignSelf: "center",
  },
  skeletonIcon: {
    width: 25,
    height: 25,
    borderRadius: 25,
    backgroundColor: "#A0A0A0",
    marginRight: 10,
    marginBottom: 10,
  },
  skeletonCountry: {
    width: 45,
    height: 25,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginRight: 10,
    marginBottom: 10,
  },
  skeletonInput: {
    flex: 1,
    height: 35,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginBottom: 10,
  },
  skeletonPhoneCode: {
    width: 20,
    height: 20,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginRight: 10,
  },
  skeletonInputPhone: {
    flex: 1,
    height: 25,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginBottom: 10,
  },
  skeletonCheckIcon: {
    width: 20,
    height: 20,
    borderRadius: 10,
    backgroundColor: "#A0A0A0",
    marginLeft: 10,
  },
  skeletonButton: {
    width: "100%",
    height: 44,
    borderRadius: 14,
    backgroundColor: "#A0A0A0",
    marginTop: 50,
    marginBottom: 10,
  },
  skeletonLoginButton: {
    width: "100%",
    height: 44,
    borderRadius: 14,
    backgroundColor: "#A0A0A0",
    marginBottom: 20,
  },
});

export default SkeletonInfoConfirm;

src\Components\Skeleton\Home\SkeletonListHotelByLocation.js
import React from "react";
import { View, StyleSheet } from "react-native";
import { MotiView } from "moti";

const SkeletonListHotelByLocation = () => {
  const skeletonItems = [1, 2, 3]; // Giả sử hiển thị 3 skeleton items cho danh sách khách sạn

  return (
    <View style={styles.container}>
      {/* Skeleton cho Header */}
      <View style={styles.header}>
        <View style={styles.headerNavi}>
          <MotiView
            style={styles.skeletonBackButton}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <MotiView
            style={styles.skeletonTitle}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
        </View>
        <MotiView
          style={styles.skeletonSubtitle}
          from={{ opacity: 0.3 }}
          animate={{ opacity: 1 }}
          transition={{ type: "timing", duration: 1000, loop: true }}
        />
      </View>

      {/* Skeleton cho Thanh tìm kiếm và Bộ lọc */}
      <View style={styles.filterContainer}>
        {/* Thanh tìm kiếm */}
        <View style={styles.searchBar}>
          <MotiView
            style={styles.skeletonSearchIcon}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <MotiView
            style={styles.skeletonSearchInput}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <MotiView
            style={styles.skeletonSearchIcon}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
        </View>

        {/* Bộ lọc */}
        <View style={styles.filterButtons}>
          {[...Array(3)].map((_, index) => (
            <View key={index} style={styles.filterButton}>
              <MotiView
                style={styles.skeletonFilterText}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
              <MotiView
                style={styles.skeletonFilterIcon}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
            </View>
          ))}
        </View>
      </View>

      {/* Skeleton cho Danh sách khách sạn */}
      <View style={styles.scrollView}>
        {skeletonItems.map((_, index) => (
          <View key={index} style={styles.hotelItem}>
            {/* Hình ảnh */}
            <MotiView
              style={styles.skeletonImage}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />

            {/* Thông tin khách sạn */}
            <View style={styles.hotelDetails}>
              {/* Tên khách sạn */}
              <MotiView
                style={styles.skeletonHotelName}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />

              {/* Đánh giá */}
              <View style={styles.ratingContainer}>
                <MotiView
                  style={styles.skeletonStar}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
                <MotiView
                  style={styles.skeletonRatingText}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
                <MotiView
                  style={styles.skeletonReviewText}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
              </View>

              {/* Mô tả */}
              <MotiView
                style={styles.skeletonDescription}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />

              {/* Khuyến mãi */}
              <MotiView
                style={styles.skeletonPromotion}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />

              {/* Giá và nút "Đặt ngay" */}
              <View style={styles.footer}>
                <MotiView
                  style={styles.skeletonPrice}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
                <MotiView
                  style={styles.skeletonBookButton}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
              </View>
            </View>
          </View>
        ))}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#FFFFFF",
  },
  header: {
    marginTop: 30,
    paddingHorizontal: 15,
    paddingVertical: 10,
  },
  headerNavi: {
    flexDirection: "row",
    alignItems: "center",
  },
  skeletonBackButton: {
    width: 20,
    height: 20,
    borderRadius: 10,
    backgroundColor: "#A0A0A0",
    marginRight: 10,
  },
  skeletonTitle: {
    width: 100,
    height: 24,
    borderRadius: 4,
    backgroundColor: "#A0A0A0",
  },
  skeletonSubtitle: {
    width: 80,
    height: 16,
    borderRadius: 4,
    backgroundColor: "#A0A0A0",
    marginTop: 5,
  },
  filterContainer: {
    paddingHorizontal: 15,
    marginBottom: 10,
  },
  searchBar: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#F5F5F5",
    borderRadius: 10,
    paddingLeft: 10,
    marginBottom: 10,
  },
  skeletonSearchIcon: {
    width: 20,
    height: 20,
    borderRadius: 30,
    backgroundColor: "#A0A0A0",
    marginRight: 10,
  },
  skeletonSearchInput: {
    flex: 1,
    height: 30,
    marginRight: 10,
    borderRadius: 10,
    backgroundColor: "#A0A0A0",
  },
  filterButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  filterButton: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 10,
    paddingVertical: 8,
    paddingHorizontal: 12,
    flex: 1,
    marginHorizontal: 5,
    justifyContent: "space-between",
  },
  skeletonFilterText: {
    width: 50,
    height: 20,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginRight: 10,
  },
  skeletonFilterIcon: {
    width: 20,
    height: 20,
    borderRadius: 30,
    backgroundColor: "#A0A0A0",
  },
  scrollView: {
    flex: 1,
  },
  hotelItem: {
    backgroundColor: "#FFFFFF",
    borderRadius: 15,
    marginHorizontal: 15,
    marginVertical: 10,
    elevation: 3,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
  },
  skeletonImage: {
    width: "95%",
    height: 180,
    borderRadius: 10,
    backgroundColor: "#A0A0A0",
    alignSelf: "center",
    marginTop: 10,
  },
  hotelDetails: {
    padding: 10,
  },
  skeletonHotelName: {
    width: 150,
    height: 20,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginBottom: 10,
  },
  ratingContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 10,
  },
  skeletonStar: {
    width: 16,
    height: 16,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginRight: 5,
  },
  skeletonRatingText: {
    width: 30,
    height: 16,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginRight: 5,
  },
  skeletonReviewText: {
    width: 80,
    height: 16,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginLeft: 40,
  },
  skeletonDescription: {
    width: "90%",
    height: 14,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginBottom: 10,
  },
  skeletonPromotion: {
    width: 100,
    height: 20,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginBottom: 10,
    alignSelf: "flex-start",
  },
  footer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
  },
  skeletonPrice: {
    width: 60,
    height: 20,
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginLeft: 20,
  },
  skeletonBookButton: {
    width: 100,
    height: 30,
    borderRadius: 10,
    backgroundColor: "#A0A0A0",
  },
});

export default SkeletonListHotelByLocation;


src\Components\Skeleton\Hotels\SkeletonHotelDetails.js
import React from "react";
import { View, StyleSheet, ImageBackground } from "react-native";
import { MotiView } from "moti";
import SkeletonPriceScreen from "./SkeletonPriceScreen";

const SkeletonHotelDetails = () => {
  return (
    <View style={styles.container}>
      {/* Skeleton cho phần Header */}
      <View style={styles.header}>
        <ImageBackground
          source={{ uri: "https://dummyimage.com/500x250/CCCED3/CCCED3.png" }} // Placeholder màu trắng nhẹ
          style={styles.header__image}
        >
          {/* Overlay: Nút back, tên khách sạn, nút share */}
          <View style={styles.header__overlay}>
            <MotiView
              style={{
                width: 24,
                height: 24,
                borderRadius: 12,
                backgroundColor: "#A0A0A0",
                marginRight: 5,
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <MotiView
              style={{
                width: 80,
                height: 24,
                borderRadius: 4,
                backgroundColor: "#A0A0A0",
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <View style={styles.header__icon__start}>
              <MotiView
                style={{
                  width: 24,
                  height: 24,
                  borderRadius: 12,
                  backgroundColor: "#A0A0A0",
                }}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
            </View>
          </View>

          {/* Rating và Location */}
          <View style={styles.header__info}>
            <View style={styles.header__rating}>
              <View style={styles.header__rating__group}>
                <MotiView
                  style={{
                    width: 24,
                    height: 24,
                    borderRadius: 12,
                    backgroundColor: "#A0A0A0",
                  }}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
                <MotiView
                  style={{
                    width: 40,
                    height: 20,
                    borderRadius: 4,
                    marginLeft: 5,
                    backgroundColor: "#A0A0A0",
                  }}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
              </View>
              <MotiView
                style={{
                  width: 100,
                  height: 14,
                  borderRadius: 4,
                  backgroundColor: "#A0A0A0",
                }}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
            </View>
            <View style={styles.header__location}>
              <MotiView
                style={{
                  width: 24,
                  height: 24,
                  borderRadius: 30,
                  backgroundColor: "#A0A0A0",
                }}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
              <View style={styles.header__location__text}>
                <MotiView
                  style={{
                    width: 50,
                    height: 24,
                    borderRadius: 4,
                    backgroundColor: "#A0A0A0",
                  }}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
              </View>
            </View>
          </View>
        </ImageBackground>
      </View>

      {/* Skeleton cho phần Tabs */}
      <View style={styles.header__tabs}>
        <View style={{ flexDirection: "row", justifyContent: "center" }}>
          <View style={[styles.header__tab, styles.header__tab__1]}>
            <MotiView
              style={{
                width: 80,
                height: 14,
                borderRadius: 4,
                backgroundColor: "#A0A0A0",
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
          <View style={[styles.header__tab]}>
            <MotiView
              style={{
                width: 60,
                height: 14,
                borderRadius: 4,
                backgroundColor: "#A0A0A0",
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
          <View style={[styles.header__tab, styles.header__tab__3]}>
            <MotiView
              style={{
                width: 80,
                height: 14,
                borderRadius: 4,
                backgroundColor: "#A0A0A0",
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
        </View>
      </View>
      <SkeletonPriceScreen />
    </View>
  );
};

export default SkeletonHotelDetails;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },

  // Block: header
  header: {
    backgroundColor: "#fff",
  },
  header__image: {
    width: "100%",
    height: 250,
    justifyContent: "space-between",
  },
  header__overlay: {
    flexDirection: "row",
    alignItems: "center",
    padding: 15,
  },
  header__icon__start: {
    marginLeft: "auto",
  },
  header__title: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#fff",
    padding: 15,
    textShadowColor: "rgba(0, 0, 0, 0.75)",
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 5,
  },
  header__info: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 15,
    alignItems: "flex-end",
  },
  header__rating: {
    flexDirection: "column",
    alignItems: "flex-start",
  },
  header__rating__group: {
    flexDirection: "row",
    width: 200,
    alignItems: "center",
    marginBottom: 5,
  },
  header__rating__score: {
    fontSize: 16,
    fontWeight: "400",
    color: "white",
    paddingVertical: 2,
    paddingHorizontal: 6,
    borderRadius: 5,
    marginLeft: 5,
  },
  iconStart: {
    fontSize: 16,
  },
  header__rating__text: {
    fontSize: 14,
    color: "white",
  },
  header__location: {
    fontSize: 14,
    color: "white",
    width: 100,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
  },
  header__location__text: {
    marginLeft: 5,
  },
  // E4E6EB
  // CCCED3
  header__tabs: {
    flexDirection: "row",
    justifyContent: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
  },
  header__tab: {
    paddingVertical: 5,
    borderWidth: 1,
    borderColor: "#CCCED3",
    paddingHorizontal: 15,
  },
  header__tab__1: {
    borderTopLeftRadius: 15,
    borderBottomLeftRadius: 15,
  },
  header__tab__3: {
    borderTopRightRadius: 15,
    borderBottomRightRadius: 15,
  },
  header__tab__text: {
    fontSize: 14,
    color: "#007AFF",
  },
});


src\Components\Skeleton\Hotels\SkeletonHotelRoomList.js
import React from "react";
import { View, StyleSheet, ImageBackground, ScrollView } from "react-native";
import { MotiView } from "moti";

const SkeletonHotelRoomList = () => {
  const RoomItemSkeleton = () => (
    <View style={styles.card}>
      {/* Hình ảnh phòng */}
      <MotiView
        style={styles.roomImage}
        from={{ opacity: 0.3 }}
        animate={{ opacity: 1 }}
        transition={{ type: "timing", duration: 1000, loop: true }}
      />
      {/* Tiêu đề và số lượng phòng */}
      <View style={styles.header}>
        <MotiView
          style={{
            width: 150,
            height: 15,
            borderRadius: 8,
            backgroundColor: "#A0A0A0",
            marginBottom: 5,
          }}
          from={{ opacity: 0.3 }}
          animate={{ opacity: 1 }}
          transition={{ type: "timing", duration: 1000, loop: true }}
        />
        <MotiView
          style={{
            width: 80,
            height: 15,
            borderRadius: 8,
            backgroundColor: "#A0A0A0",
            marginBottom: 5,
          }}
          from={{ opacity: 0.3 }}
          animate={{ opacity: 1 }}
          transition={{ type: "timing", duration: 1000, loop: true }}
        />
      </View>
      {/* Thông tin cơ bản */}
      <View style={styles.info}>
        {[...Array(3)].map((_, index) => (
          <View key={index} style={styles.infoItem}>
            <MotiView
              style={{
                width: 15,
                height: 15,
                borderRadius: 8,
                backgroundColor: "#A0A0A0",
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <MotiView
              style={{
                width: 100,
                height: 15,
                borderRadius: 8,
                backgroundColor: "#A0A0A0",
                marginLeft: 5,
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
        ))}
      </View>
      {/* Dịch vụ */}
      <View style={styles.services}>
        {[...Array(4)].map((_, index) => (
          <View key={index} style={styles.serviceItem}>
            <MotiView
              style={{
                width: 15,
                height: 15,
                borderRadius: 8,
                backgroundColor: "#A0A0A0",
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <MotiView
              style={{
                width: 80,
                height: 15,
                borderRadius: 8,
                backgroundColor: "#A0A0A0",
                marginLeft: 4,
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
        ))}
      </View>
      {/* Chính sách */}
      <View style={styles.policies}>
        {[...Array(2)].map((_, index) => (
          <View key={index} style={styles.policyItem}>
            <MotiView
              style={{
                width: 15,
                height: 15,
                borderRadius: 8,
                backgroundColor: "#A0A0A0",
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <MotiView
              style={{
                width: 200,
                height: 15,
                borderRadius: 8,
                backgroundColor: "#A0A0A0",
                marginLeft: 5,
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
        ))}
      </View>
      {/* Khuyến mãi */}
      <View style={styles.promotion}>
        <View style={styles.promotionView}>
          <MotiView
            style={{
              width: 15,
              height: 15,
              borderRadius: 8,
              backgroundColor: "#A0A0A0",
            }}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <MotiView
            style={{
              width: 120,
              height: 15,
              borderRadius: 8,
              backgroundColor: "#A0A0A0",
              marginLeft: 5,
            }}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
        </View>
      </View>
      <View style={styles.br}></View>
      {/* Giá */}
      <View style={styles.priceContainer}>
        <View style={styles.priceWrapper}>
          <MotiView
            style={styles.discountBadge}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <View style={styles.discountedPriceView}>
            <MotiView
              style={{
                width: 100,
                height: 20,
                borderRadius: 8,
                backgroundColor: "#A0A0A0",
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <MotiView
              style={{
                width: 80,
                height: 20,
                borderRadius: 8,
                backgroundColor: "#A0A0A0",
                marginLeft: 8,
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
        </View>
      </View>
      {/* Nút Chọn */}
      <MotiView
        style={styles.selectButton}
        from={{ opacity: 0.3 }}
        animate={{ opacity: 1 }}
        transition={{ type: "timing", duration: 1000, loop: true }}
      />
    </View>
  );

  return (
    <ScrollView contentContainerStyle={styles.listContainer}>
      {/* Skeleton cho phần Header */}
      <View style={styles.header}>
        <ImageBackground
          source={{ uri: "https://dummyimage.com/500x250/CCCED3/CCCED3.png" }}
          style={styles.header__image}
        >
          <View style={styles.header__overlay}>
            <MotiView
              style={{
                width: 20,
                height: 20,
                borderRadius: 12,
                backgroundColor: "#A0A0A0",
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <MotiView
              style={{
                width: 100,
                height: 20,
                borderRadius: 8,
                backgroundColor: "#A0A0A0",
                marginLeft: 10,
              }}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <View style={styles.header__icon__start}>
              <MotiView
                style={{
                  width: 20,
                  height: 20,
                  borderRadius: 12,
                  backgroundColor: "#A0A0A0",
                  marginRight: 10,
                }}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
            </View>
          </View>
          <View style={styles.header__info}>
            <View style={styles.header__rating}>
              <View style={styles.header__rating__group}>
                <MotiView
                  style={{
                    width: 20,
                    height: 20,
                    borderRadius: 12,
                    backgroundColor: "#A0A0A0",
                  }}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
                <MotiView
                  style={{
                    width: 40,
                    height: 20,
                    borderRadius: 8,
                    backgroundColor: "#A0A0A0",
                    marginLeft: 5,
                  }}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
              </View>
              <MotiView
                style={{
                  width: 150,
                  height: 20,
                  borderRadius: 8,
                  backgroundColor: "#A0A0A0",
                  marginTop: 5,
                }}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
            </View>
            <View style={styles.header__location}>
              <MotiView
                style={{
                  width: 20,
                  height: 20,
                  borderRadius: 12,
                  backgroundColor: "#A0A0A0",
                }}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
              <View style={styles.header__location__text}>
                <MotiView
                  style={{
                    width: 40,
                    height: 20,
                    borderRadius: 8,
                    backgroundColor: "#A0A0A0",
                  }}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
              </View>
            </View>
          </View>
        </ImageBackground>
      </View>
      {/* Skeleton cho danh sách phòng */}
      {[...Array(1)].map((_, index) => (
        <RoomItemSkeleton key={index} />
      ))}
    </ScrollView>
  );
};

export default SkeletonHotelRoomList;

const styles = StyleSheet.create({
  listContainer: {
    padding: 0,
    backgroundColor: "#E0E0E0",
  },
  card: {
    backgroundColor: "#FFFFFF",
    borderRadius: 12,
    padding: 8,
    marginBottom: 8,
    margin: 8,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  roomImage: {
    width: "100%",
    height: 180,
    borderRadius: 12,
    marginBottom: 8,
    backgroundColor: "#A0A0A0",
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 8,
  },
  info: {
    marginBottom: 8,
  },
  infoItem: {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    marginBottom: 2,
  },
  services: {
    flexDirection: "row",
    flexWrap: "wrap",
    marginBottom: 8,
  },
  serviceItem: {
    flexDirection: "row",
    alignItems: "center",
    marginRight: 12,
    marginBottom: 4,
  },
  policies: {
    marginBottom: 8,
  },
  policyItem: {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    marginBottom: 2,
  },
  promotion: {
    marginBottom: 8,
    backgroundColor: "#E0E0E0",
    alignSelf: "flex-start",
    padding: 5,
    paddingHorizontal: 10,
    borderRadius: 5,
  },
  promotionView: {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
  },
  br: {
    marginTop: 5,
    borderBottomColor: "#E0E0E0",
    borderBottomWidth: 1,
    marginBottom: 5,
  },
  priceContainer: {
    marginBottom: 8,
  },
  priceWrapper: {},
  discountedPriceView: {
    alignItems: "center",
    justifyContent: "flex-end",
    flexDirection: "row",
    marginBottom: 5,
  },
  discountBadge: {
    backgroundColor: "#A0A0A0",
    borderRadius: 5,
    paddingVertical: 5,
    paddingHorizontal: 8,
    alignSelf: "flex-end",
    marginBottom: 5,
  },
  selectButton: {
    backgroundColor: "#A0A0A0",
    borderRadius: 12,
    paddingVertical: 12,
    alignItems: "center",
    width: "80%",
    alignSelf: "center",
  },
  header: {
    backgroundColor: "#fff",
  },
  header__image: {
    width: "100%",
    height: 250,
    justifyContent: "space-between",
  },
  header__overlay: {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    paddingHorizontal: 5,
    paddingVertical: 30,
  },
  header__icon__start: {
    marginLeft: "auto",
  },
  header__info: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 15,
    alignItems: "flex-end",
  },
  header__rating: {
    flexDirection: "column",
    alignItems: "flex-start",
  },
  header__rating__group: {
    flexDirection: "row",
    width: 200,
    alignItems: "center",
  },
  header__location: {
    fontSize: 14,
    color: "white",
    width: 100,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
  },
  header__location__text: {
    marginLeft: 5,
  },
});


src\Components\Skeleton\Hotels\SkeletonOrderConfirm.js
import React from "react";
import { View, StyleSheet, SafeAreaView, ScrollView } from "react-native";
import { MotiView } from "moti";

const SkeletonOrderConfirmScreen = () => {
  const skeletonRooms = [1, 2]; // Giả sử hiển thị 2 phòng skeleton

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.mainContainer}>
        {/* Phần đầu: Thông tin khách hàng */}
        <View style={styles.headerSection}>
          <MotiView
            style={styles.skeletonTitle}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <View style={styles.infoSection}>
            {/* Tên */}
            <View style={styles.infoItem}>
              <MotiView
                style={styles.skeletonInfoLabel}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
              <MotiView
                style={styles.skeletonInfoValueShort}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
            </View>
            {/* Email */}
            <View style={styles.infoItem}>
              <MotiView
                style={styles.skeletonInfoLabel}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
              <MotiView
                style={styles.skeletonInfoValueLong}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
            </View>
            {/* Số điện thoại */}
            <View style={styles.infoItem}>
              <MotiView
                style={styles.skeletonInfoLabel}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
              <MotiView
                style={styles.skeletonInfoValueMedium}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
            </View>
          </View>
          <View style={styles.br} />
        </View>

        {/* Phần giữa: Danh sách phòng */}
        <View style={styles.roomsSection}>
          <MotiView
            style={styles.skeletonSubTitle}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <ScrollView showsVerticalScrollIndicator={false}>
            {skeletonRooms.map((_, index) => (
              <View key={index} style={styles.roomWrapper}>
                {/* Tên phòng */}
                <View style={styles.roomInfo}>
                  <MotiView
                    style={styles.skeletonRoomLabel}
                    from={{ opacity: 0.3 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: "timing", duration: 1000, loop: true }}
                  />
                  <MotiView
                    style={styles.skeletonRoomValueLong}
                    from={{ opacity: 0.3 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: "timing", duration: 1000, loop: true }}
                  />
                </View>
                {/* Loại phòng */}
                <View style={styles.roomInfo}>
                  <MotiView
                    style={styles.skeletonRoomLabel}
                    from={{ opacity: 0.3 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: "timing", duration: 1000, loop: true }}
                  />
                  <MotiView
                    style={styles.skeletonRoomValueShort}
                    from={{ opacity: 0.3 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: "timing", duration: 1000, loop: true }}
                  />
                </View>
                {/* Số khách */}
                <View style={styles.roomInfo}>
                  <MotiView
                    style={styles.skeletonRoomLabel}
                    from={{ opacity: 0.3 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: "timing", duration: 1000, loop: true }}
                  />
                  <MotiView
                    style={styles.skeletonRoomValueShort}
                    from={{ opacity: 0.3 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: "timing", duration: 1000, loop: true }}
                  />
                </View>
                {/* Giá */}
                <View style={styles.roomInfo}>
                  <MotiView
                    style={styles.skeletonRoomLabel}
                    from={{ opacity: 0.3 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: "timing", duration: 1000, loop: true }}
                  />
                  <MotiView
                    style={styles.skeletonRoomValueMedium}
                    from={{ opacity: 0.3 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: "timing", duration: 1000, loop: true }}
                  />
                </View>
                {/* Dịch vụ */}
                <View style={styles.roomInfo}>
                  <MotiView
                    style={styles.skeletonRoomLabel}
                    from={{ opacity: 0.3 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: "timing", duration: 1000, loop: true }}
                  />
                  <View style={styles.serviceIcons}>
                    <MotiView
                      style={styles.skeletonIcon}
                      from={{ opacity: 0.3 }}
                      animate={{ opacity: 1 }}
                      transition={{
                        type: "timing",
                        duration: 1000,
                        loop: true,
                      }}
                    />
                  </View>
                </View>
                {/* Điều kiện */}
                <View style={styles.roomInfo}>
                  <MotiView
                    style={styles.skeletonRoomLabel}
                    from={{ opacity: 0.3 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: "timing", duration: 1000, loop: true }}
                  />
                  <MotiView
                    style={styles.skeletonRoomValueShort}
                    from={{ opacity: 0.3 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: "timing", duration: 1000, loop: true }}
                  />
                </View>
              </View>
            ))}
          </ScrollView>
          <View style={styles.br} />
        </View>

        {/* Phần cuối: Mã giảm giá, Phương thức thanh toán, Nút xác nhận */}
        <View style={styles.footerSection}>
          <View style={styles.infoSection}>
            <MotiView
              style={styles.skeletonSubTitle}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <MotiView
              style={styles.skeletonCoupon}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
          <View style={styles.br} />

          <MotiView
            style={styles.skeletonSubTitle}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <View style={styles.infoSectionLast}>
            {[...Array(2)].map((_, index) => (
              <View key={index} style={styles.paymentOption}>
                <MotiView
                  style={styles.skeletonRadioCircle}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
                <MotiView
                  style={styles.skeletonPaymentText}
                  from={{ opacity: 0.3 }}
                  animate={{ opacity: 1 }}
                  transition={{ type: "timing", duration: 1000, loop: true }}
                />
              </View>
            ))}
          </View>

          <MotiView
            style={styles.skeletonButton}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  mainContainer: {
    flex: 1,
    paddingHorizontal: 20,
    paddingVertical: 20,
  },
  headerSection: {
    // Phần đầu cố định
  },
  roomsSection: {
    flex: 1, // Chiếm không gian để ScrollView có thể cuộn
  },
  footerSection: {
    // Phần cuối cố định
  },
  infoSection: {
    marginBottom: 15, // Tăng khoảng cách giữa các mục thông tin
  },
  infoSectionLast: {
    flexDirection: "row",
    justifyContent: "space-evenly",
    alignItems: "center",
    marginVertical: 15, // Tăng khoảng cách trên dưới
  },
  infoItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 10, // Tăng khoảng cách giữa các hàng
  },
  roomWrapper: {
    borderBottomColor: "#E5E5E5",
    borderBottomWidth: 1,
    paddingVertical: 25, // Tăng padding trên dưới
  },
  roomInfo: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 10, // Tăng khoảng cách giữa các hàng trong phòng
  },
  paymentOption: {
    flexDirection: "row",
    alignItems: "center",
  },
  serviceIcons: {
    flexDirection: "row",
    alignItems: "center",
    flex: 1,
    justifyContent: "flex-end",
  },
  br: {
    borderBottomColor: "#E5E5E5",
    borderBottomWidth: 1,
    marginVertical: 10, // Tăng khoảng cách trên dưới của đường phân cách
  },
  // Skeleton styles
  skeletonTitle: {
    width: 180,
    height: 18, // Giảm 2px từ 20
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginBottom: 15,
  },
  skeletonSubTitle: {
    width: 120,
    height: 18, // Giảm 2px từ 20
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
    marginBottom: 10,
    alignSelf: "center",
  },
  skeletonInfoLabel: {
    width: 60,
    height: 18, // Giảm 2px từ 20
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
  },
  skeletonInfoValueShort: {
    width: 80, // Ngắn hơn (Tên: "Tiến Dưỡng")
    height: 18, // Giảm 2px từ 20
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
  },
  skeletonInfoValueMedium: {
    width: 120, // Trung bình (Số điện thoại: "+84 0982474802")
    height: 18, // Giảm 2px từ 20
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
  },
  skeletonInfoValueLong: {
    width: 200, // Dài hơn (Email: "lamtiendung11082002@gmail.com")
    height: 18, // Giảm 2px từ 20
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
  },
  skeletonRoomLabel: {
    width: 70,
    height: 14, // Giảm 2px từ 16
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
  },
  skeletonRoomValueShort: {
    width: 50, // Ngắn (Số khách: "0 người", Điều kiện: trống)
    height: 14, // Giảm 2px từ 16
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
  },
  skeletonRoomValueMedium: {
    width: 90, // Trung bình (Giá: "1080000")
    height: 14, // Giảm 2px từ 16
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
  },
  skeletonRoomValueLong: {
    width: 150, // Dài (Tên phòng: "Phòng Deluxe Gia đình VIP")
    height: 14, // Giảm 2px từ 16
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
  },
  skeletonIcon: {
    width: 20,
    height: 20,
    borderRadius: 10,
    backgroundColor: "#A0A0A0",
    marginLeft: 8,
  },
  skeletonCoupon: {
    width: 60,
    height: 18, // Giảm 2px từ 20
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
  },
  skeletonRadioCircle: {
    width: 20,
    height: 20, // Không thay đổi vì là hình tròn
    borderRadius: 10,
    backgroundColor: "#A0A0A0",
    marginRight: 10,
  },
  skeletonPaymentText: {
    width: 70,
    height: 18, // Giảm 2px từ 20
    borderRadius: 8,
    backgroundColor: "#A0A0A0",
  },
  skeletonButton: {
    width: "100%",
    height: 42, // Giảm 2px từ 44
    borderRadius: 14,
    backgroundColor: "#A0A0A0",
    marginTop: 15,
  },
});

export default SkeletonOrderConfirmScreen;


src\Components\Skeleton\Hotels\SkeletonPriceScreen.js
import React from "react";
import { View, StyleSheet, ScrollView } from "react-native";
import { MotiView } from "moti";

const SkeletonPriceScreen = () => {
  return (
    <ScrollView style={styles.body}>
      {/* Skeleton cho phần mô tả khách sạn */}
      <View style={styles.body__section}>
        <MotiView
          style={styles.skeletonTitle}
          from={{ opacity: 0.3 }}
          animate={{ opacity: 1 }}
          transition={{ type: "timing", duration: 1000, loop: true }}
        />
        <MotiView
          style={styles.skeletonDescription}
          from={{ opacity: 0.3 }}
          animate={{ opacity: 1 }}
          transition={{ type: "timing", duration: 1000, loop: true }}
        />
      </View>

      {/* Skeleton cho phần tiện ích */}
      <View style={styles.body__section1}>
        <MotiView
          style={styles.skeletonSubtitle}
          from={{ opacity: 0.3 }}
          animate={{ opacity: 1 }}
          transition={{ type: "timing", duration: 1000, loop: true }}
        />
        <View style={styles.body__facilities}>
          {[...Array(4)].map((_, index) => (
            <View key={index} style={styles.body__facility}>
              <MotiView
                style={styles.skeletonIcon}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
              <MotiView
                style={styles.skeletonFacilityText}
                from={{ opacity: 0.3 }}
                animate={{ opacity: 1 }}
                transition={{ type: "timing", duration: 1000, loop: true }}
              />
            </View>
          ))}
        </View>
      </View>

      {/* Skeleton cho phần thông tin nhận/trả phòng */}
      <View style={styles.body__section}>
        <View style={styles.body__info}>
          <MotiView
            style={styles.skeletonSmallIcon}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <MotiView
            style={styles.skeletonInfoText}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
        </View>
        <View style={styles.body__info}>
          <MotiView
            style={styles.skeletonSmallIcon}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
          <MotiView
            style={styles.skeletonInfoText}
            from={{ opacity: 0.3 }}
            animate={{ opacity: 1 }}
            transition={{ type: "timing", duration: 1000, loop: true }}
          />
        </View>
        <View style={styles.body__info__view}>
          <View style={styles.body__info}>
            <MotiView
              style={styles.skeletonSmallIcon}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <MotiView
              style={styles.skeletonInfoText}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
          <View style={styles.body__info}>
            <MotiView
              style={styles.skeletonSmallIcon}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <MotiView
              style={styles.skeletonInfoText}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
        </View>
      </View>

      {/* Skeleton cho phần dịch vụ */}
      <View style={styles.body__section2}>
        {[...Array(6)].map((_, index) => (
          <View key={index} style={styles.body__service}>
            <MotiView
              style={styles.skeletonSmallIcon}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <MotiView
              style={styles.skeletonServiceText}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
        ))}
      </View>

      {/* Skeleton cho phần phòng còn trống */}
      <View style={styles.body__section3}>
        <MotiView
          style={styles.skeletonSubtitle}
          from={{ opacity: 0.3 }}
          animate={{ opacity: 1 }}
          transition={{ type: "timing", duration: 1000, loop: true }}
        />
        {[...Array(3)].map((_, index) => (
          <View key={index} style={styles.body__dropdown}>
            <MotiView
              style={styles.skeletonSmallIcon}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
            <MotiView
              style={styles.skeletonDropdownText}
              from={{ opacity: 0.3 }}
              animate={{ opacity: 1 }}
              transition={{ type: "timing", duration: 1000, loop: true }}
            />
          </View>
        ))}
      </View>
    </ScrollView>
  );
};

// Sử dụng styles từ code gốc của bạn và thêm styles cho skeleton
const styles = StyleSheet.create({
  body: {
    flex: 1,
    backgroundColor: "#fff",
  },
  body__section: {
    paddingHorizontal: 20,
    paddingVertical: 10,
  },
  body__section1: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: "#ccc",
  },
  body__section2: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    flexDirection: "row",
    flexWrap: "wrap",
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: "#ccc",
  },
  body__section3: {
    paddingHorizontal: 20,
    paddingVertical: 10,
  },
  body__title: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 5,
  },
  body__description: {
    fontSize: 14,
    color: "#666",
    lineHeight: 20,
  },
  body__subtitle: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 10,
  },
  body__subtitle3: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 10,
  },
  body__facilities: {
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "space-between",
  },
  body__facility: {
    width: "24%",
    flexDirection: "column",
    alignItems: "center",
    marginBottom: 10,
    justifyContent: "center",
    alignItems: "center",
  },
  body__facility__text: {
    marginLeft: 10,
    fontSize: 14,
  },
  body__info: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 10,
  },
  body__info__view: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  body__info__text: {
    marginLeft: 10,
    fontSize: 14,
  },
  body__service: {
    width: "33%",
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 10,
  },
  body__service__text: {
    marginLeft: 10,
    fontSize: 14,
  },
  body__dropdown: {
    flexDirection: "row",
    alignItems: "center",
    padding: 10,
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 5,
    marginBottom: 10,
  },
  body__dropdown__text: {
    marginLeft: 10,
    fontSize: 14,
    flex: 1,
  },
  icon__chevron_down: {
    marginLeft: 10,
  },
  footer: {
    padding: 20,
  },
  footer__food: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  // Styles cho skeleton
  skeletonTitle: {
    width: 150,
    height: 20,
    backgroundColor: "#E0E0E0",
    borderRadius: 4,
    marginBottom: 5,
    marginHorizontal: "auto",
  },
  skeletonDescription: {
    width: "100%",
    height: 80,
    backgroundColor: "#E0E0E0",
    borderRadius: 4,
  },
  skeletonSubtitle: {
    width: 120,
    height: 16,
    backgroundColor: "#E0E0E0",
    borderRadius: 4,
    marginBottom: 10,
    marginHorizontal: "auto",
  },
  skeletonIcon: {
    width: 44,
    height: 44,
    backgroundColor: "#E0E0E0",
    borderRadius: 4,
    marginBottom: 10,
  },
  skeletonFacilityText: {
    width: 80,
    height: 14,
    backgroundColor: "#E0E0E0",
    borderRadius: 4,
    marginLeft: 10,
  },
  skeletonSmallIcon: {
    width: 25,
    height: 25,
    backgroundColor: "#E0E0E0",
    borderRadius: 4,
  },
  skeletonInfoText: {
    width: 120,
    height: 14,
    backgroundColor: "#E0E0E0",
    borderRadius: 4,
    marginLeft: 10,
  },
  skeletonServiceText: {
    width: 60,
    height: 14,
    backgroundColor: "#E0E0E0",
    borderRadius: 4,
    marginLeft: 10,
  },
  skeletonDropdownText: {
    width: 150,
    height: 14,
    backgroundColor: "#E0E0E0",
    borderRadius: 4,
    marginLeft: 10,
  },
});

export default SkeletonPriceScreen;


src\Constant\Constant.js
export const API_BASE_URL = "http://192.168.88.142:9090"; // P302
// export const API_BASE_URL = "http://192.168.50.121:9090"; // Ket cafe
// export const API_BASE_URL = "http://172.11.176.32:9090"; // PTIT_WIFI
export const API_BASE_URL1 = "https://65c5-14-0-22-145.ngrok-free.app";
// 172.11.156.245

// mở windowPowerShell , chạy ngrok http 9090 lấy link forwarding cho vào



src\hooks\useWebSocket.js

import { useEffect } from "react";
import { Client } from "@stomp/stompjs";
import SockJS from "sockjs-client";
import { API_BASE_URL1 } from "../Constant/Constant";
export const useWebSocket = (userId, onMessageReceived) => {
  useEffect(() => {
    // Tạo SockJS client
    const socket = new SockJS(`${API_BASE_URL1}/ws`); // dùng IP thật thay cho localhost
    const client = new Client({
      webSocketFactory: () => socket,
      debug: (str) => console.log("STOMP DEBUG", str),
      reconnectDelay: 5000,
      heartbeatIncoming: 4000,
      heartbeatOutgoing: 4000,
    });

    console.log("WebSocket client created:", userId);

    client.onConnect = () => {
      console.log("✅ STOMP connected");
      client.subscribe(`/topic/notifications/${userId}`, (message) => {
        const notification = JSON.parse(message.body);
        console.log("📩 Received message:", notification);
        onMessageReceived(notification);
      });
    };

    client.onStompError = (frame) => {
      console.error("❌ STOMP error:", frame);
    };

    client.activate();

    return () => {
      client.deactivate();
    };
  }, [userId, onMessageReceived]);
};


src\Pages\Auth\GoogleLogin.js

import { useEffect, useLayoutEffect } from "react";
import { View, Text, TouchableOpacity, Alert, StyleSheet } from "react-native";
import {
  getAuth,
  GoogleAuthProvider,
  signInWithCredential,
} from "firebase/auth";
import * as WebBrowser from "expo-web-browser";
import * as Google from "expo-auth-session/providers/google";
import { app } from "../../../config/firebaseConfig";
import { API_BASE_URL } from "../../Constant/Constant";
WebBrowser.maybeCompleteAuthSession();

const GoogleLogin = () => {
  useLayoutEffect(() => {
    navigation.getParent().setOptions({ tabBarStyle: { display: "none" } });
    return () => {
      navigation.getParent().setOptions({ tabBarStyle: { display: "flex" } });
    };
  }, [navigation]);
  const auth = getAuth(app);

  const [request, response, promptAsync] = Google.useAuthRequest({
    clientId:
      "481411658885-nrvi6ms35aefa7pt9pg80hd1f2b3dsjc.apps.googleusercontent.com",
    redirectUri: `${API_BASE_URL}/api/auth/firebase`,
    scopes: ["profile", "email"],
  });

  useEffect(() => {
    console.log("Google Auth Response:", response);
    if (response?.type === "success") {
      console.log("ID Token:", response.params.id_token);
      const { id_token } = response.params;
      if (id_token) {
        const credential = GoogleAuthProvider.credential(id_token);
        signInWithCredential(auth, credential)
          .then((userCredential) => {
            Alert.alert(
              "Đăng nhập thành công!",
              `Xin chào ${userCredential.user.displayName}`
            );
          })
          .catch((error) => {
            console.error("Lỗi đăng nhập Google:", error);
            Alert.alert("Đăng nhập thất bại", error.message);
          });
      } else {
        console.error("Lỗi: Không nhận được ID Token!");
      }
    }
  }, [response]);

  return (
    <View style={styles.container}>
      <View style={styles.wrapTitle}>
        <Text style={styles.title}>Đăng nhập với Google</Text>
      </View>
      <View style={styles.whiteFrame}>
        <TouchableOpacity
          style={[styles.socialButton, { backgroundColor: "#db4437" }]}
          disabled={!request}
          onPress={() => promptAsync()}
        >
          <Text style={styles.socialButtonText}>ĐĂNG NHẬP VỚI GOOGLE</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default GoogleLogin;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "flex-end",
    alignItems: "center",
    backgroundColor: "#00F598", // Màu nền xanh lá cây giống PhoneLogin
  },
  whiteFrame: {
    backgroundColor: "#fff",
    borderRadius: 30,
    padding: 20,
    width: 340,
    height: 646,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    marginBottom: 20,
    justifyContent: "center", // Canh giữa nút trong khung trắng
  },
  wrapTitle: {
    width: "80%",
    textAlign: "left",
    display: "flex",
    alignItems: "flex-start",
  },
  title: {
    fontSize: 24,
    fontWeight: "500",
    color: "white",
    marginBottom: 10,
  },
  socialButton: {
    width: "100%", // Nút chiếm toàn bộ chiều rộng
    padding: 15,
    borderRadius: 15,
    alignItems: "center",
  },
  socialButtonText: {
    color: "#fff",
    fontWeight: "400",
    fontSize: 18,
  },
});

src\Pages\Auth\LoginScreen.js

import React, { useLayoutEffect, useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  KeyboardAvoidingView,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { auth } from "../../../config/firebaseConfig";
import { getAuth, signInWithEmailAndPassword } from "firebase/auth";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import {
  loginSuccess,
  fetchUserInfo,
  setPrePage,
  clearPrePage,
} from "../../Redux/Slice/authSlice";
import { API_BASE_URL } from "../../Constant/Constant";
import {
  fetchBookingStatus,
  fetchHotelList,
} from "../../Redux/Slice/hotelSlice";
import { Platform } from "react-native";
import { CommonActions } from "@react-navigation/native";
import { fetchListNotification } from "../../Redux/Slice/notificationSlice";
import { registerForPushNotificationsAsync } from "../../Utils/notificationsQuan";
import { registerDevice } from "../../Redux/apiQuan";
const LoginScreen = ({ navigation, route }) => {
  useLayoutEffect(() => {
    navigation.getParent().setOptions({ tabBarStyle: { display: "none" } });
    return () => {
      navigation.getParent().setOptions({ tabBarStyle: { display: "flex" } });
    };
  }, [navigation]);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const dispatch = useAppDispatch();
  const { prePage } = useAppSelector((state) => state.auth);

  console.log(prePage);
  const sendTokenToBackend = async (idToken) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/firebase`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ tokenId: idToken }),
      });

      const data = await response.json();
      console.log(">>> data", data);
      if (data?.data?.accessToken) {
        const deviceToken = await registerForPushNotificationsAsync();
        console.log("Device os:", Platform.OS);
        if (deviceToken) {
          await registerDevice(
            deviceToken,
            Platform.OS === "ios" ? "IOS" : "ANDROID"
          );
        }
        dispatch(
          loginSuccess({
            accessToken: data?.data?.accessToken,
            userId: data?.data?.userId, // Giả sử API trả về userId
          })
        );
        // dispatch(fetchHotelList());
        dispatch(fetchBookingStatus());
        dispatch(fetchListNotification());
        dispatch(fetchUserInfo());

        // Xác định màn hình đích dựa trên prePage
        const targetScreen = prePage === "InfoConfirm" ? "InfoConfirm" : "Home";
        console.log("AAAAAAAAAAAAAAAAA", targetScreen);
        // Reset stack để xóa các màn hình đăng nhập
        navigation.dispatch(
          CommonActions.reset({
            index: 0,
            routes: [{ name: "Profile" }],
          })
        );

        console.log(targetScreen);

        navigation.navigate(`${targetScreen}`);
        // Xóa prePage sau khi điều hướng
        dispatch(clearPrePage());

        Alert.alert("Đăng nhập thành công!");
      } else {
        Alert.alert(
          "Lỗi xác thực với backend!",
          data.message || "Không nhận được token"
        );
      }
    } catch (error) {
      Alert.alert("Lỗi gửi token!", error.message);
      console.log(error);
    }
  };

  const handleEmailLogin = async () => {
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const idToken = await userCredential.user.getIdToken();
      console.log("idToken->", idToken);
      sendTokenToBackend(idToken);
    } catch (error) {
      Alert.alert("Lỗi đăng nhập", error.message);
    }
  };

  const handleToPhoneLogin = () => {
    navigation.navigate("PhoneLogin");
    setEmail("");
    setPassword("");
  };

  const handleToGoogleLogin = () => {
    navigation.navigate("GoogleLogin");
    setEmail("");
    setPassword("");
  };

  return (
    <KeyboardAvoidingView style={{ flex: 1 }} behavior={undefined}>
      <View style={styles.container}>
        <View style={styles.wrapTitle}>
          <Text style={styles.title}>Đăng nhập với Email</Text>
        </View>
        <View style={styles.whiteFrame}>
          <View style={[styles.inputContainer, styles.inputContainerFirst]}>
            <Ionicons name="mail-outline" size={20} color="#0090FF" />
            <TextInput
              placeholder="Email"
              style={styles.input}
              value={email}
              onChangeText={setEmail}
            />
          </View>
          <View style={styles.inputContainer}>
            <Ionicons name="lock-closed-outline" size={20} color="#0090FF" />
            <TextInput
              placeholder="Mật khẩu"
              secureTextEntry
              style={styles.input}
              value={password}
              onChangeText={setPassword}
            />
          </View>
          <Text
            style={styles.forgotPassword}
            onPress={() => navigation.navigate("ForgotPassword")}
          >
            Quên mật khẩu?
          </Text>
          <TouchableOpacity style={styles.button} onPress={handleEmailLogin}>
            <Text style={styles.buttonText}>Đăng nhập</Text>
          </TouchableOpacity>
          <View>
            <Text style={styles.textOr}>Hoặc đăng nhập bằng</Text>
          </View>
          <View style={styles.socialButtons}>
            <TouchableOpacity
              onPress={handleToPhoneLogin}
              style={[styles.socialButton, { backgroundColor: "#3b5998" }]}
            >
              <Text style={styles.socialButtonText}>Số Điện Thoại</Text>
            </TouchableOpacity>
            <TouchableOpacity
              onPress={handleToGoogleLogin}
              style={[styles.socialButton, { backgroundColor: "#db4437" }]}
            >
              <Text style={styles.socialButtonText}>GOOGLE</Text>
            </TouchableOpacity>
          </View>
          <View style={styles.footer}>
            <Text style={styles.footerText}>Chưa có tài khoản? </Text>
            <Text
              style={styles.footerLink}
              onPress={() => navigation.navigate("RegisterScreen")}
            >
              Đăng ký
            </Text>
          </View>
        </View>
      </View>
    </KeyboardAvoidingView>
  );
};
export default LoginScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "flex-end",
    alignItems: "center",
    backgroundColor: "#00F598", // Màu nền xanh lá cây
  },
  whiteFrame: {
    backgroundColor: "#fff",
    borderRadius: 30,
    padding: 20,
    width: 340,
    height: 646,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    marginBottom: 20,
  },
  wrapTitle: {
    width: "80%",
    textAlign: "left",
    display: "flex",
    alignItems: "flex-start",
  },
  title: {
    fontSize: 24,
    fontWeight: "500",
    color: "white",
    marginBottom: 10,
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 15,
    borderBottomColor: "gray",
    borderBottomWidth: 1,
  },
  inputContainerFirst: {
    marginTop: 60,
    marginBottom: 20,
  },
  input: {
    flex: 1,
    marginLeft: 10,
    padding: 10,
    backgroundColor: "white",
    borderRadius: 5,
  },
  forgotPassword: {
    color: "#FF8C00",
    textAlign: "center",
    marginBottom: 40,
    marginTop: 40,
    fontSize: 13,
  },
  button: {
    backgroundColor: "#00F598", // Màu nút giống màu nền
    borderRadius: 15,
    padding: 10,
    alignItems: "center",
  },
  buttonText: {
    color: "#fff",
    fontWeight: "400",
    fontSize: 18,
  },
  textOr: {
    textAlign: "center",
    color: "gray",
    fontSize: 14,
    marginTop: 90,
    marginBottom: 0,
    fontSize: 13,
  },
  socialButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 20,
  },
  socialButton: {
    width: "48%",
    //     flex: 1,
    padding: 10,
    borderRadius: 15,
    alignItems: "center",
  },
  socialButtonText: { color: "#fff" },
  footer: { flexDirection: "row", justifyContent: "center", marginTop: 80 },
  footerText: { color: "gray", fontSize: 13 },
  footerLink: { color: "#00FF94", textDecorationLine: "underline" },
});

// khi nhập input thì bị đẩy lênn , fix cứng
// Thêm import KeyboardAvoidingView từ react-native.

// Bao bọc toàn bộ giao diện trong <KeyboardAvoidingView> với behavior và keyboardVerticalOffset để điều chỉnh khi bàn phím xuất hiện.


src\Pages\Auth\PhoneLogin.js
import React, { useState, useRef, useLayoutEffect } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { auth, app } from "../../../config/firebaseConfig";
import { getAuth, signInWithPhoneNumber } from "firebase/auth";
import { FirebaseRecaptchaVerifierModal } from "expo-firebase-recaptcha";
import { API_BASE_URL } from "../../Constant/Constant";
import {
  loginSuccess,
  setPrePage,
  clearPrePage,
} from "../../Redux/Slice/authSlice";
import {
  fetchBookingStatus,
  fetchHotelList,
} from "../../Redux/Slice/hotelSlice";
import { fetchListNotification } from "../../Redux/Slice/notificationSlice";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import { CommonActions } from "@react-navigation/native";

const PhoneLogin = ({ navigation }) => {
  useLayoutEffect(() => {
    navigation.getParent().setOptions({ tabBarStyle: { display: "none" } });
    return () => {
      navigation.getParent().setOptions({ tabBarStyle: { display: "flex" } });
    };
  }, [navigation]);
  const [phoneNumber, setPhoneNumber] = useState("");
  const [confirm, setConfirm] = useState(null);
  const [code, setCode] = useState("");
  const recaptchaVerifier = useRef(null);
  const dispatch = useAppDispatch();
  const { prePage } = useAppSelector((state) => state.auth);

  // Gửi OTP
  const sendOTP = async () => {
    try {
      if (!phoneNumber.startsWith("+")) {
        Alert.alert(
          "Lỗi",
          "Số điện thoại phải bắt đầu bằng mã quốc gia (ví dụ: +84)"
        );
        return;
      }

      console.log(">>> check phone ", phoneNumber);
      const confirmation = await signInWithPhoneNumber(
        auth,
        phoneNumber,
        recaptchaVerifier.current
      );
      console.log(">>> confirmation", confirmation);
      setConfirm(confirmation);
      Alert.alert("OTP đã được gửi!");
    } catch (error) {
      Alert.alert("Lỗi gửi OTP: " + error.message);
    }
  };

  // Xác thực OTP và gửi ID Token đến backend
  const verifyOTP = async () => {
    try {
      if (!confirm) {
        Alert.alert("Lỗi", "Không có dữ liệu xác nhận OTP. Vui lòng thử lại!");
        return;
      }

      const userCredential = await confirm.confirm(code);
      const idToken = await userCredential.user.getIdToken();

      const response = await fetch(`${API_BASE_URL}/api/auth/firebase`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ tokenId: idToken }),
      });

      const data = await response.json();
      console.log(">>> data", data);
      if (data.data && data.data.accessToken) {
        dispatch(loginSuccess(data.data.accessToken));
        dispatch(fetchHotelList());
        dispatch(fetchBookingStatus());
        dispatch(fetchListNotification());

        // Xác định màn hình đích dựa trên prePage
        const targetScreen = prePage === "InfoConfirm" ? "InfoConfirm" : "Home";

        // Reset stack để xóa các màn hình đăng nhập
        navigation.dispatch(
          CommonActions.reset({
            index: 0,
            routes: [{ name: "Profile" }],
          })
        );
        navigation.navigate(`${targetScreen}`);
        // Xóa prePage sau khi điều hướng
        dispatch(clearPrePage());

        Alert.alert("Đăng nhập thành công!");
      } else {
        Alert.alert(
          "Lỗi xác thực với backend!",
          data.message || "Không nhận được token"
        );
      }
    } catch (error) {
      Alert.alert("OTP không đúng, thử lại!", error.message);
    }
  };

  const handleToLogin = () => {
    navigation.navigate("Login");
  };

  return (
    <View style={styles.container}>
      <FirebaseRecaptchaVerifierModal
        ref={recaptchaVerifier}
        firebaseConfig={app.options}
      />

      <View style={styles.wrapTitle}>
        <Text style={styles.title}>Đăng nhập với số điện thoại</Text>
      </View>
      <View style={styles.whiteFrame}>
        {!confirm ? (
          <>
            <View style={[styles.inputContainer, styles.inputContainerFirst]}>
              <Ionicons name="call-outline" size={20} color="#0090FF" />
              <TextInput
                placeholder="+84..."
                style={styles.input}
                value={phoneNumber}
                onChangeText={setPhoneNumber}
                keyboardType="phone-pad"
              />
            </View>

            <TouchableOpacity style={styles.button} onPress={sendOTP}>
              <Text style={styles.buttonText}>Gửi OTP</Text>
            </TouchableOpacity>
          </>
        ) : (
          <>
            <View style={[styles.inputContainer, styles.inputContainerFirst]}>
              <Ionicons name="call-outline" size={20} color="#0090FF" />
              <TextInput
                placeholder="OTP"
                style={styles.input}
                value={code}
                onChangeText={setCode}
                keyboardType="number-pad"
              />
            </View>

            <TouchableOpacity style={styles.button} onPress={verifyOTP}>
              <Text style={styles.buttonText}>Xác Thực OTP</Text>
            </TouchableOpacity>
          </>
        )}

        <Text
          style={styles.forgotPassword}
          onPress={() => navigation.navigate("ForgotPassword")}
        >
          Quên mật khẩu?
        </Text>
        <View>
          <Text style={styles.textOr}>Hoặc đăng nhập bằng</Text>
        </View>
        <View style={styles.socialButtons}>
          <TouchableOpacity
            onPress={handleToLogin}
            style={[styles.socialButton, { backgroundColor: "#3b5998" }]}
          >
            <Text style={styles.socialButtonText}>EMAIL</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.socialButton, { backgroundColor: "#db4437" }]}
          >
            <Text style={styles.socialButtonText}>GOOGLE</Text>
          </TouchableOpacity>
        </View>
        <View style={styles.footer}>
          <Text style={styles.footerText}>Chưa có tài khoản? </Text>
          <Text
            style={styles.footerLink}
            onPress={() => navigation.navigate("Register")}
          >
            Đăng ký
          </Text>
        </View>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "flex-end",
    alignItems: "center",
    backgroundColor: "#00F598", // Màu nền xanh lá cây
  },
  whiteFrame: {
    backgroundColor: "#fff",
    borderRadius: 30,
    padding: 20,
    width: 340,
    height: 646,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    marginBottom: 20,
  },
  wrapTitle: {
    width: "80%",
    textAlign: "left",
    display: "flex",
    alignItems: "flex-start",
  },
  title: {
    fontSize: 24,
    fontWeight: "500",
    color: "white",
    marginBottom: 10,
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 50,
    borderBottomColor: "gray",
    borderBottomWidth: 1,
  },
  inputContainerFirst: {
    marginTop: 60,
    marginBottom: 50,
  },
  input: {
    flex: 1,
    marginLeft: 10,
    padding: 10,
    backgroundColor: "white",
    borderRadius: 5,
  },
  forgotPassword: {
    color: "#FF8C00",
    textAlign: "center",
    marginBottom: 60,
    marginTop: 20,
    fontSize: 13,
  },
  button: {
    backgroundColor: "#00F598", // Màu nút giống màu nền
    borderRadius: 15,
    padding: 10,
    alignItems: "center",
    marginTop: 0,
  },
  buttonText: {
    color: "#fff",
    fontWeight: "400",
    fontSize: 18,
  },
  textOr: {
    textAlign: "center",
    color: "gray",
    fontSize: 14,
    marginTop: 90,
    marginBottom: 0,
    fontSize: 13,
  },
  socialButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 20,
  },
  socialButton: {
    width: "48%",
    padding: 10,
    borderRadius: 15,
    alignItems: "center",
  },
  socialButtonText: { color: "#fff" },
  footer: { flexDirection: "row", justifyContent: "center", marginTop: 80 },
  footerText: { color: "gray", fontSize: 13 },
  footerLink: { color: "#00FF94", textDecorationLine: "underline" },
});

export default PhoneLogin;



src\Pages\Auth\RegisterScreen.js
import React, { useState, useEffect, useLayoutEffect } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import { registerUser, resetRegisterState } from "../../Redux/Slice/authSlice";

const RegisterScreen = ({ navigation }) => {
  useLayoutEffect(() => {
    navigation.getParent().setOptions({ tabBarStyle: { display: "none" } });
    return () => {
      navigation.getParent().setOptions({ tabBarStyle: { display: "flex" } });
    };
  }, [navigation]);
  // State cho các trường input
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const [password, setPassword] = useState("");

  // State cho lỗi validate
  const [errors, setErrors] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phoneNumber: "",
    password: "",
  });

  const dispatch = useAppDispatch();
  const { registerLoading, registerSuccess, registerError } = useAppSelector(
    (state) => state.auth
  );

  // Theo dõi trạng thái đăng ký để hiển thị thông báo và điều hướng
  useEffect(() => {
    if (registerSuccess) {
      Alert.alert("Đăng ký thành công!", "Vui lòng xác thực tài khoản.");
      dispatch(resetRegisterState());
      navigation.navigate("VerifyAccount");
    }
    if (registerError) {
      Alert.alert("Lỗi đăng ký", registerError);
      dispatch(resetRegisterState());
    }
  }, [registerSuccess, registerError, dispatch, navigation]);

  // Hàm validate dữ liệu
  const validateForm = () => {
    let isValid = true;
    const newErrors = {
      firstName: "",
      lastName: "",
      email: "",
      phoneNumber: "",
      password: "",
    };

    if (!firstName.trim()) {
      newErrors.firstName = "* Họ không được để trống";
      isValid = false;
    }

    if (!lastName.trim()) {
      newErrors.lastName = "* Tên không được để trống";
      isValid = false;
    }

    if (!email.trim()) {
      newErrors.email = "* Email không được để trống";
      isValid = false;
    } else if (
      !/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(email)
    ) {
      newErrors.email = "* Email không đúng định dạng";
      isValid = false;
    }

    if (!phoneNumber.trim()) {
      newErrors.phoneNumber = "* Số điện thoại không được để trống";
      isValid = false;
    } else if (!/^\+\d+$/.test(phoneNumber)) {
      newErrors.phoneNumber =
        "* Số điện thoại phải bắt đầu bằng + và chỉ chứa số";
      isValid = false;
    }

    if (!password.trim()) {
      newErrors.password = "* Mật khẩu không được để trống";
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  // Hàm xử lý khi nhấn nút "Tạo tài khoản"
  const handleRegister = () => {
    if (validateForm()) {
      // Dữ liệu hợp lệ, chuẩn bị dữ liệu gửi lên backend
      const registerData = {
        email: email,
        password: password,
        firstName: firstName,
        lastName: lastName,
        phoneNumber: phoneNumber,
      };
      // Gọi API đăng ký
      dispatch(registerUser(registerData));
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.wrapTitle}>
        <Text style={styles.title}>Đăng ký</Text>
      </View>
      <View style={styles.whiteFrame}>
        {/* Ô input Họ */}
        <View style={[styles.inputContainer, styles.inputContainerFirst]}>
          <Ionicons name="person-outline" size={20} color="#0090FF" />
          <TextInput
            placeholder="Họ"
            style={styles.input}
            value={firstName}
            onChangeText={setFirstName}
          />
        </View>
        {errors.firstName ? (
          <Text style={styles.errorText}>{errors.firstName}</Text>
        ) : null}

        {/* Ô input Tên đệm & Tên */}
        <View style={styles.inputContainer}>
          <Ionicons name="person-outline" size={20} color="#0090FF" />
          <TextInput
            placeholder="Tên đệm & Tên"
            style={styles.input}
            value={lastName}
            onChangeText={setLastName}
          />
        </View>
        {errors.lastName ? (
          <Text style={styles.errorText}>{errors.lastName}</Text>
        ) : null}

        {/* Ô input Email */}
        <View style={styles.inputContainer}>
          <Ionicons name="mail-outline" size={20} color="#0090FF" />
          <TextInput
            placeholder="Email"
            style={styles.input}
            value={email}
            onChangeText={setEmail}
            keyboardType="email-address"
            autoCapitalize="none"
          />
        </View>
        {errors.email ? (
          <Text style={styles.errorText}>{errors.email}</Text>
        ) : null}

        {/* Ô input Số điện thoại */}
        <View style={styles.inputContainer}>
          <Ionicons name="call-outline" size={20} color="#0090FF" />
          <TextInput
            placeholder="Số điện thoại (VD: +84...)"
            keyboardType="phone-pad"
            style={styles.input}
            value={phoneNumber}
            onChangeText={setPhoneNumber}
          />
        </View>
        {errors.phoneNumber ? (
          <Text style={styles.errorText}>{errors.phoneNumber}</Text>
        ) : null}

        {/* Ô input Mật khẩu */}
        <View style={styles.inputContainer}>
          <Ionicons name="lock-closed-outline" size={20} color="#0090FF" />
          <TextInput
            placeholder="Mật khẩu"
            secureTextEntry
            style={styles.input}
            value={password}
            onChangeText={setPassword}
          />
        </View>
        {errors.password ? (
          <Text style={styles.errorText}>{errors.password}</Text>
        ) : null}

        {/* Nút Tạo tài khoản */}
        <TouchableOpacity
          style={styles.button}
          onPress={handleRegister}
          disabled={registerLoading}
        >
          <Text style={styles.buttonText}>
            {registerLoading ? "Đang đăng ký..." : "Tạo tài khoản"}
          </Text>
        </TouchableOpacity>
        <View>
          <Text style={styles.textOr}>Hoặc đăng nhập bằng</Text>
        </View>

        {/* Nút đăng nhập bằng Google và Facebook */}
        <View style={styles.socialButtons}>
          <TouchableOpacity
            style={[styles.socialButton, { backgroundColor: "#3b5998" }]}
          >
            <Text style={styles.socialButtonText}>FACEBOOK</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.socialButton, { backgroundColor: "#db4437" }]}
          >
            <Text style={styles.socialButtonText}>GOOGLE</Text>
          </TouchableOpacity>
        </View>
        <View style={styles.contract}>
          <Text style={styles.contractText}>
            Với việc tạo tài khoản, tức là bạn đồng ý với
          </Text>
          <Text
            style={styles.contractLink}
            onPress={() => navigation.navigate("Term")}
          >
            điều khoản
          </Text>
        </View>
        <View style={styles.footer}>
          <Text style={styles.footerText}>Đã có tài khoản? </Text>
          <Text
            style={styles.footerLink}
            onPress={() => navigation.navigate("LoginScreen")}
          >
            Đăng nhập
          </Text>
        </View>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "flex-end",
    alignItems: "center",
    backgroundColor: "#00F598",
  },
  whiteFrame: {
    backgroundColor: "#fff",
    borderRadius: 30,
    padding: 20,
    width: 340,
    height: 646,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    marginBottom: 20,
  },
  wrapTitle: {
    width: "80%",
    textAlign: "left",
    display: "flex",
    alignItems: "flex-start",
  },
  title: {
    fontSize: 24,
    fontWeight: "500",
    color: "white",
    marginBottom: 10,
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 5,
    borderBottomColor: "gray",
    borderBottomWidth: 1,
  },
  inputContainerFirst: {
    marginTop: 40,
    marginBottom: 5,
  },
  input: {
    flex: 1,
    marginLeft: 10,
    padding: 10,
    backgroundColor: "white",
    borderRadius: 5,
  },
  errorText: {
    color: "red",
    fontSize: 12,
    marginBottom: 10,
    marginLeft: 30,
  },
  button: {
    backgroundColor: "#00F598",
    borderRadius: 15,
    padding: 10,
    alignItems: "center",
    marginTop: 15,
  },
  buttonText: {
    color: "#fff",
    fontWeight: "400",
    fontSize: 18,
  },
  textOr: {
    textAlign: "center",
    color: "gray",
    fontSize: 14,
    marginTop: 50,
    marginBottom: 0,
    fontSize: 13,
  },
  socialButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 10,
  },
  socialButton: {
    width: "48%",
    padding: 10,
    borderRadius: 15,
    alignItems: "center",
  },
  socialButtonText: {
    color: "#fff",
  },
  contract: {
    flexDirection: "row",
    justifyContent: "center",
    marginTop: 10,
  },
  contractText: {
    color: "gray",
    fontSize: 13,
  },
  contractLink: {
    color: "#00FF94",
    textDecorationLine: "underline",
  },
  footer: {
    flexDirection: "row",
    justifyContent: "center",
    marginTop: 30,
  },
  footerText: {
    color: "gray",
    fontSize: 13,
  },
  footerLink: {
    color: "#00FF94",
    textDecorationLine: "underline",
  },
});

export default RegisterScreen;

src\Pages\Booking\BookingHistoryDetails.js
import React, { useEffect, useLayoutEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  SafeAreaView,
  ScrollView,
  ActivityIndicator,
  Alert,
  Button,
} from "react-native";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import Ionicons from "react-native-vector-icons/Ionicons";
import { WebView } from "react-native-webview";
import * as Linking from "expo-linking";
import getServiceIcon from "../../Components/Icon/getServiceIcon";
import { fetchBookingRoom } from "../../Redux/Slice/hotelSlice";
import SkeletonOrderConfirm from "../../Components/Skeleton/Hotels/SkeletonOrderConfirm";
import { formatPrice } from "../../Utils/formarPrice";
import { fetchListPromotion } from "../../Redux/Slice/promotionSlice";
import {
  fetchPaymentOrder,
  resetPaymentData,
} from "../../Redux/Slice/paymentSlice";
import ModalBookingCancelled from "../../Components/Modal/Booking/ModalBookingCancelled";

const BookingHistoryDetails = ({ navigation, route }) => {
  const type = route?.params?.type;
  const dispatch = useAppDispatch();
  const { bookingDetailData, loadingBookingDetail } = useAppSelector(
    (state) => state.booking
  );

  const [openModal, setOpenModal] = useState(false);

  const listRoom = bookingDetailData?.roomBookedList;

  const getUniqueServiceTypes = (serviceSelect) => {
    const serviceTypes = new Set(
      serviceSelect?.map((service) => service.serviceType) || []
    );
    return Array.from(serviceTypes);
  };

  const handleToSale = () => {
    const totalPrice =
      +bookingDetailData?.totalPriceRoom +
      +bookingDetailData?.totalPriceService;
    const code = "";
    dispatch(fetchListPromotion({ code, totalPrice }));
    navigation.navigate("Discount", { prePage: "OrderConfirm" });
  };

  const renderListRoom = (item) => (
    <View style={styles.roomWrapper}>
      <View style={styles.roomInfo}>
        <Text style={styles.roomLabel}>Tên Phòng</Text>
        <Text style={styles.roomValue}>{item?.roomName}</Text>
      </View>
      <View style={styles.roomInfo}>
        <Text style={styles.roomLabel}>Số khách</Text>
        <Text style={styles.roomValue}>{item?.adults} người</Text>
      </View>
      <View style={styles.roomInfo}>
        <Text style={styles.roomLabel}>Giá</Text>
        <Text style={styles.roomValue}>{formatPrice(item?.priceRoom)}</Text>
      </View>
      <View style={styles.roomInfoService}>
        <View style={styles.roomInfoServiceText}>
          <Text style={styles.roomLabel}>Dịch vụ</Text>
        </View>
        <View style={styles.serviceIcons}>
          {item?.serviceSelect?.length > 0 ? (
            getUniqueServiceTypes(item.serviceSelect).map((type) => (
              <TouchableOpacity key={type} style={styles.iconWrapper}>
                {getServiceIcon(type)}
              </TouchableOpacity>
            ))
          ) : (
            <TouchableOpacity>
              <Ionicons name="add-outline" size={24} color="#007AFF" />
            </TouchableOpacity>
          )}
        </View>
      </View>
      <View style={styles.roomInfo}>
        <Text style={styles.roomLabel}>Điều kiện</Text>
        <TouchableOpacity
          style={[styles.roomValue, { fontWeight: "bold", color: "#007AFF" }]}
        >
          <View>
            <Text style={{ fontWeight: "bold", color: "#007AFF" }}>
              Xem thêm
            </Text>
          </View>
          <View>
            <Ionicons
              name="chevron-forward-outline"
              size={18}
              color="#007AFF"
            />
          </View>
        </TouchableOpacity>
      </View>
    </View>
  );

  if (loadingBookingDetail) {
    return <SkeletonOrderConfirm />;
  }

  const handleConfirmCancelled = () => {
    console.log("heelo");
  };

  const handleToBookingScreen = () => {
    navigation.navigate("BookingScreen");
  };
  console.log("BBBBBBBBBBBBBBBBBBBBBBB", bookingDetailData);
  // const test = {
  //   bookingId: 198,
  //   bookingStatus: "BOOKED",
  //   checkIn: "22-09-2025 14:20:00",
  //   checkOut: "23-09-2025 12:20:00",
  //   finalPrice: "1060000.00",
  //   hotelAddress: "Hà Nội",
  //   hotelId: 2,
  //   hotelName: "Onomo",
  //   paymentDeposit: "530000.00",
  //   policyList: [
  //     {
  //       condition: "12",
  //       description: "Không hoàn tiền nếu hủy trong vòng 12 giờ trước check-in",
  //       id: 9,
  //       name: "Không hoàn tiền",
  //       operator: "after",
  //       type: "CANCEL",
  //       value: "0%",
  //     },
  //     {
  //       condition: "13",
  //       description: "Không hoàn tiền nếu hủy trong vòng 12 giờ trước check-in",
  //       id: 9,
  //       name: "Không hoàn tiền",
  //       operator: "after",
  //       type: "CANCEL",
  //       value: "0%",
  //     },
  //     {
  //       condition: "14",
  //       description: "Không hoàn tiền nếu hủy trong vòng 12 giờ trước check-in",
  //       id: 9,
  //       name: "Không hoàn tiền",
  //       operator: "after",
  //       type: "CANCEL",
  //       value: "0%",
  //     },
  //   ],
  //   priceCoupon: "20000.00",
  //   roomBookedList: [
  //     {
  //       adults: 1,
  //       priceRoom: 1080000,
  //       priceService: 70000,
  //       roomId: 2,
  //       roomName: "Phòng Deluxe Gia đình VIP",
  //       serviceSelect: [Array],
  //     },
  //   ],
  //   totalAdults: 1,
  //   totalPriceRoom: "1080000.00",
  //   totalPriceService: "70000.00",
  // };
  return (
    <View style={styles.container}>
      <ScrollView showsHorizontalScrollIndicator={false}>
        <View style={styles.mainContainer}>
          <View style={styles.headerSection}>
            <Text style={[styles.title, styles.titleCenter]}>
              Thông tin khách sạn
            </Text>
            <View style={styles.infoSection}>
              <View style={styles.infoItem}>
                <Text style={styles.infoLabel}>Tên khách sạn</Text>
                <Text style={styles.infoValue}>
                  {bookingDetailData && bookingDetailData?.hotelName}
                </Text>
              </View>
              <View style={styles.infoItem}>
                <Text style={styles.infoLabel}>Vị trí khách sạn</Text>
                <Text style={styles.infoValue}>
                  {bookingDetailData && bookingDetailData?.hotelAddress}
                </Text>
              </View>
              <View style={styles.infoItem}>
                <Text style={styles.infoLabel}>Tổng người lớn</Text>
                <Text style={styles.infoValue}>
                  {bookingDetailData && bookingDetailData?.totalAdults}
                </Text>
              </View>
              <View style={styles.infoItem}>
                <Text style={styles.infoLabel}>CheckIn</Text>
                <Text style={styles.infoValue}>
                  {bookingDetailData && bookingDetailData?.checkIn}
                </Text>
              </View>
              <View style={styles.infoItem}>
                <Text style={styles.infoLabel}>CheckOut</Text>
                <Text style={styles.infoValue}>
                  {bookingDetailData && bookingDetailData?.checkOut}
                </Text>
              </View>
            </View>
            <View style={styles.br} />
          </View>

          <View style={styles.roomsSection}>
            <Text style={styles.subTitle}>Phòng đặt</Text>
            <View>
              {listRoom?.map((item, index) => (
                <View key={index}>{renderListRoom(item)}</View>
              ))}
            </View>
            <View style={styles.br} />
          </View>
        </View>
      </ScrollView>
      <View style={styles.headerSection}>
        <View style={styles.infoSection}>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Mã giảm giá</Text>
            <TouchableOpacity
              style={styles.wrapperInfoValueSale}
              onPress={handleToSale}
            >
              <Ionicons name="bookmark-outline" size={18} color="#007AFF" />
              <Text style={styles.infoValueSale}>couponCode</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>

      <View style={styles.headerSection2}>
        <Text style={[styles.title, styles.titleCenter]}>Hóa đơn</Text>
        <View style={styles.infoSection}>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Giá tiền phòng</Text>
            <Text style={styles.infoValue}>
              {formatPrice(
                bookingDetailData && bookingDetailData?.totalPriceRoom
              )}
            </Text>
          </View>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabelSale}>Giá tiền dịch vụ</Text>
            <Text style={styles.infoValue}>
              {formatPrice(
                bookingDetailData && bookingDetailData?.totalPriceService
              )}
            </Text>
          </View>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Mã giảm giá</Text>
            <Text style={styles.infoValue}>
              {formatPrice(bookingDetailData && bookingDetailData?.priceCoupon)}
            </Text>
          </View>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Giá tiền cọc</Text>
            <Text style={styles.infoValue}>
              {formatPrice(
                bookingDetailData && bookingDetailData?.paymentDeposit
              )}
            </Text>
          </View>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Giá cuối cùng</Text>
            <Text style={styles.infoValue}>
              {formatPrice(bookingDetailData && bookingDetailData?.finalPrice)}
            </Text>
          </View>
        </View>
        <View style={styles.br} />
      </View>
      {type === "Booked" && (
        <View style={styles.footerSection}>
          <View style={styles.br} />
          <Text style={styles.subTitle}>Phương thức hủy phòng</Text>
          <TouchableOpacity
            style={styles.button}
            onPress={() => setOpenModal(true)}
          >
            <Text style={styles.buttonText}>Xác nhận hủy phòng</Text>
          </TouchableOpacity>
        </View>
      )}

      <ModalBookingCancelled
        visible={openModal}
        onClose={() => setOpenModal(false)}
        onConfirm={handleConfirmCancelled}
        bookingId={bookingDetailData?.bookingId}
        handleToBookingScreen={handleToBookingScreen}
        policyRoomList={bookingDetailData?.policyList}
        // policyRoomList={test.policyList}
      />
    </View>
  );
};

export default BookingHistoryDetails;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  mainContainer: {
    paddingHorizontal: 20,
    paddingVertical: 5,
    flexDirection: "column",
    height: "100%",
    flex: 1,
  },
  headerSection: {
    paddingHorizontal: 10,
    // Phần đầu cố định, không cần flex cụ thể vì sẽ chiếm không gian tự nhiên
  },
  headerSection2: {
    marginTop: "auto",
    paddingHorizontal: 10,
  },
  roomsSection: {
    // Chiếm không gian còn lại để ScrollView có thể cuộn
    // marginVertical: 10,
  },
  footerSection: {
    // Phần cuối cố định, không cần flex cụ thể vì sẽ chiếm không gian tự nhiên
  },
  title: {
    fontWeight: "400",
    color: "#000",
    marginBottom: 5,
    textAligin: "center",
  },
  titleCenter: {
    textAlign: "center",
    fontSize: 17,
  },
  subTitle: {
    fontSize: 16,
    fontWeight: "400",
    color: "#000",
    marginBottom: 5,
    textAlign: "center",
  },
  infoSection: {
    // marginBottom: 10,
    // flexDirection: "row",
    // justifyContent:"center"
  },
  infoSectionSale: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  infoSectionLast: {
    flexDirection: "row",
    justifyContent: "space-evenly",
    alignItems: "center",
  },
  infoItem: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  infoLabel: {
    fontSize: 14,
    color: "#666",
    marginBottom: 2,
  },
  infoValue: {
    fontSize: 16,
    color: "#000",
    marginBottom: 2,
  },
  roomInfo: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 2,
  },
  roomInfoService: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 2,
    flexWrap: "wrap",
  },
  roomInfoServiceText: {
    width: "20%",
  },
  roomLabel: {
    fontSize: 14,
    color: "#666",
  },
  roomValue: {
    fontSize: 14,
    color: "#000",
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
  },
  paymentOption: {
    flexDirection: "row",
    alignItems: "center",
    // marginBottom: 10,
  },
  radioCircle: {
    width: 20,
    height: 20,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: "#007AFF",
    alignItems: "center",
    justifyContent: "center",
    marginRight: 10,
  },
  selectedRadio: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: "#007AFF",
  },
  paymentText: {
    fontSize: 16,
    color: "#000",
  },
  button: {
    backgroundColor: "red",
    paddingVertical: 12,
    marginHorizontal: 10,
    borderRadius: 14,
    alignItems: "center",
    marginTop: 10,
  },
  buttonText: {
    fontSize: 16,
    color: "white",
    fontWeight: "400",
  },
  br: {
    borderBottomColor: "#E5E5E5",
    borderBottomWidth: 1,
    marginVertical: 5,
  },
  roomWrapper: {
    // marginVertical: 20,
    borderBottomColor: "#E5E5E5",
    borderBottomWidth: 1,
    paddingVertical: 20,
  },
  serviceIcons: {
    width: "76%",
    flexDirection: "row",
    // alignItems: "flex-start",
    justifyContent: "flex-end",
    flexWrap: "wrap",
  },
  iconWrapper: {
    marginLeft: 3,
  },
  infoValueSale: {
    padding: 3,
    color: "#007AFF",
    fontSize: 12,
    marginBottom: 2,
    padding: 2,
    textAlign: "",
  },
  wrapperInfoValueSale: {
    flexDirection: "row",
    borderWidth: 1,
    borderColor: "#007AFF",
    borderRadius: 8,
  },
});


src\Pages\Booking\BookingScreen.js
import React, { useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Image,
  TouchableOpacity,
  FlatList,
} from "react-native";
import { Ionicons } from "@expo/vector-icons"; // Dùng icon từ Expo
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";
import PriceScreen from "../Hotels/PriceScreen";
import { useState } from "react";
import RoomCancelled from "./RoomCancelled";
import RoomBooking from "./RoomBooking";
import RoomBooked from "./RoomBooked";
import RoomCheckedOut from "./RoomCheckedOut";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import { fetchBookingStatus } from "../../Redux/Slice/hotelSlice";

const BookingScreen = ({ navigation }) => {
  const { bookingStatus, loadingBookingStatus } = useAppSelector(
    (state) => state.hotel
  );
  const { accessToken, isLoggedIn } = useAppSelector((state) => state.auth);
  const dispatch = useAppDispatch();
  const Tab = createMaterialTopTabNavigator();
  const [css, setCss] = useState(1);
  const bookings = [
    {
      id: "1",
      image:
        "https://media.istockphoto.com/id/2148367059/fr/photo/la-ligne-dhorizon-c%C3%B4ti%C3%A8re-de-dakar-s%C3%A9n%C3%A9gal-afrique-de-louest.webp?a=1&b=1&s=612x612&w=0&k=20&c=gAwIfTVBEupXPG_K5DoK1k4kpJ_m7SkDF_UlkLrIcGk=",
      name: "Heden golf",
      rating: 3.9,
      reviews: 200,
      date: "23 - 7 - 2019",
      discount: "25% OFF",
      price: 127,
    },
  ];

  // Chỉ gọi API khi người dùng đã đăng nhập
  useEffect(() => {
    if (accessToken && isLoggedIn) {
      dispatch(fetchBookingStatus());
    }
    // Thêm sự kiện focus
    const unsubscribe = navigation.addListener("focus", () => {
      if (accessToken && isLoggedIn) {
        dispatch(fetchBookingStatus());
      }
    });
    // Cleanup listener khi component unmount
    return unsubscribe;
  }, [dispatch, accessToken, isLoggedIn, navigation]); // Thêm accessToken và isLoggedIn vào dependency array để gọi lại API nếu trạng thái đăng nhập thay đổi

  // Kiểm tra chưa đăng nhập
  if (!accessToken && !isLoggedIn) {
    return (
      <View style={styles.emptyContainer}>
        <Ionicons name="log-in-outline" size={48} color="#6B7280" />
        <Text style={styles.emptyText}>Đăng nhập để sử dụng tính năng này</Text>
      </View>
    );
  }

  // Kiểm tra dữ liệu đang tải hoặc chưa có
  if (loadingBookingStatus || !bookingStatus) {
    return (
      <View style={styles.emptyContainer}>
        <Text style={styles.emptyText}>Đang tải...</Text>
      </View>
    );
  }

  // Phần còn lại giữ nguyên
  const CustomTabBar = ({ state, descriptors, navigation }) => {
    return (
      <View style={styles.header__tabs}>
        <TouchableOpacity
          style={[
            styles.header__tab,
            styles.header__tab__1,
            state.index === 0 && styles.active,
          ]}
          onPress={() => {
            navigation.navigate("Booked");
          }}
        >
          <Text
            style={[
              styles.header__tab__text,
              state.index === 0 && styles.activeText,
            ]}
          >
            Đã đặt
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.header__tab, state.index === 1 && styles.active]}
          onPress={() => {
            navigation.navigate("Booking");
          }}
        >
          <Text
            style={[
              styles.header__tab__text,
              state.index === 1 && styles.activeText,
            ]}
          >
            Đang ở
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.header__tab, state.index === 2 && styles.active]}
          onPress={() => {
            navigation.navigate("CheckedOut");
          }}
        >
          <Text
            style={[
              styles.header__tab__text,
              state.index === 2 && styles.activeText,
            ]}
          >
            Đã trả
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[
            styles.header__tab,
            styles.header__tab__3,
            state.index === 3 && styles.active,
          ]}
          onPress={() => {
            navigation.navigate("Cancelled");
          }}
        >
          <Text
            style={[
              styles.header__tab__text,
              state.index === 3 && styles.activeText,
            ]}
          >
            Đã hủy
          </Text>
        </TouchableOpacity>
      </View>
    );
  };

  return (
    <View style={styles.bookingHistoryScreen}>
      <View style={styles.bookingHistoryScreen__searchBar}>
        <Ionicons
          name="search"
          size={20}
          color="#0090FF"
          style={styles.bookingHistoryScreen__searchIcon}
        />
        <TextInput
          style={styles.bookingHistoryScreen__searchInput}
          placeholder="Search"
          placeholderTextColor="#999"
        />
        <TouchableOpacity>
          <Ionicons
            name="close"
            size={20}
            color="#999"
            style={styles.bookingHistoryScreen__clearIcon}
          />
        </TouchableOpacity>
      </View>

      <Tab.Navigator
        tabBar={(props) => <CustomTabBar {...props} />}
        initialRouteName="Booked"
      >
        <Tab.Screen
          name="Booked"
          component={RoomBooked}
          options={{ tabBarLabel: "Đang đặt " }}
        />
        <Tab.Screen
          name="Booking"
          component={RoomBooking}
          options={{ tabBarLabel: "Đã đặt " }}
        />
        <Tab.Screen
          name="CheckedOut"
          component={RoomCheckedOut}
          options={{ tabBarLabel: "Đã đặt " }}
        />
        <Tab.Screen
          name="Cancelled"
          component={RoomCancelled}
          options={{ tabBarLabel: "Đã hủy " }}
        />
      </Tab.Navigator>
    </View>
  );
};

// Styles giữ nguyên, đã có emptyContainer và emptyText
const styles = StyleSheet.create({
  bookingHistoryScreen: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    paddingTop: 40,
    paddingHorizontal: 15,
  },
  bookingHistoryScreen__searchBar: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "white",
    borderRadius: 12,
    paddingHorizontal: 15,
    height: 40,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: "#d3d3d3",
  },
  bookingHistoryScreen__searchIcon: {
    marginRight: 10,
  },
  bookingHistoryScreen__searchInput: {
    flex: 1,
    fontSize: 16,
    color: "#000",
    padding: 0,
  },
  bookingHistoryScreen__clearIcon: {
    marginLeft: 10,
  },
  header__tabs: {
    flexDirection: "row",
    justifyContent: "center",
    paddingVertical: 10,
  },
  header__tab: {
    paddingVertical: 5,
    borderWidth: 1,
    borderColor: "#0090FF",
    paddingHorizontal: 20,
  },
  header__tab__1: {
    borderTopLeftRadius: 15,
    borderBottomLeftRadius: 15,
  },
  header__tab__3: {
    borderTopRightRadius: 15,
    borderBottomRightRadius: 15,
  },
  header__tab__text: {
    fontSize: 14,
    color: "#007AFF",
  },
  active: {
    backgroundColor: "#0090FF",
  },
  activeText: {
    color: "white",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    paddingHorizontal: 20,
  },
  emptyText: {
    fontSize: 16,
    color: "#888888",
    textAlign: "center",
    marginTop: 20,
  },
});

export default BookingScreen;



src\Pages\Booking\RoomBooked.js
import React from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Image,
  TouchableOpacity,
  FlatList,
} from "react-native";
import { Ionicons } from "@expo/vector-icons"; // Dùng icon từ Expo
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";
import PriceScreen from "../Hotels/PriceScreen";
import { useState } from "react";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import { formatPrice } from "../../Utils/formarPrice";
import { getBookingDetails } from "../../Redux/Slice/bookingSlice";

const RoomBooked = ({ navigation }) => {
  const { accessToken, isLoggedIn } = useAppSelector((state) => state.auth);

  const { bookingStatus, loadingBookingStatus } = useAppSelector(
    (state) => state.hotel
  );

  const { bookingDetailData } = useAppSelector((state) => state.booking);

  console.log("bookingDetailData 29 >>>", bookingDetailData);
  const dispatch = useAppDispatch();
  const bookings = bookingStatus?.BOOKED || [];

  const handleToBookingDetail = (item) => {
    // console.log("item.bookingId", item.bookingId);
    dispatch(getBookingDetails(item.bookingId));
    navigation.navigate("BookingHistoryDetails", { type: "Booked" });
  };

  const renderBookingItem = ({ item }) => (
    <TouchableOpacity
      style={styles.bookingHistoryScreen__bookingItem}
      onPress={() => handleToBookingDetail(item)}
    >
      <Image
        source={{ uri: item?.image }}
        style={styles.bookingHistoryScreen__bookingImage}
      />
      <View style={styles.bookingHistoryScreen__bookingDetails}>
        <Text style={styles.bookingHistoryScreen__bookingName}>
          {item?.hotelName}
        </Text>
        <View style={styles.bookingHistoryScreen__ratingRow}>
          <Ionicons name="star" size={16} color="#FFD700" />
          <Text style={styles.bookingHistoryScreen__ratingText}>
            {item?.rating} Đánh giá ({item?.feedbackSum})
          </Text>
        </View>
        <Text style={styles.bookingHistoryScreen__date}>
          Đã đặt: {item?.bookingDate}
        </Text>
        <View style={styles.bookingHistoryScreen__priceRow}>
          <Text style={styles.bookingHistoryScreen__price}>
            {formatPrice(item?.bookingPrice)}
          </Text>
        </View>
      </View>
      <View style={styles.bookingHistoryScreen__actionButtons}>
        {/* <TouchableOpacity style={styles.bookingHistoryScreen__infoButton}>
          <Text style={styles.bookingHistoryScreen__infoButtonText}>
            Thông tin
          </Text>
        </TouchableOpacity> */}
        <TouchableOpacity
          style={styles.bookingHistoryScreen__rebookButton}
          onPress={() => handleToBookingDetail(item)}
        >
          <Text style={styles.bookingHistoryScreen__rebookButtonText}>Hủy</Text>
        </TouchableOpacity>
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.bookingHistoryScreen}>
      {bookings.length > 0 ? (
        <FlatList
          data={bookings}
          renderItem={renderBookingItem}
          keyExtractor={(item) => item.bookingId.toString()} // Đảm bảo key là string
          style={styles.bookingHistoryScreen__bookingList}
        />
      ) : (
        <View style={styles.emptyContainer}>
          <Ionicons name="calendar-outline" size={50} color="#888888" />
          <Text style={styles.emptyText}>Bạn chưa đặt phòng</Text>
        </View>
      )}
    </View>
  );
};

export default RoomBooked;

const styles = StyleSheet.create({
  bookingHistoryScreen: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    //     paddingTop: 40, // Khoảng cách từ thanh trạng thái
    //     paddingHorizontal: 15,
  },
  bookingHistoryScreen__title: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 15,
  },
  bookingHistoryScreen__searchBar: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "white",
    borderRadius: 12,
    paddingHorizontal: 15,

    height: 40,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: "#d3d3d3",
  },
  bookingHistoryScreen__searchIcon: {
    marginRight: 10,
  },
  bookingHistoryScreen__searchInput: {
    flex: 1,
    fontSize: 16,
    color: "#000",
    padding: 0,
  },
  bookingHistoryScreen__clearIcon: {
    marginLeft: 10,
  },
  bookingHistoryScreen__filterTabs: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 20,
  },
  bookingHistoryScreen__filterTab: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 20,
    //     paddingVertical: 10,
    alignItems: "center",
    marginHorizontal: 5,
  },
  bookingHistoryScreen__filterTab__active: {
    backgroundColor: "#007AFF",
    borderColor: "#007AFF",
  },
  bookingHistoryScreen__filterTabText: {
    fontSize: 16,
    color: "#333",
  },
  bookingHistoryScreen__filterTabText__active: {
    color: "#FFFFFF",
  },
  bookingHistoryScreen__bookingList: {
    flex: 1,
  },
  bookingHistoryScreen__bookingItem: {
    flexDirection: "row",
    marginBottom: 20,
    //     justifyContent: "flex-end",
    alignItems: "flex-end",
    //     backgroundColor: "red",
  },
  bookingHistoryScreen__bookingImage: {
    width: 90,
    height: 90,
    borderRadius: 10,
    marginRight: 15,
  },
  bookingHistoryScreen__bookingDetails: {
    flex: 1,
  },
  bookingHistoryScreen__bookingName: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 5,
  },
  bookingHistoryScreen__ratingRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 5,
  },
  bookingHistoryScreen__ratingText: {
    fontSize: 14,
    color: "#333",
    marginLeft: 5,
  },
  bookingHistoryScreen__date: {
    fontSize: 14,
    color: "#333",
    marginBottom: 5,
    fontWeight: "bold",
  },
  bookingHistoryScreen__priceRow: {
    flexDirection: "row",
    alignItems: "center",
  },
  bookingHistoryScreen__discount: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#FFA500",
    marginRight: 50,
  },
  bookingHistoryScreen__price: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#000",
  },
  bookingHistoryScreen__actionButtons: {
    justifyContent: "space-between",
    alignItems: "flex-end",
  },
  bookingHistoryScreen__infoButton: {
    backgroundColor: "#00A1D6", // Màu trung bình giữa #007AFF và #00C4B4
    borderRadius: 8,
    paddingVertical: 5,
    paddingHorizontal: 20,
    backgroundColor: "#00F598",
  },
  bookingHistoryScreen__infoButtonText: {
    fontSize: 14,
    color: "#FFFFFF",
    fontWeight: "400",
  },
  bookingHistoryScreen__rebookButton: {
    backgroundColor: "red", // Màu trung bình giữa #007AFF và #00C4B4
    borderRadius: 8,
    paddingVertical: 5,
    paddingHorizontal: 30,
    backgroundColor: "red",
  },
  bookingHistoryScreen__rebookButtonText: {
    fontSize: 14,
    color: "#FFFFFF",
    fontWeight: "400",
  },
  header__tabs: {
    flexDirection: "row",
    justifyContent: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
  },
  header__tab: {
    paddingVertical: 5,
    borderWidth: 1,
    borderColor: "#0090FF",
    paddingHorizontal: 30,
  },
  header__tab__1: {
    borderTopLeftRadius: 15,
    borderBottomLeftRadius: 15,
  },

  header__tab__3: {
    borderTopRightRadius: 15,
    borderBottomRightRadius: 15,
  },
  header__tab__text: {
    fontSize: 14,
    color: "#007AFF",
  },
  active: {
    backgroundColor: "#0090FF",
  },
  activeText: {
    color: "white",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    paddingHorizontal: 20,
  },
  emptyText: {
    fontSize: 16,
    color: "#888888",
    textAlign: "center",
    marginTop: 20,
  },
});


src\Pages\Booking\RoomBooking.js
import React from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Image,
  TouchableOpacity,
  FlatList,
} from "react-native";
import { Ionicons } from "@expo/vector-icons"; // Dùng icon từ Expo
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";
import PriceScreen from "../Hotels/PriceScreen";
import { useState } from "react";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import { formatPrice } from "../../Utils/formarPrice";
import { getBookingDetails } from "../../Redux/Slice/bookingSlice";
const RoomBooking = () => {
  const { accessToken, isLoggedIn } = useAppSelector((state) => state.auth);
  // if (!accessToken && !isLoggedIn) {
  //   return (
  //     <View style={styles.RequireLogin}>
  //       <Text style={styles.RequireLoginText}>
  //         Bạn cần đăng nhập để xem tính năng này
  //       </Text>
  //     </View>
  //   );
  // }
  const { bookingStatus, loadingBookingStatus } = useAppSelector(
    (state) => state.hotel
  );
  const dispatch = useAppDispatch();
  const bookings = bookingStatus?.CHECKIN || [];
  const handleToBookingDetail = (item) => {
    // console.log("item.bookingId", item.bookingId);
    dispatch(getBookingDetails(item.bookingId));
    navigation.navigate("BookingHistoryDetails", { type: "Booking" });
  };
  const renderBookingItem = ({ item }) => (
    <TouchableOpacity
      onPress={() => handleToBookingDetail(item)}
      style={styles.bookingHistoryScreen__bookingItem}
    >
      <Image
        source={{ uri: item?.image }}
        style={styles.bookingHistoryScreen__bookingImage}
      />
      <View style={styles.bookingHistoryScreen__bookingDetails}>
        <Text style={styles.bookingHistoryScreen__bookingName}>
          {item?.hotelName}
        </Text>
        <View style={styles.bookingHistoryScreen__ratingRow}>
          <Ionicons name="star" size={16} color="#FFD700" />
          <Text style={styles.bookingHistoryScreen__ratingText}>
            {item?.rating} Đánh giá ({item?.feedbackSum})
          </Text>
        </View>
        <Text style={styles.bookingHistoryScreen__date}>
          Đã đặt: {item?.bookingDate}
        </Text>
        <View style={styles.bookingHistoryScreen__priceRow}>
          <Text style={styles.bookingHistoryScreen__price}>
            {formatPrice(item?.bookingPrice)}
          </Text>
        </View>
      </View>
      <View style={styles.bookingHistoryScreen__actionButtons}>
        {/* <TouchableOpacity style={styles.bookingHistoryScreen__infoButton}>
          <Text style={styles.bookingHistoryScreen__infoButtonText}>
            Thông tin
          </Text>
        </TouchableOpacity> */}
        <TouchableOpacity style={styles.bookingHistoryScreen__rebookButton}>
          <Text style={styles.bookingHistoryScreen__rebookButtonText}>
            CheckOut
          </Text>
        </TouchableOpacity>
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.bookingHistoryScreen}>
      {bookings.length > 0 ? (
        <FlatList
          data={bookings}
          renderItem={renderBookingItem}
          keyExtractor={(item) => item.bookingId.toString()} // Đảm bảo key là string
          style={styles.bookingHistoryScreen__bookingList}
        />
      ) : (
        <View style={styles.emptyContainer}>
          <Ionicons name="calendar-outline" size={50} color="#888888" />
          <Text style={styles.emptyText}>Bạn chưa có phòng đang ở</Text>
        </View>
      )}
    </View>
  );
};

export default RoomBooking;

const styles = StyleSheet.create({
  bookingHistoryScreen: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    //     paddingTop: 40, // Khoảng cách từ thanh trạng thái
    //     paddingHorizontal: 15,
  },
  bookingHistoryScreen__title: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 15,
  },
  bookingHistoryScreen__searchBar: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "white",
    borderRadius: 12,
    paddingHorizontal: 15,

    height: 40,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: "#d3d3d3",
  },
  bookingHistoryScreen__searchIcon: {
    marginRight: 10,
  },
  bookingHistoryScreen__searchInput: {
    flex: 1,
    fontSize: 16,
    color: "#000",
    padding: 0,
  },
  bookingHistoryScreen__clearIcon: {
    marginLeft: 10,
  },
  bookingHistoryScreen__filterTabs: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 20,
  },
  bookingHistoryScreen__filterTab: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 20,
    //     paddingVertical: 10,
    alignItems: "center",
    marginHorizontal: 5,
  },
  bookingHistoryScreen__filterTab__active: {
    backgroundColor: "#007AFF",
    borderColor: "#007AFF",
  },
  bookingHistoryScreen__filterTabText: {
    fontSize: 16,
    color: "#333",
  },
  bookingHistoryScreen__filterTabText__active: {
    color: "#FFFFFF",
  },
  bookingHistoryScreen__bookingList: {
    flex: 1,
  },
  bookingHistoryScreen__bookingItem: {
    flexDirection: "row",
    marginBottom: 20,
    //     backgroundColor: "red",
  },
  bookingHistoryScreen__bookingImage: {
    width: 90,
    height: 90,
    borderRadius: 10,
    marginRight: 15,
  },
  bookingHistoryScreen__bookingDetails: {
    flex: 1,
  },
  bookingHistoryScreen__bookingName: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 5,
  },
  bookingHistoryScreen__ratingRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 5,
  },
  bookingHistoryScreen__ratingText: {
    fontSize: 14,
    color: "#333",
    marginLeft: 5,
  },
  bookingHistoryScreen__date: {
    fontSize: 14,
    color: "#333",
    marginBottom: 5,
    fontWeight: "bold",
  },
  bookingHistoryScreen__priceRow: {
    flexDirection: "row",
    alignItems: "center",
  },
  bookingHistoryScreen__discount: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#FFA500",
    marginRight: 50,
  },
  bookingHistoryScreen__price: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#000",
  },
  bookingHistoryScreen__actionButtons: {
    justifyContent: "space-between",
    alignItems: "flex-end",
    flexDirection: "column",
  },
  bookingHistoryScreen__infoButton: {
    backgroundColor: "#00A1D6", // Màu trung bình giữa #007AFF và #00C4B4
    borderRadius: 8,
    paddingVertical: 5,
    paddingHorizontal: 20,
    backgroundColor: "#00F598",
  },
  bookingHistoryScreen__infoButtonText: {
    fontSize: 14,
    color: "#FFFFFF",
    fontWeight: "400",
  },
  bookingHistoryScreen__rebookButton: {
    marginTop: "auto",
    backgroundColor: "#00A1D6", // Màu trung bình giữa #007AFF và #00C4B4
    borderRadius: 8,
    paddingVertical: 5,
    paddingHorizontal: 30,
    backgroundColor: "#00F598",
  },
  bookingHistoryScreen__rebookButtonText: {
    fontSize: 14,
    color: "#FFFFFF",
    fontWeight: "400",
  },
  header__tabs: {
    flexDirection: "row",
    justifyContent: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
  },
  header__tab: {
    paddingVertical: 5,
    borderWidth: 1,
    borderColor: "#0090FF",
    paddingHorizontal: 30,
  },
  header__tab__1: {
    borderTopLeftRadius: 15,
    borderBottomLeftRadius: 15,
  },

  header__tab__3: {
    borderTopRightRadius: 15,
    borderBottomRightRadius: 15,
  },
  header__tab__text: {
    fontSize: 14,
    color: "#007AFF",
  },
  active: {
    backgroundColor: "#0090FF",
  },
  activeText: {
    color: "white",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    paddingHorizontal: 20,
  },
  emptyText: {
    fontSize: 16,
    color: "#888888",
    textAlign: "center",
    marginTop: 20,
  },
});


src\Pages\Booking\RoomCancelled.js
import React from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Image,
  TouchableOpacity,
  FlatList,
} from "react-native";
import { Ionicons } from "@expo/vector-icons"; // Dùng icon từ Expo
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";
import PriceScreen from "../Hotels/PriceScreen";
import { useState } from "react";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import { formatPrice } from "../../Utils/formarPrice";
import { getBookingDetails } from "../../Redux/Slice/bookingSlice";

const RoomCancelled = ({ navigation }) => {
  const dispatch = useAppDispatch();
  const { accessToken, isLoggedIn } = useAppSelector((state) => state.auth);
  // if (!accessToken && !isLoggedIn) {
  //   return (
  //     <View style={styles.RequireLogin}>
  //       <Text style={styles.RequireLoginText}>
  //         Bạn cần đăng nhập để xem tính năng này
  //       </Text>
  //     </View>
  //   );
  // }

  const { bookingStatus, loadingBookingStatus } = useAppSelector(
    (state) => state.hotel
  );

  const bookings = bookingStatus?.CANCELED || [];

  const handleReviewHotel = (item) => {
    console.log(item);
    navigation.navigate("RateApp", { item: item });
  };
  const handleToBookingDetail = (item) => {
    // console.log("item.bookingId", item.bookingId);
    dispatch(getBookingDetails(item.bookingId));
    navigation.navigate("BookingHistoryDetails", { type: "Cancelled" });
  };
  const renderBookingItem = ({ item }) => (
    <TouchableOpacity
      onPress={() => handleToBookingDetail(item)}
      style={styles.bookingHistoryScreen__bookingItem}
    >
      <Image
        source={{ uri: item?.image }}
        style={styles.bookingHistoryScreen__bookingImage}
      />
      <View style={styles.bookingHistoryScreen__bookingDetails}>
        <Text style={styles.bookingHistoryScreen__bookingName}>
          {item?.hotelName}
        </Text>
        <View style={styles.bookingHistoryScreen__ratingRow}>
          <Ionicons name="star" size={16} color="#FFD700" />
          <Text style={styles.bookingHistoryScreen__ratingText}>
            {item?.rating} Đánh giá ({item?.feedbackSum})
          </Text>
        </View>
        <Text style={styles.bookingHistoryScreen__date}>
          Đã đặt: {item?.bookingDate}
        </Text>
        <View style={styles.bookingHistoryScreen__priceRow}>
          <Text style={styles.bookingHistoryScreen__price}>
            {formatPrice(item?.bookingPrice)}
          </Text>
        </View>
      </View>
      <View style={styles.bookingHistoryScreen__actionButtons}>
        {/* <TouchableOpacity style={styles.bookingHistoryScreen__infoButton}>
          <Text style={styles.bookingHistoryScreen__infoButtonText}>
            Thông tin
          </Text>
        </TouchableOpacity> */}
        <TouchableOpacity
          style={styles.bookingHistoryScreen__rebookButton}
          // onPress={() => handleReviewHotel(item)}
        >
          <Text style={styles.bookingHistoryScreen__rebookButtonText}>
            {/* Đã hoàn tiền/ Đánh giá */}
            Đã hoàn tiền
          </Text>
        </TouchableOpacity>
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.bookingHistoryScreen}>
      {bookings.length > 0 ? (
        <FlatList
          data={bookings}
          renderItem={renderBookingItem}
          keyExtractor={(item) => item.bookingId.toString()} // Đảm bảo key là string
          style={styles.bookingHistoryScreen__bookingList}
        />
      ) : (
        <View style={styles.emptyContainer}>
          <Ionicons name="calendar-outline" size={50} color="#888888" />
          <Text style={styles.emptyText}>Bạn chưa hủy phòng</Text>
        </View>
      )}
    </View>
  );
};
export default RoomCancelled;

const styles = StyleSheet.create({
  bookingHistoryScreen: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    //     paddingTop: 40, // Khoảng cách từ thanh trạng thái
    //     paddingHorizontal: 15,
  },
  bookingHistoryScreen__title: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 15,
  },
  bookingHistoryScreen__searchBar: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "white",
    borderRadius: 12,
    paddingHorizontal: 15,

    height: 40,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: "#d3d3d3",
  },
  bookingHistoryScreen__searchIcon: {
    marginRight: 10,
  },
  bookingHistoryScreen__searchInput: {
    flex: 1,
    fontSize: 16,
    color: "#000",
    padding: 0,
  },
  bookingHistoryScreen__clearIcon: {
    marginLeft: 10,
  },
  bookingHistoryScreen__filterTabs: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 20,
  },
  bookingHistoryScreen__filterTab: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 20,
    //     paddingVertical: 10,
    alignItems: "center",
    marginHorizontal: 5,
  },
  bookingHistoryScreen__filterTab__active: {
    backgroundColor: "#007AFF",
    borderColor: "#007AFF",
  },
  bookingHistoryScreen__filterTabText: {
    fontSize: 16,
    color: "#333",
  },
  bookingHistoryScreen__filterTabText__active: {
    color: "#FFFFFF",
  },
  bookingHistoryScreen__bookingList: {
    flex: 1,
  },
  bookingHistoryScreen__bookingItem: {
    flexDirection: "row",
    marginBottom: 20,
    //     justifyContent: "flex-end",
    alignItems: "flex-end",
    //     backgroundColor: "red",
  },
  bookingHistoryScreen__bookingImage: {
    width: 90,
    height: 90,
    borderRadius: 10,
    marginRight: 15,
  },
  bookingHistoryScreen__bookingDetails: {
    flex: 1,
  },
  bookingHistoryScreen__bookingName: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 5,
  },
  bookingHistoryScreen__ratingRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 5,
  },
  bookingHistoryScreen__ratingText: {
    fontSize: 14,
    color: "#333",
    marginLeft: 5,
  },
  bookingHistoryScreen__date: {
    fontSize: 14,
    color: "#333",
    marginBottom: 5,
    fontWeight: "bold",
  },
  bookingHistoryScreen__priceRow: {
    flexDirection: "row",
    alignItems: "center",
  },
  bookingHistoryScreen__discount: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#FFA500",
    marginRight: 50,
  },
  bookingHistoryScreen__price: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#000",
  },
  bookingHistoryScreen__actionButtons: {
    justifyContent: "space-between",
    alignItems: "flex-end",
  },
  bookingHistoryScreen__infoButton: {
    backgroundColor: "#00A1D6", // Màu trung bình giữa #007AFF và #00C4B4
    borderRadius: 8,
    paddingVertical: 5,
    paddingHorizontal: 20,
    backgroundColor: "#00F598",
  },
  bookingHistoryScreen__infoButtonText: {
    fontSize: 14,
    color: "#FFFFFF",
    fontWeight: "400",
  },
  bookingHistoryScreen__rebookButton: {
    backgroundColor: "red", // Màu trung bình giữa #007AFF và #00C4B4
    borderRadius: 8,
    paddingVertical: 5,
    paddingHorizontal: 10,
    backgroundColor: "#00C4B4",
  },
  bookingHistoryScreen__rebookButtonText: {
    fontSize: 14,
    color: "#FFFFFF",
    fontWeight: "400",
  },
  header__tabs: {
    flexDirection: "row",
    justifyContent: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
  },
  header__tab: {
    paddingVertical: 5,
    borderWidth: 1,
    borderColor: "#0090FF",
    paddingHorizontal: 30,
  },
  header__tab__1: {
    borderTopLeftRadius: 15,
    borderBottomLeftRadius: 15,
  },

  header__tab__3: {
    borderTopRightRadius: 15,
    borderBottomRightRadius: 15,
  },
  header__tab__text: {
    fontSize: 14,
    color: "#007AFF",
  },
  active: {
    backgroundColor: "#0090FF",
  },
  activeText: {
    color: "white",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    paddingHorizontal: 20,
  },
  emptyText: {
    fontSize: 16,
    color: "#888888",
    textAlign: "center",
    marginTop: 20,
  },
});


src\Pages\Booking\RoomCheckedOut.js
import React from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Image,
  TouchableOpacity,
  FlatList,
} from "react-native";
import { Ionicons } from "@expo/vector-icons"; // Dùng icon từ Expo
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";
import PriceScreen from "../Hotels/PriceScreen";
import { useState } from "react";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import { formatPrice } from "../../Utils/formarPrice";
import { getBookingDetails } from "../../Redux/Slice/bookingSlice";

const RoomCheckedOut = ({ navigation }) => {
  const dispatch = useAppDispatch();
  const { accessToken, isLoggedIn } = useAppSelector((state) => state.auth);
  // if (!accessToken && !isLoggedIn) {
  //   return (
  //     <View style={styles.RequireLogin}>
  //       <Text style={styles.RequireLoginText}>
  //         Bạn cần đăng nhập để xem tính năng này
  //       </Text>
  //     </View>
  //   );
  // }

  const { bookingStatus, loadingBookingStatus } = useAppSelector(
    (state) => state.hotel
  );
  const bookings = bookingStatus?.CHECKOUT || [];
  if (!bookings) {
    return (
      <View>
        <Text>Loading checkin....</Text>
      </View>
    );
  }

  const handleReviewHotel = (item) => {
    console.log(item);
    navigation.navigate("RateApp", { item: item });
  };
  const handleToBookingDetail = (item) => {
    // console.log("item.bookingId", item.bookingId);
    dispatch(getBookingDetails(item.bookingId));
    navigation.navigate("BookingHistoryDetails", { type: "CheckedOut" });
  };
  const renderBookingItem = ({ item }) => (
    <TouchableOpacity
      onPress={() => handleToBookingDetail(item)}
      style={styles.bookingHistoryScreen__bookingItem}
    >
      <Image
        source={{ uri: item?.image }}
        style={styles.bookingHistoryScreen__bookingImage}
      />
      <View style={styles.bookingHistoryScreen__bookingDetails}>
        <Text style={styles.bookingHistoryScreen__bookingName}>
          {item?.hotelName}
        </Text>
        <View style={styles.bookingHistoryScreen__ratingRow}>
          <Ionicons name="star" size={16} color="#FFD700" />
          <Text style={styles.bookingHistoryScreen__ratingText}>
            {item?.rating} Đánh giá ({item?.feedbackSum})
          </Text>
        </View>
        <Text style={styles.bookingHistoryScreen__date}>
          Đã đặt: {item?.bookingDate}
        </Text>
        <View style={styles.bookingHistoryScreen__priceRow}>
          <Text style={styles.bookingHistoryScreen__price}>
            {formatPrice(item?.bookingPrice)}
          </Text>
        </View>
      </View>
      <View style={styles.bookingHistoryScreen__actionButtons}>
        <TouchableOpacity
          style={styles.bookingHistoryScreen__rebookButton}
          onPress={() => handleReviewHotel(item)}
        >
          <Text style={styles.bookingHistoryScreen__rebookButtonText}>
            Đánh giá
          </Text>
        </TouchableOpacity>
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.bookingHistoryScreen}>
      {bookings.length > 0 ? (
        <FlatList
          data={bookings}
          renderItem={renderBookingItem}
          keyExtractor={(item) => item.bookingId.toString()} // Đảm bảo key là string
          style={styles.bookingHistoryScreen__bookingList}
        />
      ) : (
        <View style={styles.emptyContainer}>
          <Ionicons name="close-circle-outline" size={50} color="#888888" />
          <Text style={styles.emptyText}>Bạn chưa có phòng đã trả</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  bookingHistoryScreen: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    //     paddingTop: 40, // Khoảng cách từ thanh trạng thái
    //     paddingHorizontal: 15,
  },
  bookingHistoryScreen__title: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 15,
  },
  bookingHistoryScreen__searchBar: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "white",
    borderRadius: 12,
    paddingHorizontal: 15,

    height: 40,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: "#d3d3d3",
  },
  bookingHistoryScreen__searchIcon: {
    marginRight: 10,
  },
  bookingHistoryScreen__searchInput: {
    flex: 1,
    fontSize: 16,
    color: "#000",
    padding: 0,
  },
  bookingHistoryScreen__clearIcon: {
    marginLeft: 10,
  },
  bookingHistoryScreen__filterTabs: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 20,
  },
  bookingHistoryScreen__filterTab: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 20,
    //     paddingVertical: 10,
    alignItems: "center",
    marginHorizontal: 5,
  },
  bookingHistoryScreen__filterTab__active: {
    backgroundColor: "#007AFF",
    borderColor: "#007AFF",
  },
  bookingHistoryScreen__filterTabText: {
    fontSize: 16,
    color: "#333",
  },
  bookingHistoryScreen__filterTabText__active: {
    color: "#FFFFFF",
  },
  bookingHistoryScreen__bookingList: {
    flex: 1,
  },
  bookingHistoryScreen__bookingItem: {
    flexDirection: "row",
    marginBottom: 20,
    //     justifyContent: "flex-end",
    alignItems: "flex-end",
    //     backgroundColor: "red",
  },
  bookingHistoryScreen__bookingImage: {
    width: 90,
    height: 90,
    borderRadius: 10,
    marginRight: 15,
  },
  bookingHistoryScreen__bookingDetails: {
    flex: 1,
  },
  bookingHistoryScreen__bookingName: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 5,
  },
  bookingHistoryScreen__ratingRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 5,
  },
  bookingHistoryScreen__ratingText: {
    fontSize: 14,
    color: "#333",
    marginLeft: 5,
  },
  bookingHistoryScreen__date: {
    fontSize: 14,
    color: "#333",
    marginBottom: 5,
    fontWeight: "bold",
  },
  bookingHistoryScreen__priceRow: {
    flexDirection: "row",
    alignItems: "center",
  },
  bookingHistoryScreen__discount: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#FFA500",
    marginRight: 50,
  },
  bookingHistoryScreen__price: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#000",
  },
  bookingHistoryScreen__actionButtons: {
    justifyContent: "space-between",
    alignItems: "flex-end",
  },
  bookingHistoryScreen__infoButton: {
    backgroundColor: "#00F598", // Màu trung bình giữa #007AFF và #00C4B4
    borderRadius: 8,
    paddingVertical: 5,
    paddingHorizontal: 20,
    backgroundColor: "#00F598",
  },
  bookingHistoryScreen__infoButtonText: {
    fontSize: 14,
    color: "#FFFFFF",
    fontWeight: "400",
  },
  bookingHistoryScreen__rebookButton: {
    // backgroundColor: "#00F598", // Màu trung bình giữa #007AFF và #00C4B4
    borderRadius: 8,
    paddingVertical: 5,
    paddingHorizontal: 30,
    backgroundColor: "#00F598",
  },
  bookingHistoryScreen__rebookButtonText: {
    fontSize: 14,
    color: "#FFFFFF",
    fontWeight: "400",
  },
  header__tabs: {
    flexDirection: "row",
    justifyContent: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
  },
  header__tab: {
    paddingVertical: 5,
    borderWidth: 1,
    borderColor: "#0090FF",
    paddingHorizontal: 30,
  },
  header__tab__1: {
    borderTopLeftRadius: 15,
    borderBottomLeftRadius: 15,
  },

  header__tab__3: {
    borderTopRightRadius: 15,
    borderBottomRightRadius: 15,
  },
  header__tab__text: {
    fontSize: 14,
    color: "#007AFF",
  },
  active: {
    backgroundColor: "#0090FF",
  },
  activeText: {
    color: "white",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    paddingHorizontal: 20,
  },
  emptyText: {
    fontSize: 16,
    color: "#888888",
    textAlign: "center",
    marginTop: 20,
  },
});

export default RoomCheckedOut;


src\Pages\Foods\FoodCart.js
import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  FlatList,
  TextInput,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useAppSelector, useAppDispatch } from "../../Redux/hook";
import { addServiceToRoom } from "../../Redux/Slice/hotelSlice";
import { fetchCart } from "../../Redux/Slice/serviceSlice";
import { convertToCartItems } from "../../Utils/convertToCartItems";

const ShopCart = ({ navigation, route }) => {
  const dispatch = useAppDispatch();
  const { cart, loadingService, error } = useAppSelector(
    (state) => state.service
  );
  const { bookingPayload, navigateFoodCart } = useAppSelector(
    (state) => state.hotel
  );
  const [serviceQuantities, setServiceQuantities] = useState([]);
  const [expandedServices, setExpandedServices] = useState({});
  const roomMapping = route.params?.roomMapping || {};

  useEffect(() => {
    if (bookingPayload?.roomRequestList) {
      const initialQuantities = bookingPayload.roomRequestList
        .filter((room) => room.serviceList && room.serviceList.length > 0)
        .map((room) => ({
          uniqueId: room.uniqueId,
          serviceIds: room.serviceList.map((service) => ({
            id: service.id,
            quantity: service.quantity,
            time: service.time || "",
            note: service.note || "",
          })),
        }));
      setServiceQuantities(initialQuantities);
    }
  }, [bookingPayload]);
  // Xử lý tăng số lượng
  const handleAdd = (serviceId, uniqueId) => {
    if (!uniqueId) return;

    setServiceQuantities((prev) => {
      const existRoom = prev.find((r) => r.uniqueId === uniqueId);
      if (existRoom) {
        const existService = existRoom.serviceIds.find(
          (s) => s.id === serviceId
        );
        if (existService) {
          return prev.map((r) =>
            r.uniqueId === uniqueId
              ? {
                  ...r,
                  serviceIds: r.serviceIds.map((s) =>
                    s.id === serviceId ? { ...s, quantity: s.quantity + 1 } : s
                  ),
                }
              : r
          );
        }
        return prev.map((r) =>
          r.uniqueId === uniqueId
            ? {
                ...r,
                serviceIds: [
                  ...r.serviceIds,
                  { id: serviceId, quantity: 1, time: "", note: "" },
                ],
              }
            : r
        );
      }
      return [
        ...prev,
        {
          uniqueId,
          serviceIds: [{ id: serviceId, quantity: 1, time: "", note: "" }],
        },
      ];
    });
  };

  // Xử lý giảm số lượng
  const handleDecreaseQuantity = (serviceId, uniqueId) => {
    if (!uniqueId) return;

    setServiceQuantities((prev) => {
      return prev
        .map((r) =>
          r.uniqueId === uniqueId
            ? {
                ...r,
                serviceIds: r.serviceIds
                  .map((s) =>
                    s.id === serviceId && s.quantity > 0
                      ? { ...s, quantity: s.quantity - 1 }
                      : s
                  )
                  .filter((s) => s.quantity > 0),
              }
            : r
        )
        .filter((r) => r.serviceIds.length > 0);
    });
  };

  const handleUpdateNote = (serviceId, uniqueId, newNote) => {
    if (!uniqueId) return;

    setServiceQuantities((prev) => {
      const existRoom = prev.find((r) => r.uniqueId === uniqueId);
      if (existRoom) {
        const existService = existRoom.serviceIds.find(
          (s) => s.id === serviceId
        );
        if (existService) {
          return prev.map((r) =>
            r.uniqueId === uniqueId
              ? {
                  ...r,
                  serviceIds: r.serviceIds.map((s) =>
                    s.id === serviceId ? { ...s, note: newNote } : s
                  ),
                }
              : r
          );
        }
        return prev.map((r) =>
          r.uniqueId === uniqueId
            ? {
                ...r,
                serviceIds: [
                  ...r.serviceIds,
                  { id: serviceId, quantity: 0, time: "", note: newNote },
                ],
              }
            : r
        );
      }
      return [
        ...prev,
        {
          uniqueId,
          serviceIds: [{ id: serviceId, quantity: 0, time: "", note: newNote }],
        },
      ];
    });
  };

  // Xử lý xác nhận cho dịch vụ
  const handleConfirmService = () => {
    dispatch(addServiceToRoom(serviceQuantities));

    setExpandedServices([]);
  };

  // Xử lý xác nhận toàn bộ (thanh toán)

  console.log(">>>>>>> 150 ", serviceQuantities);

  const handleConfirmOrder = () => {
    dispatch(addServiceToRoom(serviceQuantities));

    setExpandedServices([]);
    console.log(navigateFoodCart);
    const targetScreen =
      navigateFoodCart === "InfoConfirm" ? "InfoConfirm" : "OrderConfirm";
    navigation.navigate(`${targetScreen}`);
  };

  // Toggle mở rộng/thu gọn dịch vụ
  const toggleExpandService = (serviceId) => {
    setExpandedServices((prev) => ({
      ...prev,
      [serviceId]: !prev[serviceId],
    }));
  };

  // Tính giá tạm thời
  const calculateTempPrices = () => {
    const tempPriceServiceList = serviceQuantities.reduce((acc, room) => {
      room.serviceIds.forEach((service) => {
        const cartService = cart?.serviceBookingList?.find(
          (s) => s.serviceId === service.id
        );
        const priceService = cart?.priceServiceList?.find(
          (p) => p.serviceName === cartService?.serviceName
        );
        if (priceService) {
          const existing = acc.find(
            (p) => p.serviceName === priceService.serviceName
          );
          if (existing) {
            existing.totalQuantity += service.quantity;
            existing.totalPrice = existing.price * existing.totalQuantity;
          } else {
            acc.push({
              serviceName: priceService.serviceName,
              price: priceService.price,
              totalQuantity: service.quantity,
              totalPrice: priceService.price * service.quantity,
            });
          }
        }
      });
      return acc;
    }, []);

    const tempTotalPrice = tempPriceServiceList.reduce(
      (sum, item) => sum + item.totalPrice,
      0
    );

    return { tempPriceServiceList, tempTotalPrice };
  };

  const { tempPriceServiceList, tempTotalPrice } = calculateTempPrices();

  const renderRoomItem = ({ item: room }, serviceId) => {
    if (!room.uniqueId) {
      console.warn(
        `Skipping render room with no uniqueId: ${JSON.stringify(room)}`
      );
      return null;
    }

    const uniqueId = room.uniqueId;
    const roomQuantities = serviceQuantities.find(
      (q) => q.uniqueId === uniqueId
    );
    const service = roomQuantities?.serviceIds.find((s) => s.id === serviceId);
    const quantity = service?.quantity || 0;
    const time = service?.time || "";
    const note = service?.note || "";

    return (
      <View style={styles.roomWrapper}>
        {/* Phòng */}
        <View style={styles.roomInfo}>
          <Text style={styles.roomLabel}>Phòng</Text>
          <Text style={styles.roomValue}>{room?.roomName}</Text>
        </View>
        {/* Số lượng */}
        <View style={styles.roomInfo}>
          <Text style={styles.roomLabel}>Số lượng</Text>
          <View style={styles.quantityContainer}>
            <TouchableOpacity
              style={[
                styles.quantityButton,
                quantity === 0 && styles.quantityButtonDisabled,
              ]}
              onPress={() => handleDecreaseQuantity(serviceId, uniqueId)}
              disabled={quantity === 0}
            >
              <Text style={styles.quantityButtonText}>−</Text>
            </TouchableOpacity>
            <Text style={styles.quantityText}>{quantity}</Text>
            <TouchableOpacity
              style={styles.quantityButton}
              onPress={() => handleAdd(serviceId, uniqueId)}
            >
              <Text style={styles.quantityButtonText}>+</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    );
  };

  // Render dịch vụ
  const renderServiceItem = ({ item }) => {
    if (!item?.serviceId) return null;

    return (
      <View style={styles.serviceItemContainer}>
        <View style={styles.serviceItem}>
          <Text style={styles.serviceName}>
            {item.serviceName || "Dịch vụ không xác định"}
          </Text>
          <TouchableOpacity
            style={styles.toggleButton}
            onPress={() => toggleExpandService(item.serviceId)}
          >
            <Text style={styles.toggleButtonText}>
              {expandedServices[item.serviceId] ? "Thu gọn" : "Thêm"}
            </Text>
          </TouchableOpacity>
        </View>
        {expandedServices[item.serviceId] && (
          <View>
            <FlatList
              data={item.bookingRoomResponseList || []}
              renderItem={(props) => renderRoomItem(props, item.serviceId)}
              keyExtractor={(room) =>
                `room_${room.uniqueId || room.roomId}_${item.serviceId}`
              }
              style={styles.roomList}
              showsVerticalScrollIndicator={false}
            />
            {/* <TouchableOpacity
              style={styles.confirmServiceButton}
              onPress={() => handleConfirmService(item.serviceId)}
            >
              <Text style={styles.confirmServiceButtonText}>Xác nhận</Text>
            </TouchableOpacity> */}
          </View>
        )}
      </View>
    );
  };

  // Render giá
  const renderPriceItem = ({ item }) => (
    <View style={styles.priceItem}>
      <Text style={styles.priceServiceName}>{item.serviceName}</Text>
      <Text style={styles.priceText}>
        {item.price.toLocaleString()} VNĐ x {item.totalQuantity} ={" "}
        {item.totalPrice.toLocaleString()} VNĐ
      </Text>
    </View>
  );

  // Xử lý loading và lỗi
  if (loadingService) {
    return (
      <View style={styles.container}>
        <Text>Loading...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text>Error: {error}</Text>
        <TouchableOpacity
          style={styles.retryButton}
          onPress={() => {
            const roomRequestList = bookingPayload?.roomRequestList || [];
            const { cartItems } = convertToCartItems(roomRequestList);
            dispatch(fetchCart({ cartItems, roomMapping }));
          }}
        >
          <Text style={styles.retryButtonText}>Thử lại</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <FlatList
        data={cart?.serviceBookingList || []}
        renderItem={renderServiceItem}
        keyExtractor={(item) => `service_${item.serviceId}`}
        style={styles.serviceList}
        showsVerticalScrollIndicator={false}
      />

      {/* Danh sách giá */}
      <View style={styles.priceSection}>
        <Text style={styles.priceSectionTitle}>Chi tiết giá</Text>
        <FlatList
          data={tempPriceServiceList.length > 0 ? tempPriceServiceList : 0}
          renderItem={renderPriceItem}
          keyExtractor={(item) => `price_${item.serviceName}`}
          style={styles.priceList}
          showsVerticalScrollIndicator={false}
        />
        <View style={styles.totalPrice}>
          <Text style={styles.totalPriceLabel}>Tổng tiền:</Text>
          <Text style={styles.totalPriceValue}>
            {(tempPriceServiceList.length > 0
              ? tempTotalPrice
              : 0
            ).toLocaleString()}{" "}
            VNĐ
          </Text>
        </View>
      </View>

      {/* Nút thanh toán */}
      <View style={styles.groupButton}>
        <TouchableOpacity
          style={styles.proceedButton}
          onPress={() => handleConfirmService()}
        >
          <Text style={styles.proceedButtonText}>Xác nhận</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.proceedButton}
          onPress={handleConfirmOrder}
        >
          <Text style={styles.proceedButtonText}>Thanh Toán</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};
export default ShopCart;
// sau khi OF đặt số lượng , FC giảm số lượng về 0 rồi lại đặt , OF lại đặt thì bị lỗi hiển thị
// Styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    paddingHorizontal: 15,
    flexDirection: "column",
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginLeft: 10,
  },
  serviceList: {
    flexGrow: 0,
    paddingVertical: 10,
    // minHeight: "450",
    // maxHeight: "450",
  },
  serviceItemContainer: {
    marginBottom: 15,
  },
  serviceItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 10,
    backgroundColor: "#F5F7FA",
    borderRadius: 10,
  },
  serviceName: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
  toggleButton: {
    backgroundColor: "#00F598",
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderRadius: 5,
  },
  toggleButtonText: {
    color: "#fff",
    fontSize: 14,
    fontWeight: "bold",
  },
  roomList: {
    marginTop: 10,
    padding: 10,
    backgroundColor: "#F5F7FA",
    borderRadius: 10,
  },
  roomWrapper: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
  },
  roomInfo: {
    flex: 1,
    alignItems: "center",
  },
  roomLabel: {
    fontSize: 12,
    color: "#666",
  },
  roomValue: {
    fontSize: 14,
    fontWeight: "bold",
    marginTop: 5,
  },
  quantityContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  quantityButton: {
    width: 30,
    height: 30,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#00F598",
    borderRadius: 15,
  },
  quantityButtonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#fff",
  },
  quantityText: {
    marginHorizontal: 10,
    fontSize: 16,
    fontWeight: "bold",
  },
  confirmServiceButton: {
    backgroundColor: "#28A745",
    paddingVertical: 10,
    borderRadius: 5,
    alignItems: "center",
    marginTop: 10,
    marginHorizontal: 10,
  },
  confirmServiceButtonText: {
    color: "#fff",
    fontSize: 14,
    fontWeight: "bold",
  },
  priceSection: {
    marginTop: "auto",
    padding: 15,
    backgroundColor: "#F5F7FA",
    borderRadius: 10,
  },
  priceSectionTitle: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 10,
    color: "#333",
  },
  priceList: {
    marginBottom: 10,
  },
  priceItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingVertical: 8,
  },
  priceServiceName: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#333",
  },
  priceText: {
    fontSize: 14,
    color: "#666",
  },
  totalPrice: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingTop: 10,
    borderTopWidth: 1,
    borderTopColor: "#eee",
  },
  totalPriceLabel: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
  totalPriceValue: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#00F598",
  },
  proceedButton: {
    backgroundColor: "#00F598",
    paddingVertical: 10,
    borderRadius: 10,
    alignItems: "center",
    marginVertical: 15,
    width: "49.5%",
  },
  proceedButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "400",
  },
  retryButton: {
    marginTop: 10,
    backgroundColor: "#00F598",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 5,
  },
  retryButtonText: {
    color: "#fff",
    fontSize: 14,
    fontWeight: "bold",
  },
  groupButton: {
    // marginTop: "auto",
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  roomInfo: {
    flex: 1,
    alignItems: "center",
    marginHorizontal: 5,
  },
  roomLabel: {
    fontSize: 12,
    color: "#666",
    marginBottom: 5,
  },
  roomValue: {
    fontSize: 14,
    fontWeight: "bold",
  },
  input: {
    width: "100%",
    height: 30,
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 5,
    paddingHorizontal: 8,
    fontSize: 14,
    color: "#333",
    backgroundColor: "#fff",
  },
});

src\Pages\Foods\FoodDetails.js
import React from "react";
import {
  View,
  Text,
  Image,
  StyleSheet,
  TouchableOpacity,
  ImageBackground,
  BackHandler,
} from "react-native";

import { Ionicons } from "@expo/vector-icons"; // Để hiển thị icon ngôi sao (rating)
import { useEffect } from "react";
const FoodDetails = ({ navigation }) => {
  const handleToOrderFood = () => {
    navigation.navigate("OrderFood");
  };

  const handleToFoodCart = () => {
    navigation.navigate("FoodCart");
  };

  // useEffect(() => {
  //   const actionBack = () => {
  //     navigation.navigate("OrderFood");
  //     return true;
  //   };

  //   const backHanlder = BackHandler.addEventListener(
  //     "hardwareBackPress",
  //     actionBack
  //   );

  //   return () => backHanlder.remove();
  // }, []);
  return (
    <View style={styles.container}>
      {/* Hình ảnh món ăn */}
      <ImageBackground
        source={{
          uri: "https://media.istockphoto.com/id/2061716709/fr/photo/burger-de-c%C3%B4tes-grill%C3%A9es.webp?a=1&b=1&s=612x612&w=0&k=20&c=PvlYSm7Q_q7ro2i7tMJ4lnjELvPeBKnWIyzvOObmkEQ=",
        }}
        style={styles.foodImage}
      >
        <Ionicons
          style={styles.iconChevron}
          name="chevron-back-outline"
          size={40}
          color="white"
          onPress={() => handleToOrderFood()}
        />
      </ImageBackground>

      {/* Tiêu đề và đánh giá */}
      <View style={styles.header}>
        <View>
          <Text style={styles.foodName}>Hamburger</Text>
        </View>
        <View style={styles.ratingContainer}>
          <Ionicons name="star" size={16} color="#FFD700" />
          <Text style={styles.ratingText}>3.9</Text>
          <Text style={styles.reviewCount}>Đánh giá (200)</Text>
        </View>
      </View>
      {/* Mô tả món ăn */}
      <Text style={styles.description}>
        Một chiếc bánh vòng hạt anh túc được chế biến hoàn hảo, kèm phô mai, mứt
        tây và dưa chua. Sau đó, một lớp thịt được thêm vào, kèm theo một lát cà
        chua, hai nửa lát tây và hai nửa lát pastrami. Hoàn thiện món ăn này chỉ
        mất năm phút và chứa chưa đến 400 calo.
      </Text>
      {/* Giá tiền */}
      <Text style={styles.price}>Giá: 15.000Đ</Text>
      {/* Nút Thêm vào giỏ */}
      <TouchableOpacity
        style={styles.addButton}
        onPress={() => handleToFoodCart()}
      >
        <View style={styles.positionButton}>
          <Text style={styles.addButtonText}>THÊM VÀO GIỎ</Text>
        </View>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "column",
    justifyContent: "flex-start",
    alignItems: "flex-start",
    backgroundColor: "#fff",
    // borderRadius: 10,
    // padding: 15,
    // marginVertical: 10,
    // marginHorizontal: 15,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    // elevation: 3, // Hiệu ứng bóng cho Android
  },
  foodImage: {
    width: "100%",
    height: 250,
    borderRadius: 10,
    marginBottom: 10,
    position: "relative",
  },
  iconChevron: {
    position: "absolute",
    top: 20,
    left: 20,
  },
  header: {
    flexDirection: "column",
    justifyContent: "space-between",
    alignItems: "flex-start",
    marginBottom: 10,
    // paddingVertical: 10,
    paddingHorizontal: 10,
  },
  foodName: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#000",
    marginBottom: 10,
  },
  ratingContainer: {
    flexDirection: "row",
    marginBottom: 10,
  },
  ratingText: {
    fontSize: 14,
    color: "#FFD700",
    marginLeft: 5,
    marginRight: 5,
  },
  reviewCount: {
    fontSize: 14,
    color: "#666",
    marginLeft: 20,
  },
  description: {
    fontSize: 14,
    color: "#666",
    lineHeight: 25,
    marginBottom: 10,
    paddingHorizontal: 10,
  },
  price: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#000",
    marginBottom: 15,
    paddingHorizontal: 10,
  },
  addButton: {
    marginTop: "auto",
    width: "100%",
    justifyContent: "center",
    alignItems: "center",
  },
  positionButton: {
    width: "95%",
    backgroundColor: "#00F598", // Màu xanh lam gradient
    paddingVertical: 10,
    borderRadius: 10,
    alignItems: "center",
  },
  addButtonText: {
    fontSize: 16,
    color: "#fff",
    fontWeight: "400",
  },
});

export default FoodDetails;

src\Pages\Foods\OrderFood.js
import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  FlatList,
  Image,
  TouchableOpacity,
  SafeAreaView,
  TextInput,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { useAppSelector, useAppDispatch } from "../../Redux/hook";
import { addServiceToRoom } from "../../Redux/Slice/hotelSlice";
import { convertToCartItems } from "../../Utils/convertToCartItems";
import { fetchCart } from "../../Redux/Slice/serviceSlice";
import getServiceIconOrderFood from "../../Components/Icon/getServiceIconOrderFood";

const OrderFood = ({ navigation, route }) => {
  const [selectedCategory, setSelectedCategory] = useState({
    id: 0,
    type: "",
  });

  useEffect(() => {
    if (categories) {
      setSelectedCategory({
        id: categories[0]?.id,
        type: categories[0]?.name,
      });
    }
  }, [categories]);
  const dispatch = useAppDispatch();

  const [expandedServices, setExpandedServices] = useState({});
  const [serviceQuantities, setServiceQuantities] = useState([]);
  // Dạng: [{ uniqueId: "room1_1", serviceIds: [{ id: 1, quantity: 2, time: "", note: "" }, ...] }, ...]

  const { serviceList, loadingService, categories } = useAppSelector(
    (state) => state.service
  );
  const { bookingPayload } = useAppSelector((state) => state.hotel);
  const listRoom = bookingPayload?.roomRequestList;
  console.log(bookingPayload.roomRequestList);
  console.log(bookingPayload);
  // const categories = Object.keys(serviceList).map((key, index) => ({
  //   id: index + 1,
  //   name: key,
  // }));
  const foodItems = serviceList[`${selectedCategory?.type}`] || [];
  console.log(">>>>>>>>>>> 50 ", serviceQuantities);
  // Khởi tạo serviceQuantities từ bookingPayload khi vào màn hình
  useEffect(() => {
    if (bookingPayload?.roomRequestList) {
      const initialQuantities = bookingPayload.roomRequestList
        .filter((room) => room.serviceList && room.serviceList.length > 0)
        .map((room) => ({
          uniqueId: room.uniqueId,
          serviceIds: room.serviceList.map((service) => ({
            id: service?.id,
            quantity: service.quantity,
            time: service.time || "",
            note: service.note || "",
          })),
        }));
      setServiceQuantities(initialQuantities);
    }
  }, [bookingPayload]);

  const handleToFoodDetails = () => {
    navigation.navigate("FoodDetails");
  };

  const handleBack = () => {
    if (route?.params?.prePage === "OrderConfirm") {
      navigation.navigate("OrderConfirm");
    } else {
      navigation.goBack();
    }
  };

  const handleToggleRoomList = (serviceId) => {
    setExpandedServices((prev) => ({
      ...prev,
      [serviceId]: !prev[serviceId],
    }));
  };
  //  { uniqueId: "room2_1", serviceIds: [{ id: 1, quantity: 2, time: "", note: "" }] }
  // TH1 serviceQuantities [{ uniqueId: "room1_1", serviceIds: [{ id: 1, quantity: 2, time: "", note: "" }] }
  // TH2 ,{ uniqueId: "room2_1", serviceIds: [] }
  // TH3 ,{ uniqueId: "room2_1", serviceIds: [{ id: 1, quantity: 2, time: "", note: "" }] }]

  const printServiceQuantities = (serviceQuantities) => {
    if (!serviceQuantities || serviceQuantities.length === 0) {
      console.log("serviceQuantities is empty or undefined");
      return;
    }

    console.log("=== serviceQuantities ===");
    serviceQuantities.forEach((room, roomIndex) => {
      console.log(`Room ${roomIndex + 1} (uniqueId: ${room.uniqueId}):`);

      if (!room.serviceIds || room.serviceIds.length === 0) {
        console.log("  No services available");
      } else {
        room.serviceIds.forEach((service, serviceIndex) => {
          console.log(
            `  Service ${serviceIndex + 1}: id=${service?.id}, quantity=${
              service.quantity
            }, time="${service.time}", note="${service.note}"`
          );
        });
      }
      console.log(
        "---------------------------------------------------------------------------------"
      );
    });
  };

  // printServiceQuantities(serviceQuantities);
  // Xử lý thêm dịch vụ với time và note mặc định
  const handleAdd = (uniqueId, serviceId) => {
    setServiceQuantities((prev) => {
      const existRoom = prev.find((r) => r.uniqueId === uniqueId);
      if (existRoom) {
        const existService = existRoom.serviceIds.find(
          (s) => s?.id === serviceId
        );
        if (existService) {
          return prev.map((r) =>
            r.uniqueId === uniqueId
              ? {
                  ...r,
                  serviceIds: r.serviceIds.map((s) =>
                    s?.id === serviceId ? { ...s, quantity: s.quantity + 1 } : s
                  ),
                }
              : r
          );
        }
        return prev.map((r) =>
          r.uniqueId === uniqueId
            ? {
                ...r,
                serviceIds: [
                  ...r.serviceIds,
                  { id: serviceId, quantity: 1, time: "", note: "" },
                ],
              }
            : r
        );
      }
      return [
        ...prev,
        {
          uniqueId: uniqueId,
          serviceIds: [{ id: serviceId, quantity: 1, time: "", note: "" }],
        },
      ];
    });
  };

  // khi giảm đến 0 thì logic nhảy lên số lớn nhất vì lucs đó serviceQUantities ko còn quản lí nũa mà bị BookingPayload quản lí
  const handleDecreaseQuantity = (uniqueId, serviceId) => {
    setServiceQuantities((prev) => {
      const existingRoom = prev.find((item) => item.uniqueId === uniqueId);
      if (existingRoom) {
        const existingService = existingRoom.serviceIds.find(
          (s) => s?.id === serviceId
        );
        if (existingService) {
          if (existingService.quantity <= 1) {
            // Xóa dịch vụ nếu quantity về 0
            const updatedServiceIds = existingRoom.serviceIds.filter(
              (s) => s?.id !== serviceId
            );
            if (updatedServiceIds.length === 0) {
              // Xóa phòng nếu không còn dịch vụ
              console.log(
                `Xóa phòng ${uniqueId} khỏi serviceQuantities vì không còn dịch vụ`
              );
              return prev.filter((item) => item.uniqueId !== uniqueId);
            }
            console.log(
              `Xóa dịch vụ ${serviceId} khỏi phòng ${uniqueId}, còn lại: `,
              updatedServiceIds
            );
            return prev.map((item) =>
              item.uniqueId === uniqueId
                ? { ...item, serviceIds: updatedServiceIds }
                : item
            );
          }
          // Giảm quantity
          console.log(
            `Giảm số lượng dịch vụ ${serviceId} trong phòng ${uniqueId} từ ${
              existingService.quantity
            } xuống ${existingService.quantity - 1}`
          );
          return prev.map((item) =>
            item.uniqueId === uniqueId
              ? {
                  ...item,
                  serviceIds: item.serviceIds.map((s) =>
                    s?.id === serviceId ? { ...s, quantity: s.quantity - 1 } : s
                  ),
                }
              : item
          );
        }
      }
      console.log(`Không tìm thấy phòng ${uniqueId} hoặc dịch vụ ${serviceId}`);
      return prev;
    });
  };

  // Xử lý cập nhật time và note
  // const handleUpdateServiceDetails = (uniqueId, serviceId, field, value) => {
  //   setServiceQuantities((prev) =>
  //     prev.map((item) =>
  //       item.uniqueId === uniqueId
  //         ? {
  //             ...item,
  //             serviceIds: item.serviceIds.map((s) =>
  //               s.id === serviceId ? { ...s, [field]: value } : s
  //             ),
  //           }
  //         : item
  //     )
  //   );
  // };

  // Xử lý xác nhận đơn hàng
  const handleConfirmOrder = () => {
    dispatch(addServiceToRoom(serviceQuantities));
    setServiceQuantities([]);
    setExpandedServices({});
  };

  const handleShopCart = () => {
    if (bookingPayload?.roomRequestList) {
      const { cartItems, roomMapping } = convertToCartItems(
        bookingPayload.roomRequestList
      );
      console.log(">>> 282 >>>", cartItems);

      dispatch(fetchCart({ cartItems, roomMapping }));
      navigation.navigate("FoodCart", { roomMapping });
    }
  };

  const imageTest =
    "https://images.unsplash.com/photo-1568901346375-23c9450c58cd?q=80&w=1000&auto=format&fit=crop";

  // nếu bây giờ khởi tạo giá trị cho quantities bằng bookingPayload

  // ban đầu bookingPayload = 0 thì quantiteis cũng = 0 nếu tăng quan tities thì bookingPayload chưa cập nhật,
  // chỉ cập nhật quantities ,sau khi ấn xác nhận thì cập nhật bookingPayload

  // khi mở lại  lại quantities vẫn đúng vì lấy giá trị của bookingPayload

  // trong renderRoomItem chỉ lấy giá trị của

  // Render phòng
  const renderRoomItem = ({ item }, serviceId) => {
    const roomQuantities = serviceQuantities.find(
      (q) => q.uniqueId === item.uniqueId
    );
    const service = roomQuantities?.serviceIds.find((s) => s?.id === serviceId);

    // Lấy số lượng từ serviceQuantities, nếu không có thì lấy từ bookingPayload
    let quantity = service?.quantity || 0;
    let time = service?.time || "";
    let note = service?.note || "";

    console.log(item);
    return (
      <View style={styles.roomWrapper}>
        <View style={styles.roomInfo}>
          <Text style={styles.roomLabel}>Tên Phòng</Text>
          <Text style={styles.roomValue}>{item.roomName}</Text>
        </View>
        <View style={styles.roomInfo}>
          <Text style={styles.roomLabel}>Số lượng</Text>
          <View style={styles.quantityContainer}>
            <TouchableOpacity
              style={styles.quantityButton}
              onPress={() => handleDecreaseQuantity(item.uniqueId, serviceId)}
            >
              <Text style={styles.quantityButtonText}>-</Text>
            </TouchableOpacity>
            <Text style={styles.quantityText}>{quantity}</Text>
            <TouchableOpacity
              style={styles.quantityButton}
              onPress={() => handleAdd(item.uniqueId, serviceId)}
            >
              <Text style={styles.quantityButtonText}>+</Text>
            </TouchableOpacity>
          </View>
        </View>
        {/* <View style={styles.roomInfo}>
          <Text style={styles.roomLabel}>Thời gian</Text>
          <TextInput
            style={styles.input}
            placeholder="Nhập thời gian"
            value={time}
            onChangeText={(value) =>
              handleUpdateServiceDetails(
                item.uniqueId,
                serviceId,
                "time",
                value
              )
            }
          />
        </View> */}
        {/* <View style={styles.roomInfo}>
          <Text style={styles.roomLabel}>Ghi chú</Text>
          <TextInput
            style={styles.input}
            placeholder="Nhập ghi chú"
            value={note}
            onChangeText={(value) =>
              handleUpdateServiceDetails(
                item.uniqueId,
                serviceId,
                "note",
                value
              )
            }
          />
        </View> */}
      </View>
    );
  };

  const renderFoodItem = ({ item }) => {
    // Lọc listRoom dựa trên roomChoseServiceList
    const allowedRooms =
      listRoom?.filter((room) =>
        item.roomChoseServiceList?.some(
          (serviceRoom) => serviceRoom.roomId === parseInt(room.roomId)
        )
      ) || [];

    return (
      <View style={styles.foodItemContainer}>
        <TouchableOpacity
          style={styles.foodItem}
          onPress={() => handleToFoodDetails()}
        >
          <Image source={{ uri: imageTest }} style={styles.foodImage} />
          <View style={styles.foodInfo}>
            <Text style={styles.foodName}>{item.name}</Text>
            <Text style={styles.description}>{item.description}</Text>
            <View style={styles.priceContainer}>
              <Ionicons name={"cash-outline"} size={20} />
              <Text style={styles.price}>{item.price} </Text>
              <Text>VNĐ</Text>
            </View>
          </View>
          <TouchableOpacity
            style={styles.addButton}
            onPress={() => handleToggleRoomList(item?.id)}
          >
            <Text style={styles.addButtonText}>
              {expandedServices[item?.id] ? "Thu gọn" : "Thêm"}
            </Text>
          </TouchableOpacity>
        </TouchableOpacity>
        {expandedServices[item?.id] && (
          <FlatList
            data={allowedRooms}
            renderItem={(props) => renderRoomItem(props, item?.id)}
            keyExtractor={(item) => item.uniqueId}
            style={styles.roomList}
            showsVerticalScrollIndicator={false}
          />
        )}
      </View>
    );
  };
  if (loadingService) {
    return (
      <View>
        <Text>loading....</Text>
      </View>
    );
  }
  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.bodySection1}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <View style={styles.list}>
            {categories?.map((item) => (
              <TouchableOpacity
                key={item?.id}
                style={styles.item}
                onPress={() =>
                  setSelectedCategory({ id: item?.id, type: item.name })
                }
              >
                <View
                  style={[
                    styles.itemIcon,
                    selectedCategory?.id === item?.id ? styles.selectFood : "",
                  ]}
                >
                  {getServiceIconOrderFood(
                    item.name,
                    28,
                    selectedCategory?.id === item?.id ? "white" : "#B7C9D4"
                  )}
                </View>
                <Text style={styles.itemText}>{item.name}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </ScrollView>
      </View>
      <FlatList
        data={foodItems}
        renderItem={renderFoodItem}
        keyExtractor={(item) => item?.id}
        style={styles.foodList}
        showsVerticalScrollIndicator={false}
      />

      <View style={styles.footer}>
        <TouchableOpacity
          style={styles.confirmButton}
          onPress={handleConfirmOrder}
        >
          {/* <Ionicons name="checkbox-outline" size={30} color="white" /> */}
          <Text style={styles.confirmButtonText}>Xác nhận</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.cartButton} onPress={handleShopCart}>
          {/* <Ionicons name="cart-outline" size={30} color="white" /> */}

          <Text style={styles.cartButtonText}>Giỏ hàng</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginLeft: 10,
  },
  bodySection1: {
    paddingVertical: 10,
  },
  list: {
    flexDirection: "row",
    paddingHorizontal: 10,
  },
  item: {
    alignItems: "center",
    marginRight: 15,
  },
  itemIcon: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: "#F5F7FA",
    justifyContent: "center",
    alignItems: "center",
  },
  selectFood: {
    backgroundColor: "#00F598",
  },
  itemText: {
    marginTop: 5,
    fontSize: 12,
    color: "#333",
  },
  foodList: {
    flex: 1,
    paddingHorizontal: 15,
  },
  foodItemContainer: {
    marginBottom: 15,
  },
  foodItem: {
    flexDirection: "row",
    backgroundColor: "#F5F7FA",
    borderRadius: 15,
    padding: 5,
    alignItems: "center",
  },
  foodImage: {
    width: 80,
    height: 80,
    borderRadius: 10,
  },
  foodInfo: {
    flex: 1,
    marginLeft: 10,
  },
  foodName: {
    fontSize: 16,
    fontWeight: "bold",
  },
  description: {
    fontSize: 12,
    color: "#666",
    marginVertical: 5,
  },
  priceContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  price: {
    fontSize: 14,
    fontWeight: "bold",
    marginHorizontal: 5,
  },
  addButton: {
    width: "25%",
    backgroundColor: "#00F598",
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderRadius: 5,
  },
  addButtonText: {
    textAlign: "center",
    color: "#fff",
    fontSize: 14,
    fontWeight: "bold",
  },
  footer: {
    flexDirection: "row",
    justifyContent: "flex-end",
    alignItems: "center",
    padding: 15,
    borderTopWidth: 1,
    borderTopColor: "#eee",
  },
  footerCount: {
    fontSize: 14,
    color: "#333",
  },
  footerPrice: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
  cartButton: {
    backgroundColor: "#00F598",
    padding: 10,
    width: "50%",
    borderRadius: 10,
    marginLeft: "5",
    justifyContent: "center",
    alignItems: "center",
  },
  confirmButton: {
    backgroundColor: "#00F598",
    padding: 10,
    borderRadius: 10,
    width: "50%",
    justifyContent: "center",
    alignItems: "center",
  },
  roomList: {
    // maxHeight: 200,
    marginVertical: 10,
    backgroundColor: "#F5F7FA",
    borderRadius: 10,
    padding: 10,
  },
  roomWrapper: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
  },
  roomInfo: {
    flex: 1,
    alignItems: "center",
  },
  roomLabel: {
    fontSize: 12,
    color: "#666",
  },
  roomValue: {
    fontSize: 14,
    fontWeight: "bold",
    marginTop: 5,
  },
  quantityContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  quantityButton: {
    backgroundColor: "#00F598",
    width: 30,
    height: 30,
    borderRadius: 15,
    justifyContent: "center",
    alignItems: "center",
  },
  quantityButtonText: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "bold",
  },
  quantityText: {
    fontSize: 16,
    fontWeight: "bold",
    marginHorizontal: 10,
  },
  confirmButtonText: {
    color: "white",
    paddingVertical: "2",
  },
  cartButtonText: {
    color: "white",
    paddingVertical: "2",
  },
});

export default OrderFood;



src\Pages\Home\HomeScreen.js
import React, { cloneElement, useEffect, useState, useRef } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  SafeAreaView,
  Image,
  Button,
  Modal,
  Alert,
} from "react-native";
import Icon from "react-native-vector-icons/FontAwesome"; // Sử dụng FontAwesome cho icons
import { FlatList } from "react-native";
import { API_BASE_URL } from "../../Constant/Constant";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import {
  fetchAmenityList,
  fetchHotelById,
  fetchHotelByLocation,
  fetchHotelList,
  fetchLocationList,
  fetchServiceList,
  updateTempFilter,
  applyFilter,
} from "../../Redux/Slice/hotelSlice";
import ModalLocationList from "../../Components/Modal/Home/ModalLocationList";
import cloneDeep from "lodash/cloneDeep";
import { Picker } from "@react-native-picker/picker";
import ModalCheckIn from "../../Components/Modal/Home/ModalCheckIn";
import ModalCheckOut from "../../Components/Modal/Home/ModalCheckOut";
import ModalGuestsAndRooms from "../../Components/Modal/Home/ModalGuestsAndRooms";
import { skeletonLoading } from "../../Redux/Slice/hotelSlice";
import { updateFilter } from "../../Redux/Slice/hotelSlice";
import { fetchListService } from "../../Redux/Slice/serviceSlice";
import { fetchUserInfo } from "../../Redux/Slice/authSlice";
import ReusableModal from "../../Components/Modal/FlexibleModal/ReusableModal";
import ModalBookingCancelled from "../../Components/Modal/Booking/ModalBookingCancelled";
const HomeScreen = ({ navigation }) => {
  const {
    hotelHistorySearch,
    hotelList,
    locationList,
    hotelDetail,
    hotelByLocation,
    loading,
    error,
    inforFilter,
  } = useAppSelector((state) => state.hotel);

  const { infoUser } = useAppSelector((state) => state.auth);

  const [open, setOpen] = useState({
    Modal_1: false,
    Modal_CheckIn: false,
    Modal_CheckOut: false,
    Modal_GuestsAndRooms: false,
  });

  const [modalPosition, setModalPosition] = useState({
    top: 0,
    left: 0,
    width: 0,
  });

  const [modalVisible, setModalVisible] = useState(true);
  const [modalType, setModalType] = useState("error");

  const continueSearch = hotelHistorySearch;
  // const [inforFilter, setInforFilter] = useState({
  //   locationId: "0",
  //   checkin: checkinDate,
  //   checkout: checkoutDate,
  //   adults: 0,
  //   children: 0,
  //   roomNumber: 1,
  //   amenityIds: [],
  //   serviceIds: [],
  // });
  const [selectDay, setSelectDay] = useState({
    day: 4,
    month: 4,
    year: 2025,
  });

  // console.log(">>>>> 104 HomeScreen inforFilter", inforFilter);
  // console.log("----- 105 HomeScreen selectDay", selectDay);
  const dispatch = useAppDispatch();
  useEffect(() => {
    dispatch(fetchServiceList());
    dispatch(fetchAmenityList());
    dispatch(fetchHotelList());
    dispatch(fetchLocationList());
  }, [dispatch]);

  // useEffect(() => {
  //   dispatch(fetchHotelList());
  // }, [hotelHistorySearch]);

  const handleToHotelDetails = (item) => {
    const id = item?.hotelId;
    dispatch(fetchHotelById(id));
    navigation.navigate("HotelDetails", { item });
  };

  // console.log("hotelHistorySearch", hotelHistorySearch);

  const HotelRequestList = ({ item }) => {
    return (
      <TouchableOpacity
        style={styles.dealItem}
        onPress={() => handleToHotelDetails(item)}
      >
        <View style={styles.dealImage}>
          <Image
            source={{
              uri: `${item.imageUrl}`,
            }}
            style={styles.image}
          />
        </View>
        <View style={styles.dealDetails}>
          <Text style={styles.dealName}>{item.hotelName}</Text>
          <View style={styles.dealReviews}>
            <Icon
              style={styles.iconStart}
              name="star"
              size={24}
              color="#EBA731"
            />
            <Text style={styles.dealPoint}>{item.hotelRating} </Text>
            <Text style={styles.dealReviewsText}>
              Đánh giá ({item.sumReview}){" "}
            </Text>
          </View>
          <Text style={styles.dealDesc}>{item.promotionName}</Text>
          <View style={styles.dealFooter}>
            <Text style={styles.dealSale}>Giảm 25%</Text>
            <Text style={styles.dealPrice}> {item.price}</Text>
            <TouchableOpacity>
              <Text style={styles.dealBooking}>Đặt ngay </Text>
            </TouchableOpacity>
          </View>
        </View>
      </TouchableOpacity>
    );
  };

  const inputContainerRef = useRef(null);

  const handleOpenModal = (name) => {
    const open_ = cloneDeep(open);
    open_[name] = true;
    setOpen(open_);

    if (inputContainerRef.current) {
      inputContainerRef.current.measure((fx, fy, width, height, px, py) => {
        setModalPosition({ top: px + 2 * height, left: 0, width: "100%" });
      });
    }
  };

  const handleCloseModal = (name) => {
    const open_ = cloneDeep(open);
    open_[name] = false;
    setOpen(open_);
  };

  const WidthtwoRowScrollView = 210 * Math.ceil(continueSearch.length / 2);

  const handleModalCheck = (name, value) => {
    const open_ = cloneDeep(open);
    open_[name] = value;

    if (name === "Modal_CheckIn" || name === "Modal_CheckOut") {
      const day =
        inforFilter[name === "Modal_CheckIn" ? "checkin" : "checkout"];
      setSelectDay({
        day: +day.split("-")[2],
        month: +day.split("-")[1],
        year: +day.split("-")[0],
      });
    }

    setOpen(open_);
  };

  const formatToYYYYMMDD = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    return `${year}-${month}-${day}`;
  };

  const handleConfirmDate = (name) => {
    const formattedDate = `${selectDay.year}-${String(selectDay.month).padStart(
      2,
      "0"
    )}-${String(selectDay.day).padStart(2, "0")}`;
    const today = new Date();
    const dateToday = formatToYYYYMMDD(today);
    const date1 = new Date(dateToday);
    const date2 = new Date(formattedDate);

    // Kiểm tra ngày check-in
    if (name === "checkin") {
      if (date2 < date1) {
        Alert.alert("Ngày CheckIn phải lớn hơn ngày hiện tại");
        return;
      }

      // Cập nhật filter
      let updatedFilter = { ...inforFilter, checkin: formattedDate };

      // Nếu đã có check-out, kiểm tra tính hợp lệ
      if (inforFilter.checkout) {
        const checkoutDate = new Date(inforFilter.checkout);
        if (checkoutDate <= date2) {
          // Check-out không hợp lệ, đặt thành check-in + 1
          const nextDay = new Date(date2);
          nextDay.setDate(date2.getDate() + 1);
          updatedFilter.checkout = formatToYYYYMMDD(nextDay);
        }
      } else {
        // Chưa có check-out, đặt thành check-in + 1
        const nextDay = new Date(date2);
        nextDay.setDate(date2.getDate() + 1);
        updatedFilter.checkout = formatToYYYYMMDD(nextDay);
      }

      dispatch(updateFilter(updatedFilter));
      handleModalCheck("Modal_CheckIn", false);
    }

    // Kiểm tra ngày check-out
    if (name === "checkout") {
      if (date2 <= date1) {
        Alert.alert("Ngày CheckOut phải lớn hơn ngày hiện tại");
        return;
      }

      // Nếu đã có check-in, kiểm tra check-out > check-in
      if (inforFilter.checkin) {
        const checkinDate = new Date(inforFilter.checkin);
        if (date2 <= checkinDate) {
          Alert.alert("Ngày CheckOut phải lớn hơn ngày CheckIn");
          return;
        }
      }

      // Cập nhật filter
      dispatch(updateFilter({ ...inforFilter, checkout: formattedDate }));
      handleModalCheck("Modal_CheckOut", false);
    }
  };

  const handleFilterHotel = () => {
    dispatch(skeletonLoading());
    dispatch(fetchHotelByLocation(inforFilter));
    console.log(">>> run 0");
    navigation.navigate("ListHotelLocation");
  };

  const handleToInfoConfirm = () => {
    // dispatch(fetchUserInfo());
    navigation.navigate("TestModal");
  };

  const handleContinueSearch = (item) => {
    // console.log(item);
    const inforFilter_ = {
      locationId: item?.locationId,
      checkin: item?.checkIn,
      checkout: item?.checkOut,
      adults: item?.adults,
      children: item?.children,
      amenityIds: [],
      serviceIds: [],
      sortById: 1,
    };
    // console.log("inforFIlter Fake", inforFilter_);
    dispatch(skeletonLoading());
    dispatch(fetchHotelByLocation(inforFilter_));

    navigation.navigate("ListHotelLocation");
  };
  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      {/* <Map /> */}
      <View style={styles.header}>
        <Text style={styles.title}>Tìm Phòng</Text>
        {/* <TouchableOpacity onPress={() => handleToInfoConfirm()}>
          <Icon name="filter" size={24} color="#007AFF" />
        </TouchableOpacity> */}
      </View>
      {/* Body */}
      <ScrollView style={styles.body} scrollEnabled={!open.Modal_1}>
        <View style={styles.hotelLabelContainer}>
          <Text style={styles.hotelLabel}>Khách Sạn</Text>
        </View>
        <TouchableOpacity
          style={styles.inputContainer}
          ref={inputContainerRef}
          onPress={() => handleOpenModal("Modal_1")}
        >
          <Icon name="map-marker" size={24} color="#0090FF" />
          <Text style={styles.inputText}>
            {inforFilter.locationId !== "0"
              ? locationList?.find(
                  (item) => item.id.toString() === inforFilter.locationId
                )?.name || "Bạn muốn ở đâu"
              : "Bạn muốn ở đâu"}
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.inputContainer}
          onPress={() => handleModalCheck("Modal_CheckIn", true)}
        >
          <Icon name="calendar" size={24} color="#0090FF" />
          <Text style={styles.inputText}>{inforFilter.checkin}</Text>
          <Icon
            name="angle-down"
            size={20}
            color="#0090FF"
            style={styles.arrowIcon}
          />
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.inputContainer}
          onPress={() => handleModalCheck("Modal_CheckOut", true)}
        >
          <Icon name="calendar" size={24} color="#0090FF" />
          <Text style={styles.inputText}>{inforFilter.checkout}</Text>
          <Icon
            name="angle-down"
            size={20}
            color="#0090FF"
            style={styles.arrowIcon}
          />
        </TouchableOpacity>

        <ModalCheckIn
          visible={open.Modal_CheckIn}
          onClose={handleModalCheck}
          selectDay={selectDay}
          setSelectDay={setSelectDay}
          confirm={handleConfirmDate}
        />
        <ModalCheckOut
          visible={open.Modal_CheckOut}
          onClose={handleModalCheck}
          selectDay={selectDay}
          setSelectDay={setSelectDay}
          confirm={handleConfirmDate}
        />
        <TouchableOpacity
          style={styles.inputContainer}
          onPress={() => handleModalCheck("Modal_GuestsAndRooms", true)}
        >
          <Icon name="building" size={24} color="#0090FF" />
          <Text style={styles.inputText}>
            {inforFilter.adults} Người lớn, {inforFilter.children} Trẻ em,{" "}
            {inforFilter.roomNumber} Phòng
          </Text>
          <Icon
            name="angle-down"
            size={20}
            color="#0090FF"
            style={styles.arrowIcon}
          />
        </TouchableOpacity>
        <ModalGuestsAndRooms
          visible={open.Modal_GuestsAndRooms}
          onClose={handleModalCheck}
          // inforFilter={inforFilter}
          // setInforFilter={setInforFilter}
        />
        <TouchableOpacity
          style={styles.newButton}
          onPress={() => handleFilterHotel()}
        >
          <Text style={styles.newButtonText}> Tìm kiếm </Text>
        </TouchableOpacity>
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>TIẾP TỤC TÌM KIẾM CỦA BẠN</Text>
            <TouchableOpacity>
              <Text style={styles.viewAllText}>XEM TẤT CẢ</Text>
            </TouchableOpacity>
          </View>
          <View>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              <View
                style={[
                  styles.twoRowScrollView,
                  { width: WidthtwoRowScrollView },
                ]}
              >
                {continueSearch?.map((item, index) => {
                  return (
                    <TouchableOpacity
                      onPress={() => handleContinueSearch(item)}
                      key={index}
                      style={styles.recentSearchItem}
                    >
                      <Image
                        source={{
                          uri: `${item?.image}`,
                        }}
                        style={styles.recentSearchImage}
                      />
                      <View style={styles.recentSearchDetails}>
                        <Text style={styles.recentSearchText}>
                          {item?.location}
                        </Text>
                        <Text style={styles.recentSearchSubText}>
                          Từ {item?.checkIn} đến {item?.checkOut} ,
                          {item?.adults}
                          Người lớn , {item?.children} Trẻ em
                        </Text>
                      </View>
                    </TouchableOpacity>
                  );
                })}
              </View>
            </ScrollView>
          </View>
        </View>
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>ƯU ĐÃI CUỐI TUẦN</Text>
            <TouchableOpacity>
              <Text style={styles.viewAllText}>XEM TẤT CẢ</Text>
            </TouchableOpacity>
          </View>

          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            {hotelList &&
              hotelList.map((item, index) => {
                return <HotelRequestList key={index} item={item} />;
              })}
          </ScrollView>
        </View>
        <View style={styles.lastSection}></View>
        {open.Modal_1 && (
          <ModalLocationList
            position={modalPosition}
            onClose={() => handleCloseModal("Modal_1")}
            onSelect={(locationId) =>
              // setInforFilter({ ...inforFilter, locationId })
              dispatch(updateFilter({ ...inforFilter, locationId: locationId }))
            }
          />
        )}
        <View>
          <Text>{"\n\n"}</Text>
        </View>
        {/* <View></View> */}
      </ScrollView>
    </SafeAreaView>
  );
};
export default HomeScreen;

// const styles = StyleSheet.create({});
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#FFFFFF",
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 15,
    paddingVertical: 10,
    // borderBottomWidth: 1,
    // borderBottomColor: "#E0E0E0",
  },
  title: {
    fontSize: 24,
    fontWeight: "500",
    color: "#000000",
  },
  body: {
    paddingHorizontal: 15,
    paddingVertical: 10,
  },
  hotelLabelContainer: {
    backgroundColor: "#0090FF",
    paddingVertical: 8,
    borderRadius: 10,
    marginBottom: 10,
  },
  hotelLabel: {
    color: "#FFFFFF",
    fontSize: 18,
    fontWeight: "400",
    textAlign: "center",
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    borderBottomColor: "gray",
    borderBottomWidth: 1,
    position: "relative",
    // borderWidth: 1,
    // borderColor: "#E0E0E0",
    // borderRadius: 5,
    padding: 10,
    marginBottom: 10,
    marginTop: 8,
  },
  inputText: {
    flex: 1,
    marginLeft: 15,
    color: "black",
    fontWeight: "400",
    fontSize: 18,
  },
  arrowIcon: {
    marginLeft: 10,
  },
  newButton: {
    backgroundColor: "#00F598",
    borderRadius: 12,
    paddingHorizontal: 15,
    paddingVertical: 12,
  },

  newButtonText: {
    color: "white",
    textAlign: "center",
    fontSize: 18,
    fontWeight: 400,
  },
  searchButton: {
    backgroundColor: "black",
  },
  section: {
    marginTop: 10,
  },
  sectionHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 10,
  },
  sectionTitle: {
    fontSize: 14,
    fontWeight: "400",
    color: "gray",
    textTransform: "uppercase",
  },
  viewAllText: {
    fontSize: 14,
    color: "#007AFF",
  },
  twoRowScrollView: {
    flexDirection: "row",
    flexWrap: "wrap",
  },
  recentSearchItem: {
    flexDirection: "row",
    backgroundColor: "#F5F5F5",
    borderRadius: 5,
    padding: 10,
    marginRight: 10,
    alignItems: "center",
    width: 250,
    height: 70,
    marginBottom: 10,
  },
  recentSearchImage: {
    width: 50,
    height: 50,
    borderRadius: 5,
  },
  recentSearchDetails: {
    marginLeft: 10,
    flex: 1,
  },
  recentSearchText: {
    fontSize: 12,
    fontWeight: "bold",
    color: "#000000",
  },
  recentSearchSubText: {
    fontSize: 10,
    color: "#666666",
    marginTop: 2,
  },
  dealItem: {
    alignItems: "flex-start",
    backgroundColor: "#FFFFFF",
    borderRadius: 8,
    marginRight: 10,
    width: 250,
    backgroundColor: "#EFEFEF",
  },
  dealImage: {
    width: 250,
    height: 150,
    borderRadius: 5,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  },
  image: {
    width: 240,
    height: 140,
    borderRadius: 5,
  },
  dealDetails: {
    marginLeft: 8,
    marginRight: 10,
    width: "100%",
  },
  dealName: {
    fontSize: 14,
    fontWeight: "500",
    marginTop: 5,
    marginBottom: 5,
    color: "black",
  },
  dealReviews: {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    marginBottom: 5,
  },
  iconStart: {
    marginRight: 10,
  },
  dealPoint: {
    color: "red",
    fontWeight: "400",
    marginRight: 10,
    fontSize: 12,
  },

  dealReact: {
    fontSize: 12,
  },
  dealReviewsText: {
    fontSize: 12,
  },
  dealLocation: {
    color: "black",
    marginRight: 12,
  },
  dealLocationName: {
    fontSize: 12,
  },
  dealFooter: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginRight: 10,
  },
  dealSale: {
    color: "#EBA731",
    fontWeight: "bold",
    fontSize: 14,
  },
  dealPrice: {
    fontWeight: "600",
    fontSize: 14,
  },
  dealDesc: {
    fontSize: 12,
    fontWeight: 400,
    marginBottom: 5,
  },
  dealBooking: {
    fontSize: 14,
    fontWeight: 400,
    borderRadius: 10,
    backgroundColor: "#00F598",
    color: "white",
    paddingHorizontal: 20,
    paddingVertical: 4,
  },
  dealText: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
    marginTop: 5,
    textAlign: "center",
  },
  searchButton: {
    marginVertical: 15,
    borderRadius: 8,
    overflow: "hidden", // Đảm bảo gradient không bị cắt bởi borderRadius
  },
  gradientButton: {
    paddingVertical: 15,
    paddingHorizontal: 20,
    alignItems: "center",
    justifyContent: "center",
  },
  searchButtonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
  },
  modalOverlay: {
    // flex: 1,
    // backgroundColor: "rgba(0, 0, 0, 0.5)", // Nền mờ
    justifyContent: "center",
    alignItems: "center",
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    maxHeight: "800",
  },
  modalContent: {
    backgroundColor: "white",
    width: "80%",
    borderRadius: 10,
    padding: 20,
    maxHeight: "60%", // Giới hạn chiều cao của modal
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 15,
    textAlign: "center",
  },
  locationItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  locationText: {
    fontSize: 16,
    marginLeft: 10,
  },
  closeButton: {
    marginTop: 20,
    backgroundColor: "#0090FF",
    paddingVertical: 10,
    borderRadius: 5,
    alignItems: "center",
  },
  closeButtonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  datePickerContainer: {
    backgroundColor: "white",
    borderRadius: 10,
    padding: 20,
    width: "90%",
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 15,
    textAlign: "center",
  },
  pickerContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  picker: {
    flex: 1,
    height: 150,
  },
  modalButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 20,
  },
  modalButton: {
    backgroundColor: "#f5f5f5",
    padding: 10,
    borderRadius: 5,
    flex: 1,
    marginHorizontal: 5,
    alignItems: "center",
  },
  confirmButton: {
    backgroundColor: "#0090FF",
  },
  modalButtonText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
  lastSection: {
    // marginBottom: 20,
    // paddingBottom: 50,
  },
});

//  const getData = async () => {
//    try {
//      const response = await fetch(`${API_BASE_URL}/api/hotel/home`, {
//        method: "GET",
//        headers: {
//          "Content-Type": "application/json",
//        },
//      });
//      if (response) {
//        const data = await response.json();
//        // console.log("Dữ liệu từ API:", data);
//        // console.log(data.data[0].hotelRequestList);
//        setHotelRequestList(data.data[0].hotelRequestList);
//      } else {
//      }
//    } catch (error) {
//      console.error("Lỗi khi gọi API:", error);
//    }
//  };

{
  /* <Modal
            animationType="slide"
            transparent={true}
            visible={open.Modal_1}
            onRequestClose={() => handleCloseModal("Modal_1")} 
          >
            <View style={styles.modalOverlay}>
              <View style={styles.modalContent}>
                <Text style={styles.modalTitle}>Chọn địa điểm</Text>

                <FlatList
                  data={locations}
                  keyExtractor={(item) => item.id.toString()}
                  renderItem={({ item }) => (
                    <TouchableOpacity
                      style={styles.locationItem}
                      onPress={() => {
                      
                        setInforFilter({
                          ...inforFilter,
                          locationId: item.id.toString(),
                        });
                        handleCloseModal("Modal_1");
                      }}
                    >
                      <Icon name="map-marker" size={24} color="#0090FF" />
                      <Text style={styles.locationText}>{item.name}</Text>
                    </TouchableOpacity>
                  )}
                />

                <TouchableOpacity
                  style={styles.closeButton}
                  onPress={() => handleCloseModal("Modal_1")}
                >
                  <Text style={styles.closeButtonText}>Đóng</Text>
                </TouchableOpacity>
              </View>
            </View>
          </Modal> */
}

{
  /* {open.Modal_1 && (
          <TouchableWithoutFeedback onPress={() => handleCloseModal("Modal_1")}>
            <View style={styles.overlay}>
              <TouchableWithoutFeedback>
                <ModalLocationList
                  onClose={() => handleCloseModal("Modal_1")}
                  onSelect={(locationId) =>
                    setInforFilter({ ...inforFilter, locationId })
                  }
                />
              </TouchableWithoutFeedback>
            </View>
          </TouchableWithoutFeedback>
        )} */
}


src\Pages\Hotels\AllComment.js
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  Image,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { getReviewDetails } from "../../Redux/Slice/hotelSlice";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";

const AllComments = ({ navigation, route }) => {
  const { comments } = route.params;
  const dispatch = useAppDispatch();

  const handleToRateDetails = (item) => {
    console.log(item.reviewId);
    dispatch(getReviewDetails(item.reviewId));
    navigation.navigate("RateDetails", { name: item.username });
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Ionicons name="arrow-back" size={24} color="#000" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Tất cả nhận xét</Text>
      </View>

      <ScrollView style={styles.commentsContainer}>
        {comments.length > 0 ? (
          comments.map((item, index) => (
            <TouchableOpacity
              onPress={() => handleToRateDetails(item)}
              key={item.reviewId}
              style={styles.commentItem}
            >
              <Image
                source={{ uri: `${item.urlAvatar}` }}
                style={styles.commentAvatar}
              />
              <View style={styles.commentContent}>
                <View style={styles.commentHeader}>
                  <Text style={styles.commentUser}>{item.username}</Text>
                  <Text style={styles.commentScore}>{item.rating}/5</Text>
                </View>
                <Text style={styles.commentText}>{item.comment}</Text>
              </View>
            </TouchableOpacity>
          ))
        ) : (
          <Text style={styles.noCommentsText}>Chưa có nhận xét nào.</Text>
        )}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f8f8f8",
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    padding: 15,
    backgroundColor: "#fff",
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#000",
    marginLeft: 15,
  },
  commentsContainer: {
    padding: 15,
  },
  commentItem: {
    flexDirection: "row",
    marginBottom: 15,
    padding: 10,
    backgroundColor: "#fff",
    borderRadius: 8,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  commentAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 10,
  },
  commentContent: {
    flex: 1,
  },
  commentHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 5,
  },
  commentUser: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
  commentScore: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000",
  },
  commentText: {
    fontSize: 14,
    color: "#666",
  },
  noCommentsText: {
    fontSize: 14,
    color: "#666",
    textAlign: "center",
    marginTop: 20,
  },
});

export default AllComments;


src\Pages\Hotels\AllPolicy.js
import React from "react";
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  SafeAreaView,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";

const AllPolicy = ({ navigation, route }) => {
  const data = route?.params?.data;
  console.log(route.params);
  const getIconName = (type) => {
    switch (type) {
      case "CHECKIN":
        return "log-in-outline";
      case "CHECKOUT":
        return "log-out-outline";
      case "CANCEL":
        return "close-circle-outline";
      case "PERSON":
        return "person-outline";
      case "PAYMENT":
        return "card-outline";
      default:
        return "information-circle-outline";
    }
  };

  const PolicyCard = ({ policy }) => {
    return (
      <View style={styles.card}>
        <View style={styles.iconContainer}>
          <Ionicons name={getIconName(policy.type)} size={24} color="#007AFF" />
        </View>
        <View style={styles.contentContainer}>
          <Text style={styles.policyName}>{policy.name}</Text>
          <Text style={styles.policyDescription}>{policy.description}</Text>
          {(policy.condition || policy.value) && (
            <View style={styles.conditionContainer}>
              {policy.condition && (
                <Text style={styles.conditionText}>
                  Điều kiện: {policy.condition}{" "}
                  {policy.operator === "after"
                    ? "sau"
                    : policy.operator === "before"
                    ? "trước"
                    : policy.operator === "equals"
                    ? ""
                    : ""}
                </Text>
              )}
              {policy.value && (
                <Text style={styles.conditionText}>
                  Giá trị: {policy.value}
                  {policy.type === "PAYMENT" ? "%" : ""}
                </Text>
              )}
            </View>
          )}
        </View>
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        {data.map((policy) => (
          <PolicyCard key={policy.id} policy={policy} />
        ))}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F5F7FA",
  },
  header: {
    backgroundColor: "#00F598",
    paddingVertical: 15,
    paddingHorizontal: 20,
    flexDirection: "row",
    alignItems: "center",
  },
  backButton: {
    marginRight: 10,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#fff",
  },
  scrollContent: {
    padding: 20,
  },
  card: {
    flexDirection: "row",
    backgroundColor: "#E6F7F2",
    borderRadius: 12,
    marginBottom: 15,
    padding: 15,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    borderWidth: 1,
    borderColor: "#00F598",
  },
  iconContainer: {
    justifyContent: "center",
    alignItems: "center",
    marginRight: 15,
  },
  contentContainer: {
    flex: 1,
  },
  policyName: {
    fontSize: 16,
    fontWeight: "600",
    color: "#191D39",
    marginBottom: 5,
  },
  policyDescription: {
    fontSize: 14,
    color: "#424242",
    flexShrink: 1,
    marginBottom: 5,
  },
  conditionContainer: {
    marginTop: 5,
  },
  conditionText: {
    fontSize: 12,
    color: "#007AFF",
    fontStyle: "italic",
  },
});

export default AllPolicy;

src\Pages\Hotels\CheckScreen.js
import React from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  Image,
  TouchableOpacity,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { useAppSelector } from "../../Redux/hook";
import MapPriceScreen from "../../Components/Map/MapPriceScreen";
import MapCheckScreen from "../../Components/Map/";

const CheckScreen = () => {
  // Dữ liệu giả cho danh sách hoạt động

  const { hotelList, hotelDetail, loading, error } = useAppSelector(
    (state) => state.hotel
  );
  // console.log(">>> 19", hotelDetail?.nearBy?.activityList);

  const activityList = hotelDetail?.nearBy?.activityList?.map(
    (item, index) => ({
      id: index,
      title: item.name,
      description: item.description,
      image: item.photoUrl,
      rating: item.rating,
      distance: item.distance,
    })
  );
  // console.log(">>> 28 CheckScreen", activityList);

  // Hàm render từng hoạt động
  const renderActivityItem = (item) => (
    <View style={styles.activity} key={item.id}>
      <Image
        source={{ uri: item.image }}
        style={styles.activity__image}
        resizeMode="cover"
      />
      <View style={styles.activity__info}>
        <Text style={styles.activity__title}>{item.title}</Text>
        <Text style={styles.activity__description}>{item.description}</Text>
        <View style={styles.activity__text}>
          <View>
            <Text>Đánh giá {item.reviews}</Text>
          </View>
          <View>
            <Text>Khoảng cách</Text>
          </View>
        </View>
        <View style={styles.activity__icon}>
          <View style={{ flexDirection: "row" }}>
            <Ionicons name="star" size={18} color="#EBA731" />
            <Text style={styles.activity__ratingText}>{item.rating}</Text>
          </View>
          <View>
            <View style={{ flexDirection: "row" }}>
              <Ionicons name="car-outline" size={18} color="#EBA731" />
              <Text>{item.distance}</Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  );

  return (
    <ScrollView style={styles.container}>
      {/* Khối Tổng quan địa điểm */}
      <View style={styles.section}>
        <Text style={styles.section__title}>TỔNG QUAN ĐỊA ĐIỂM</Text>
        <Text style={styles.section__description}>
          Nằm trong khu vườn được thiết kế tinh tế với tầm nhìn ra đầm phá,
          khách sạn cao cấp này nổi bật với nghệ thuật địa phương đương đại và
          những nét chấm phá kiến trúc độc đáo.
        </Text>
      </View>

      {/* Khối Điểm đánh giá vị trí khách sạn */}
      <View style={styles.section}>
        <Text style={styles.section__title}>
          ĐIỂM ĐÁNH GIÁ VỊ TRÍ KHÁCH SẠN
        </Text>
        <View style={styles.rating}>
          <View style={styles.rating__circle}>
            <Text style={styles.rating__score}>
              {hotelDetail && hotelDetail?.nearBy?.ratingLocation}
            </Text>
          </View>
          <Text style={styles.rating__description}>
            {hotelDetail && hotelDetail?.nearBy?.descriptionLocation}
          </Text>
        </View>
        {/* <View style={styles.rating__details}>
          <View style={styles.rating__detailItem}>
            <Ionicons name="walk-outline" size={30} color="#0090FF" />
            <Text style={styles.rating__detailScore}>3.8</Text>
            <Text style={styles.rating__detailText}>
              Tuyệt vời cho các hoạt động gần đó.
            </Text>
          </View>
          <View style={styles.rating__detailItem}>
            <Ionicons name="bus-outline" size={30} color="#0090FF" />
            <Text style={styles.rating__detailScore}>0.0</Text>
            <Text style={styles.rating__detailText}>
              Không có phương tiện giao thông công cộng.
            </Text>
          </View>
          <View style={styles.rating__detailItem}>
            <Ionicons name="airplane-outline" size={30} color="#0090FF" />
            <Text style={styles.rating__detailScore}>2.2</Text>
            <Text style={styles.rating__detailText}>
              Tầm để đi đến chuyến đến sân bay.
            </Text>
          </View>
        </View> */}
        <Text style={styles.rating__note}>
          Điểm số được tính dựa trên dữ liệu từ Google Maps và đánh giá mức độ
          gần của khách sạn với các điểm tham quan, phương tiện giao thông và
          sân bay.
        </Text>
      </View>

      <View style={styles.map}>
        <View style={styles.mapView}>
          <Text style={styles.mapViewTitle}>VỊ TRÍ XUNG QUANH </Text>
        </View>
        <MapCheckScreen />
      </View>

      {/* Khối Hoạt động nên trải nghiệm */}
      <View style={styles.section}>
        <Text style={styles.section__title}>HOẠT ĐỘNG NÊN TRẢI NGHIỆM</Text>
        <ScrollView>
          {activityList?.map((item) => renderActivityItem(item))}
        </ScrollView>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    paddingHorizontal: 15,
    paddingVertical: 20,
  },
  section: {
    marginBottom: 20,
  },
  section__title: {
    fontSize: 16,
    fontWeight: "400",
    color: "#000",
    textTransform: "uppercase",
    marginBottom: 10,
    textAlign: "flex-start",
  },
  section__description: {
    fontSize: 14,
    color: "#666",
    lineHeight: 20,
  },
  rating: {
    flexDirection: "row",
    marginBottom: 15,
    justifyContent: "center",
    alignItems: "center",
  },
  rating__circle: {
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: "center",
    alignItems: "center",
    marginRight: 15,
    backgroundColor: "white",
    borderWidth: 3,
    borderColor: "#00BD6B",
  },
  rating__score: {
    fontSize: 24,
    fontWeight: "400",
    color: "#000",
  },
  rating__description: {
    flex: 1,
    fontSize: 14,
    color: "#666",
    lineHeight: 20,
  },
  rating__details: {
    marginBottom: 10,
  },
  rating__detailItem: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 10,
  },
  rating__detailScore: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000",
    marginLeft: 10,
    marginRight: 10,
  },
  rating__detailText: {
    fontSize: 14,
    color: "#666",
    flex: 1,
  },
  rating__note: {
    fontSize: 14,
    color: "#999",
  },
  activity: {
    flexDirection: "row",
    marginBottom: 15,
  },
  activity__image: {
    width: 100,
    height: 100,
    borderRadius: 8,
    marginRight: 15,
  },
  activity__info: {
    flex: 1,
  },
  activity__title: {
    fontSize: 14,
    fontWeight: "400",
    color: "#000",
    marginBottom: 0,
  },
  activity__description: {
    fontSize: 12,
    color: "#666",
    lineHeight: 16,
    marginBottom: 10,
  },
  activity__text: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  activity__icon: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  activity__rating: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 5,
  },
  activity__ratingText: {
    fontSize: 12,
    color: "#000",
    marginLeft: 5,
    marginRight: 10,
  },
  activity__distance: {
    fontSize: 12,
    color: "#666",
  },
  button: {
    backgroundColor: "#0090FF",
    borderRadius: 5,
    paddingVertical: 5,
    paddingHorizontal: 10,
    alignSelf: "flex-start",
  },
  button__text: {
    fontSize: 14,
    color: "#fff",
  },
});

export default CheckScreen;
//  const activities = [
//    {
//      id: "1",
//      title: "Bà Nà Hills",
//      description:
//        "Trải nghiệm cáp treo, check-in Cầu Vàng và khám phá ngôi làng Pháp.",
//      image:
//        "https://images.unsplash.com/photo-1596436889106-be35e843f974?q=80&w=2940&auto=format&fit=crop",
//      rating: 4.4,
//      reviews: 1649,
//      distance: "6 min",
//    },
//    {
//      id: "2",
//      title: "Bán đảo Sơn Trà",
//      description:
//        "Ngắm cảnh tự nhiên hùng vĩ, chùa Linh Ứng và khám phá thiên nhiên hoang dã.",
//      image:
//        "https://images.unsplash.com/photo-1596436889106-be35e843f974?q=80&w=2940&auto=format&fit=crop",

//      rating: 4.4,
//      reviews: 1649,
//      distance: "27 min",
//    },
//  ];

src\Pages\Hotels\HotelDetails.js
import React, { useState, useEffect, useLayoutEffect } from "react";
import {
  View,
  Text,
  ImageBackground,
  Image,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  Dimensions,
  BackHandler,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import Icon from "react-native-vector-icons/FontAwesome";
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";
import PriceScreen from "./PriceScreen";
import PhotoScreen from "./PhotoScreen";
import CheckScreen from "./CheckScreen";
import InfoConfirmScreen from "./InfoConfirmScreen";
import OrderConfirmScreen from "./OrderConfirmScreen";
import SkeletonPlaceholder from "react-native-skeleton-placeholder";
import { API_BASE_URL } from "../../Constant/Constant";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import {
  fetchHotelById,
  fetchHotelRoomList,
  mapOpenClose,
  updateBookingPayload,
  updateHotelDetailId,
} from "../../Redux/Slice/hotelSlice";
import SkeletonHotelDetails from "../../Components/Skeleton/Hotels/SkeletonHotelDetails";
import _ from "lodash";

const HotelDetails = ({ navigation, route }) => {
  const hotelId = route?.params?.item?.hotelId;
  const item = route?.params?.item;

  const [css, setCss] = useState(1);
  const Tab = createMaterialTopTabNavigator();

  const [data, setData] = useState();
  const [openMap, setOpenMap] = useState(true);
  const dispatch = useAppDispatch();
  const { hotelList, hotelDetail, loading, error, inforFilter } =
    useAppSelector((state) => state.hotel);

  console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>..", hotelDetail);
  // console.log(">>> 48 HD >>>", hotelDetail?.review?.feedback?.comments);

  useEffect(() => {
    const routeName = navigation.getState()?.routes[0]?.state?.routes[0]?.name;
    if (routeName === "Price") setCss(1);
    else if (routeName === "Photo") setCss(2);
    else if (routeName === "Check") setCss(3);
  }, [navigation]);

  const handleInfoConfirm = () => {
    const inforFilter_ = {
      hotelId: hotelId,
      checkInDate: inforFilter.checkin,
      checkOutDate: inforFilter.checkout,
      roomNumber: inforFilter.roomNumber,
      adults: inforFilter.adults,
      children: inforFilter.children,
    };
    // console.log(inforFilter_);

    const bookingPayload = {
      customerName: "",
      customerEmail: "",
      customerPhone: "",
      hotelId: hotelId,
      checkInDate: inforFilter.checkin,
      checkOutDate: inforFilter.checkout,
      couponId: 0,
      roomRequestList: [],
    };

    dispatch(updateBookingPayload(bookingPayload));

    // console.log("id", hotelId);
    dispatch(updateHotelDetailId(hotelId));
    dispatch(fetchHotelRoomList(inforFilter_));

    navigation.navigate("HotelRoomList", { item });
  };

  const handleOrderConfirm = () => {
    setShowInfoConfirm(false);
    setShowOrderConfirm(true);
  };

  const CustomTabBar = ({ state, descriptors, navigation }) => {
    return (
      <View style={styles.header__tabs}>
        <TouchableOpacity
          style={[
            styles.header__tab,
            styles.header__tab__1,
            // css === 1 && styles.active,
            state.index === 0 && styles.active,
          ]}
          onPress={() => {
            // setCss(1);
            navigation.navigate("Price");
          }}
        >
          <Text
            style={[
              styles.header__tab__text,
              // css === 1 && styles.activeText,
              state.index === 0 && styles.activeText,
            ]}
          >
            Bảng giá
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[
            styles.header__tab,
            // css === 2 && styles.active,
            state.index === 1 && styles.active,
          ]}
          onPress={() => {
            // setCss(2);
            navigation.navigate("Photo");
          }}
        >
          <Text
            style={[
              styles.header__tab__text,
              // css === 2 && styles.activeText,
              state.index === 1 && styles.activeText,
            ]}
          >
            Ảnh
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[
            styles.header__tab,
            styles.header__tab__3,
            // css === 3 && styles.active,
            state.index === 2 && styles.active,
          ]}
          onPress={() => {
            // setCss(3);
            navigation.navigate("Check");
          }}
        >
          <Text
            style={[
              styles.header__tab__text,
              // css === 3 && styles.activeText,
              state.index === 2 && styles.activeText,
            ]}
          >
            Lần check
          </Text>
        </TouchableOpacity>
      </View>
    );
  };

  const handleMapLocation = () => {
    dispatch(mapOpenClose(true));
  };

  if (loading) {
    return <SkeletonHotelDetails />;
  }

  return (
    <>
      <View style={styles.container}>
        {/* Header */}
        <View style={styles.header}>
          <ImageBackground
            source={{
              uri: `${item?.imageUrl}`,
            }}
            style={styles.header__image}
          >
            <View style={styles.header__overlay}>
              <TouchableOpacity onPress={() => navigation.goBack()}>
                <Ionicons name="arrow-back" size={24} color="#fff" />
              </TouchableOpacity>
              <Text style={styles.header__title}>{item?.hotelName}</Text>
              {/* <TouchableOpacity style={styles.header__icon__start}>
                <Ionicons name="share-outline" size={24} color="#fff" />
              </TouchableOpacity> */}
            </View>

            <View style={styles.header__info}>
              <View style={styles.header__rating}>
                <View style={styles.header__rating__group}>
                  <View>
                    <Icon
                      style={styles.iconStart}
                      name="star"
                      size={24}
                      color="#EBA731"
                    />
                  </View>
                  <View>
                    <Text style={styles.header__rating__score}>
                      {hotelDetail && hotelDetail?.review.rating}
                    </Text>
                  </View>
                </View>
                <Text style={styles.header__rating__text}>
                  {hotelDetail && hotelDetail?.review?.sumReview} Người đã thích
                </Text>
              </View>
              <TouchableOpacity
                style={styles.header__location}
                onPress={() => handleMapLocation()}
              >
                <View>
                  <Icon name="map-marker" size={16} color="white" />
                </View>
                <View style={styles.header__location__text}>
                  <Text style={{ color: "white" }}>
                    {hotelDetail && hotelDetail?.review?.location}
                  </Text>
                </View>
              </TouchableOpacity>
            </View>
          </ImageBackground>
        </View>

        {/* Tab Navigator với tabBar tùy chỉnh */}

        <Tab.Navigator
          tabBar={(props) => <CustomTabBar {...props} />}
          initialRouteName="Price"
        >
          <Tab.Screen
            name="Price"
            component={PriceScreen}
            options={{ tabBarLabel: "Bảng giá" }}
          />
          <Tab.Screen
            name="Photo"
            component={PhotoScreen}
            options={{ tabBarLabel: "Ảnh" }}
          />
          <Tab.Screen
            name="Check"
            component={CheckScreen}
            options={{ tabBarLabel: "Lần check" }}
          />
        </Tab.Navigator>

        <View style={styles.footer__action}>
          <Text style={styles.footer__price}>
            <Text>{hotelDetail && hotelDetail.priceMin}</Text>
            <Text style={styles.footer__price__text}>TB/ĐÊM</Text>
          </Text>
          <TouchableOpacity
            style={styles.footer__button}
            onPress={() => handleInfoConfirm()}
          >
            <Text style={styles.footer__button__text}>ĐẶT NGAY</Text>
          </TouchableOpacity>
        </View>
      </View>
    </>
  );
};
export default HotelDetails;
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },

  // Block: header
  header: {
    backgroundColor: "#fff",
  },
  header__image: {
    width: "100%",
    height: 250,
    justifyContent: "space-between",
  },
  header__overlay: {
    flexDirection: "row",
    // justifyContent: "space-between",
    alignItems: "center",
    padding: 15,
  },
  header__icon__start: {
    marginLeft: "auto",
  },
  header__title: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#fff",
    padding: 15,
    textShadowColor: "rgba(0, 0, 0, 0.75)",
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 5,
  },
  header__info: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 15,
    alignItems: "flex-end",
  },
  header__rating: {
    flexDirection: "column",
    alignItems: "flex-star",
  },
  header__rating__group: {
    flexDirection: "row",
    width: 200,
    alignItems: "center",
    // justifyContent: "space-between",
  },
  header__rating__score: {
    fontSize: 16,
    fontWeight: "400",
    color: "white",
    paddingVertical: 2,
    paddingHorizontal: 6,
    borderRadius: 5,
    marginLeft: 5,
  },
  iconStart: {
    fontSize: 16,
  },
  header__rating__text: {
    fontSize: 14,
    color: "white",
  },
  header__location: {
    fontSize: 14,
    color: "white",
    width: 100,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    color: "white",
  },
  header__location__text: {
    marginLeft: 5,
  },
  // E4E6EB
  // CCCED3
  header__tabs: {
    flexDirection: "row",
    justifyContent: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
  },
  header__tab: {
    paddingVertical: 5,
    borderWidth: 1,
    borderColor: "#0090FF",
    paddingHorizontal: 30,
    // paddingVertical: 15,
  },
  header__tab__1: {
    borderTopLeftRadius: 15,
    borderBottomLeftRadius: 15,
  },

  header__tab__3: {
    borderTopRightRadius: 15,
    borderBottomRightRadius: 15,
  },
  header__tab__text: {
    fontSize: 14,
    color: "#007AFF",
  },
  active: {
    backgroundColor: "#0090FF",
  },
  activeText: {
    color: "white",
  },
  // footerfooter: body
  footer: {
    padding: 15,
    backgroundColor: "#f8f8f8",
  },
  footer__food: {
    marginBottom: 15,
  },
  footer__food__title: {
    width: "100%",
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  footer__food__text: {
    fontSize: 14,
    fontWeight: "bold",
    marginBottom: 10,
  },
  footer__food__items: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  footer__food__item: {
    width: 120,
    height: 100,
    borderRadius: 15,
    marginRight: 10,
  },
  footer__item__text: {
    textAlign: "center",
    fontWeight: "300",
  },
  footer__food__more: {
    fontSize: 14,
    color: "#007AFF",
  },
  footer__map: {
    width: "100%",
    height: 150,
    borderRadius: 10,
    marginBottom: 15,
  },
  footer__action: {
    paddingHorizontal: 15,
    paddingVertical: 5,
    flexDirection: "row",
    // justifyContent: "space-between",
    alignItems: "center",
  },
  footer__price: {
    flexDirection: "column",

    fontSize: 22,
    fontWeight: "bold",
    color: "black",
    width: "50%",
  },
  footer__price__text: {
    fontSize: 16,
    fontWeight: "300",
  },
  footer__button: {
    width: "50%",
    backgroundColor: "#00F598",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 5,
  },
  footer__button__text: {
    fontSize: 16,
    color: "#fff",
    fontWeight: "bold",
    textAlign: "center",
  },
  skeletonStar: {
    width: 24,
    height: 24,
    borderRadius: 4,
  },
  skeletonRatingScore: {
    width: 40,
    height: 20,
    marginLeft: 5,
    borderRadius: 4,
  },
  skeletonRatingText: {
    width: 150,
    height: 16,
    marginTop: 5,
    borderRadius: 4,
  },
  skeletonIcon: {
    width: 16,
    height: 16,
    borderRadius: 4,
  },
  skeletonLocationText: {
    width: 200,
    height: 16,
    marginLeft: 5,
    borderRadius: 4,
  },
  skeletonPrice: {
    width: 100,
    height: 20,
    borderRadius: 4,
  },
});

// const getDetailHotelById = async () => {
//   try {
//     setLoading(true);
//     let response = await fetch(
//       `${API_BASE_URL}/api/hotel/hotel_detail/${hotelId}?checkInDate=2025-04-02&checkOutDate=2025-04-05`,
//       {
//         method: "GET",
//         headers: {
//           "Content-Type": "application/json",
//         },
//       }
//     );
//     if (response.ok) {
//       const result = await response.json();
//       setData(result.data);
//     }
//   } catch (error) {
//     console.error("Error fetching hotel details:", error);
//   } finally {
//     setLoading(false);
//   }
// };

src\Pages\Hotels\HotelRoomList.js
import React, { useEffect, useState } from "react";
import {
  Text,
  View,
  ImageBackground,
  Image,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { useAppSelector, useAppDispatch } from "../../Redux/hook";
import Icon from "react-native-vector-icons/FontAwesome";
import SkeletonHotelRoomList from "../../Components/Skeleton/Hotels/SkeletonHotelRoomList";
import _ from "lodash";
import cloneDeep from "lodash/cloneDeep";
import {
  fetchBookingRoom,
  setNavigateFoodCart,
  update,
  updateBookingPayload,
  updateRoomNumber,
  uppdateListUniqueIdBookingRoom,
} from "../../Redux/Slice/hotelSlice";
import { fetchServicesByCategory } from "../../Redux/Slice/serviceSlice";

// lỗi hotelRoomList ko có giá trị, 1 kiểm tra redux, kiểm tra trang gọi api cho data trang này,kiểm tra lại api room/get_list
// console.log("-------- 22 hotelRoom hotelRoomList:", hotelRoomList);
const HotelRoomList = ({ navigation, route }) => {
  const item = route?.params?.item;
  const {
    hotelRoomList,
    hotelDetail,
    loadingHotelRoomList,
    inforFilter,
    bookingData,
    bookingPayload,
  } = useAppSelector((state) => state.hotel);
  const { serviceList, categories } = useAppSelector((state) => state.service);
  const { token } = useAppSelector((state) => state.auth);
  const dispatch = useAppDispatch();
  const [roomNumber, setRoomNumber] = useState({});
  const initialRoomNumber = () => {
    const newRooms = {};
    if (hotelRoomList && hotelRoomList.length > 0) {
      hotelRoomList.forEach((room) => {
        newRooms[`room${room.roomId}`] = 0;
      });
    }
    // console.log("done");
    return newRooms;
  };

  // console.log(hotelRoomList);

  useEffect(() => {
    if (hotelRoomList && hotelRoomList.length > 0) {
      // Chỉ cập nhật roomNumber nếu nó chưa được khởi tạo (tránh reset giá trị người dùng đã chọn)
      setRoomNumber((prevRoomNumber) => {
        if (Object.keys(prevRoomNumber).length === 0) {
          // Nếu roomNumber còn rỗng, khởi tạo nó
          return initialRoomNumber(hotelRoomList);
        }
        // Nếu roomNumber đã có dữ liệu, chỉ thêm các room mới (nếu có) mà không reset giá trị cũ
        const updatedRoomNumber = { ...prevRoomNumber };
        hotelRoomList.forEach((room) => {
          const roomKey = `room${room.roomId}`;
          if (!(roomKey in updatedRoomNumber)) {
            updatedRoomNumber[roomKey] = 0;
          }
        });
        return updatedRoomNumber;
      });
    }
  }, [hotelRoomList]);

  // console.log(">>> 51 HTL >>>", hotelRoomList);
  // console.log(">>> 52 HTL >>>", roomNumber);
  // console.log(">>> 40 HTL >>>", bookingPayload);

  const updateDateRoomNumber = (name, type, quantity) => {
    // console.log(quantity);
    setRoomNumber((prevRoomNumber) => {
      const newRoomNumber = { ...prevRoomNumber };
      if (type === "add" && newRoomNumber[name] < quantity) {
        newRoomNumber[name] += 1;
      } else if (type === "sub" && newRoomNumber[name] > 0) {
        newRoomNumber[name] -= 1;
      }
      return newRoomNumber;
    });
  };

  useEffect(() => {
    const roomRequestList = Object.keys(roomNumber)
      .filter((key) => +roomNumber[key] > 0)
      .flatMap((key) => {
        const roomId = parseInt(key.replace("room", ""), 10);
        const room = hotelRoomList.find((r) => r.roomId === roomId);
        return Array(roomNumber[key])
          .fill()
          .map((_, index) => {
            const uniqueId = `room${roomId}_${index + 1}`;
            const existingRoom = bookingPayload.roomRequestList?.find(
              (r) => r.uniqueId === uniqueId
            );
            return {
              uniqueId: uniqueId,
              roomId: roomId,
              adults: inforFilter.adults,
              children: inforFilter.children,
              price: room ? room.price : 0,
              serviceList: existingRoom ? existingRoom.serviceList : [],
              roomName: room.roomName,
            };
          });
      });
    // serviceIdList;
    const bookingPayload_ = {
      ...bookingPayload,
      roomRequestList: roomRequestList,
    };

    dispatch(updateBookingPayload(bookingPayload_));
  }, [roomNumber]);
  const hasSelectedRooms = Object.values(roomNumber).some((count) => count > 0);

  const handleToInfoConfirm = () => {
    // console.log(">>> 105 HTL  >>> bookingPayload:", bookingPayload);
    const roomQuantities = Object.keys(roomNumber).reduce((acc, key) => {
      const roomId = parseInt(key.replace("room", ""));
      acc.push({
        roomId: roomId,
        quantity: roomNumber[key],
      });
      return acc;
    }, []);
    // dispatch(updateRoomNumber(roomQuantities));

    dispatch(fetchServicesByCategory(roomQuantities));
    navigation.navigate("InfoConfirm");
  };

  const handleToOrderFood = () => {
    dispatch(setNavigateFoodCart("InfoConfirm"));
    // const roomQuantities =
    // console.log(
    //   "-------------------------------------------------------------"
    // );
    const roomQuantities = Object.keys(roomNumber).reduce((acc, key) => {
      const roomId = parseInt(key.replace("room", ""));
      acc.push({
        roomId: roomId,
        quantity: roomNumber[key],
      });
      return acc;
    }, []);
    // console.log(roomQuantities);
    // console.log(
    //   "-------------------------------------------------------------"
    // );

    // dispatch(updateRoomNumber(roomQuantities));
    dispatch(fetchServicesByCategory(roomQuantities));
    navigation.navigate("OrderFood");
  };

  if (loadingHotelRoomList) {
    return <SkeletonHotelRoomList />;
  }

  console.log(">>> full ảnh", item);

  const RoomItem = ({ room }) => {
    // console.log(room.serviceEntityList);
    return (
      <View style={styles.card}>
        {/* Hình ảnh phòng */}
        <Image source={{ uri: `${item.imageUrl}` }} style={styles.roomImage} />
        {/* Tiêu đề và số lượng phòng */}
        <View style={styles.header}>
          <Text style={styles.roomName}>{room.roomName}</Text>
          <Text style={styles.roomQuantity}>Còn {room.roomQuantity} phòng</Text>
        </View>
        {/* Thông tin cơ bản */}
        <View style={styles.info}>
          <View style={styles.infoItem}>
            <Ionicons
              name="expand-outline"
              size={15}
              color="#191D39"
              style={styles.iconItem}
            />
            <Text style={styles.infoText}>Diện tích {room.area} m²</Text>
          </View>
          <View style={styles.infoItem}>
            <Ionicons
              name="bed-outline"
              size={15}
              color="#191D39"
              style={styles.iconItem}
            />
            <Text style={styles.infoText}>Giường: {room.bed}</Text>
          </View>
          <View style={styles.infoItem}>
            <Ionicons
              name="calendar-number-outline"
              size={15}
              color="#191D39"
              style={styles.iconItem}
            />
            <Text style={styles.infoText}>
              Số ngày chọn: {room.roomQuantity}
            </Text>
          </View>
        </View>
        {/* Dịch vụ */}
        <View style={styles.services}>
          {room?.serviceEntityList?.map((service) => (
            <View key={service.id} style={styles.serviceItem}>
              <Ionicons name="checkmark-circle" size={15} color="#4DD0E1" />
              <Text style={styles.serviceText}>{service.name}</Text>
            </View>
          ))}
        </View>
        {/* •  */}
        <View style={styles.policies}>
          {room?.policyRoomList?.map((policy) => (
            <View key={policy.policyId} style={styles.policyItem}>
              <Ionicons
                name="newspaper-outline"
                size={15}
                color="#191D39"
                style={styles.iconPolicy}
              />
              <Text style={styles.policyText}>
                {policy.policyName}: {policy.policyDescription}
              </Text>
            </View>
          ))}
        </View>
        {/* Khuyến mãi */}
        <View style={styles.groupPromotion}>
          <View style={styles.promotion}>
            {room?.promotion?.name && (
              <View style={styles.promotionView}>
                <Ionicons
                  name="bookmarks-outline"
                  size={15}
                  color="#191D39"
                  style={styles.iconPolicy}
                />
                <Text style={styles.promotionText}>{room.promotion.name}</Text>
              </View>
            )}
          </View>
          {room?.promotion?.discountValue && (
            <View style={styles.discountBadge}>
              <Text style={styles.discountText}>
                Giảm {room.promotion.discountValue}
              </Text>
            </View>
          )}
        </View>

        <View style={styles.br}></View>
        {/* Giá */}
        <View style={styles.priceContainer}>
          <View style={styles.priceWrapper}>
            <View style={styles.discountedPriceView}>
              <Text style={styles.discountedPrice}>
                {room.price.toLocaleString()}đ
              </Text>
              <Text style={styles.originalPrice}>
                {room.promotionPrice.toLocaleString()}đ
              </Text>
            </View>
          </View>
        </View>
        {/* Nút Chọn và tùy chỉnh */}
        {roomNumber[`room${room.roomId}`] === 0 ? (
          <TouchableOpacity
            style={styles.selectButton}
            onPress={() =>
              updateDateRoomNumber(
                `room${room.roomId}`,
                "add",
                room.roomQuantity
              )
            }
          >
            <Text style={styles.selectButtonText}>Chọn </Text>
          </TouchableOpacity>
        ) : (
          <View style={styles.groupButton}>
            <TouchableOpacity
              style={styles.decreaseButton}
              onPress={() =>
                updateDateRoomNumber(
                  `room${room.roomId}`,
                  "sub",
                  room.roomQuantity
                )
              }
            >
              <Text style={styles.decreaseButtonText}> - </Text>
              {/* <Ionicons name="remove-circle-outline" size={24} color="#fff" /> */}
            </TouchableOpacity>
            <View style={styles.valueButton}>
              <Text style={styles.valueButtonText}>
                {roomNumber[`room${room.roomId}`]}
              </Text>
            </View>
            <TouchableOpacity
              style={styles.increaseButton}
              onPress={() =>
                updateDateRoomNumber(
                  `room${room.roomId}`,
                  "add",
                  room.roomQuantity
                )
              }
            >
              <Text style={styles.increaseButtonText}> + </Text>
              {/* <Ionicons name="add-circle-outline" size={24} color="#fff" /> */}
            </TouchableOpacity>
          </View>
        )}
      </View>
    );
  };
  // khi mình bấm vào nút chọn thì dữ liệu sẽ nhảy thành 3 nút, - giá trị +
  // mỗi một item đều có một nút chọn riêng
  // chỉ cần 1 phòng có nút chọn khác 1 thì sẽ hiện nút đặt ngay lênlên
  return (
    <>
      <ScrollView
        contentContainerStyle={[
          styles.listContainer,
          hasSelectedRooms && styles.listContainerPlus,
        ]}
      >
        <View style={styles.header__overlay}>
          <View style={styles.header__overlay__image}>
            <Image
              source={{
                uri: `${item.imageUrl}`,
              }}
              style={styles.rateDetail__photo}
            />
          </View>
          <View style={styles.header__overlay__content}>
            <View>
              <Text style={styles.header__title}>{item.hotelName}</Text>
            </View>
            <View style={styles.header__label}>
              <Text style={styles.header__desc}>
                {hotelDetail && hotelDetail.review.rating}
              </Text>
              <Text style={styles.header__desc}>
                {hotelDetail && hotelDetail.review.location}
              </Text>
            </View>
          </View>
        </View>
        <View style={styles.header}></View>
        {hotelRoomList?.map((room) => (
          <RoomItem key={room.roomId} room={room} />
        ))}
      </ScrollView>

      {hasSelectedRooms && (
        <View style={styles.bookNowButton} onPress={() => {}}>
          <TouchableOpacity
            style={styles.bookNowButtonTextWapper}
            onPress={() => handleToOrderFood()}
          >
            <Text style={styles.bookNowButtonText}>Đặt dịch vụ</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.bookNowButtonTextWapper}
            onPress={() => handleToInfoConfirm()}
          >
            <Text style={styles.bookNowButtonText}>Đặt phòng ngay</Text>
          </TouchableOpacity>
        </View>
      )}
    </>
  );
};
export default HotelRoomList;
const styles = StyleSheet.create({
  listContainer: {
    padding: 0,
    backgroundColor: "#E0E0E0", // Nền xanh lam nhạt
    // marginBottom: 50,
  },
  listContainerPlus: {
    // paddingBottom: 20,
  },
  card: {
    backgroundColor: "#FFFFFF", // Thẻ trắng
    borderRadius: 12,
    padding: 8,
    marginBottom: 8,
    margin: 8,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3, // Shadow cho Android
  },
  roomImage: {
    width: "100%",
    height: 180,
    borderRadius: 12,
    marginBottom: 8,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 8,
  },
  roomName: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#000000",
  },
  roomQuantity: {
    fontSize: 10,
    color: "#B0BEC5", // Xám nhạt
  },
  info: {
    marginBottom: 8,
  },
  infoItem: {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
  },
  iconItem: {
    marginRight: 5,
  },
  infoText: {
    fontSize: 12,
    color: "#424242", // Xám đậm
    marginBottom: 2,
  },
  services: {
    flexDirection: "row",
    flexWrap: "wrap",
    marginBottom: 8,
  },
  serviceItem: {
    flexDirection: "row",
    alignItems: "center",
    marginRight: 12,
    marginBottom: 4,
  },
  serviceText: {
    fontSize: 10,
    color: "#424242", // Xám đậm
    marginLeft: 4,
  },
  policies: {
    marginBottom: 8,
  },
  iconPolicy: {
    marginRight: 5,
  },
  policyItem: {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    marginBottom: 4, // Thêm khoảng cách giữa các policy
  },
  policyText: {
    fontSize: 10,
    color: "#424242",
    marginBottom: 2,
    flexShrink: 1, // Cho phép Text co lại để xuống dòng
  },
  groupPromotion: {
    flexDirection: "row",
  },
  promotion: {
    marginBottom: 8,
    backgroundColor: "#FCDB36",
    alignSelf: "flex-start",
    padding: 5,
    paddingHorizontal: 10,
    borderRadius: 5,
    marginRight: 5,
  },
  promotionView: {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
  },
  promotionText: {
    fontSize: 14,
    fontWeight: "700",
    color: "#181E3C", // Xanh lam đậm
  },
  br: {
    marginTop: 5,
    borderBottomColor: "#E0E0E0",
    borderBottomWidth: 1,
    marginBottom: 5,
  },
  priceContainer: {
    marginBottom: 8,
  },
  priceWrapper: {
    //     alignItems: "flex-end",
  },
  discountedPriceView: {
    alignItems: "center",
    justifyContent: "flex-end",
    flexDirection: "row",
    marginBottom: 5,
  },
  discountedPrice: {
    fontSize: 26,
    fontWeight: "900",
    color: "#000000", // Màu đen
    textAlign: "center",
  },
  originalPriceWrapper: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 4,
  },
  originalPrice: {
    fontSize: 16,
    color: "black", // Màu đỏ
    textDecorationLine: "line-through",
    marginRight: 8,
  },
  discountBadge: {
    backgroundColor: "#00F598", // Xanh lá
    borderRadius: 5,
    paddingVertical: 5,
    paddingHorizontal: 8,
    alignSelf: "flex-start",
    marginBottom: 5,
  },
  discountText: {
    fontSize: 14,
    color: "#FFFFFF", // Chữ trắng
    fontWeight: "bold",
  },
  totalPrice: {
    fontSize: 12,
    color: "#000000", // Màu đen
    marginTop: 4,
  },
  roomAvailability: {
    fontSize: 12,
    color: "#D32F2F", // Màu đỏ
    marginTop: 4,
  },
  selectButton: {
    backgroundColor: "#00F598", // Xanh dương
    borderRadius: 12,
    paddingVertical: 12,
    alignItems: "center",
    width: "60%", // Full width
    alignSelf: "center",
    marginTop: 5,
  },
  selectButtonText: {
    color: "#FFFFFF",
    fontSize: 16,
    fontWeight: "bold",
  },
  header: {
    backgroundColor: "#fff",
  },
  header__image: {
    width: "100%",
    height: 250,
    justifyContent: "space-between",
  },
  iconBack: {
    textShadowColor: "rgba(0, 0, 0, 0.75)",
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 5,
  },
  header__overlay: {
    width: "100%",
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    alignSelf: "center",
    //     padding: 20,
    paddingHorizontal: 20,
    paddingVertical: 15,
    backgroundColor: "#DFDFDF",
  },
  header__icon__start: {
    marginLeft: "auto",
  },
  header__label: {
    flexDirection: "row",
  },
  header__title: {
    textAlign: "center",
    fontSize: 24,
    fontWeight: "bold",
    color: "black",
    marginLeft: 0,
    // textShadowColor: "rgba(0, 0, 0, 0.75)",
    // textShadowOffset: { width: 1, height: 1 },
    // textShadowRadius: 5,
  },
  header__desc: {
    textAlign: "center",
    fontSize: 16,
    fontWeight: "400",
    color: "black",
    marginLeft: 5,
  },
  header__info: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 15,
    alignItems: "flex-end",
  },
  header__rating: {
    flexDirection: "column",
    alignItems: "flex-star",
  },
  header__rating__group: {
    flexDirection: "row",
    width: 200,
    alignItems: "center",
    // justifyContent: "space-between",
  },
  header__rating__score: {
    fontSize: 16,
    fontWeight: "400",
    color: "white",
    paddingVertical: 2,
    paddingHorizontal: 6,
    borderRadius: 5,
    marginLeft: 5,
  },
  iconStart: {
    fontSize: 16,
  },
  header__rating__text: {
    fontSize: 14,
    color: "white",
  },
  header__location: {
    fontSize: 14,
    color: "white",
    width: 100,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    color: "white",
  },
  header__location__text: {
    marginLeft: 5,
  },
  groupButton: {
    marginTop: 5,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    width: "60%",
    alignSelf: "center",
  },
  decreaseButton: {
    backgroundColor: "#00F598", // Xanh dương
    borderRadius: 8,
    padding: 12,
    // width: "10%",
  },
  decreaseButtonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
  },
  valueButton: {
    backgroundColor: "#00F598", // Xanh dương
    borderRadius: 8,
    padding: 12,
    marginHorizontal: 5,
    flex: 1,
  },
  valueButtonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
    textAlign: "center",
  },
  increaseButton: {
    backgroundColor: "#00F598", // Xanh dương
    borderRadius: 8,
    padding: 12,
  },
  increaseButtonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
    // width: "10%",
  },
  marginForBookNowButton: {
    marginBottom: 80,
  },
  bookNowButton: {
    // position: "absolute",
    // bottom: 10,
    // right: 10,
    // left: 10,
    marginHorizontal: 5,
    marginVertical: 5,
    backgroundColor: "white", // Màu nổi bật, bạn có thể thay đổi
    borderRadius: 12,
    paddingVertical: 6,
    paddingHorizontal: 6,
    elevation: 5, // Đổ bóng cho Android
    shadowColor: "#000", // Đổ bóng cho iOS
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    flexDirection: "row",
    justifyContent: "space-between",
    // alignItems: "center",
  },
  bookNowButtonTextWapper: {
    width: "49%",
    backgroundColor: "#00F598",
    borderRadius: 12,
    paddingVertical: 12,
    paddingHorizontal: 20,
  },
  bookNowButtonText: {
    color: "#FFFFFF",
    fontSize: 16,
    fontWeight: "bold",
    textAlign: "center",
  },
  backR: {
    backgroundColor: "red",
  },
  rateDetail__photo: {
    width: 100,
    height: 100,
    borderRadius: 10,
  },
  header__overlay__content: {
    marginLeft: 10,
    paddingHorizontal: 20,
    paddingVertical: 15,
  },
});

src\Pages\Hotels\InfoConfirmScreen.js
import React, { useEffect, useState, useLayoutEffect } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
  Alert,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import {
  fetchUserInfo,
  setPrePage,
  updateInforUserChange,
} from "../../Redux/Slice/authSlice";
import {
  fetchBookingRoom,
  updateBookingPayload,
} from "../../Redux/Slice/hotelSlice";
import SkeletonInfoConfirm from "../../Components/Skeleton/Auth/SkeletonInfoConfirm";

const InfoConfirmScreen = ({ navigation }) => {
  const dispatch = useAppDispatch();

  const {
    isLoggedIn,
    infoUser,
    inforUserChange,
    loadingInfoUser,
    error,
    accessToken,
  } = useAppSelector((state) => state.auth);

  const { bookingPayload, listUniqueIdBookingRoom } = useAppSelector(
    (state) => state.hotel
  );
  console.log("infoUser", infoUser);
  console.log("inforUserChange", inforUserChange);

  const [infomation, setInfomation] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phoneNumber: "",
    phoneCountry: "+84",
  });

  const [errors, setErrors] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phoneNumber: "",
  });

  useEffect(() => {
    if (isLoggedIn && !infoUser) {
      dispatch(fetchUserInfo());
    }
  }, [isLoggedIn, accessToken, dispatch]);

  useEffect(() => {
    if (isLoggedIn && infoUser) {
      // Ưu tiên inforUserChange nếu tồn tại, nếu không dùng infoUser
      const source = inforUserChange || infoUser;
      setInfomation({
        firstName: source.firstName || "",
        lastName: source.lastName || "",
        email: source.email || "",
        phoneNumber: source.phone || source.phoneNumber || "",
        phoneCountry: source.phoneCountry || "+84",
      });
    }
  }, [infoUser, inforUserChange]);

  const validateForm = () => {
    let valid = true;
    const newErrors = {
      firstName: "",
      lastName: "",
      email: "",
      phoneNumber: "",
    };

    if (!infomation.firstName.trim()) {
      newErrors.firstName = "Họ là bắt buộc *";
      valid = false;
    }
    if (!infomation.lastName.trim()) {
      newErrors.lastName = "Tên là bắt buộc *";
      valid = false;
    }
    if (!infomation.email.trim()) {
      newErrors.email = "Email là bắt buộc *";
      valid = false;
    } else if (!/\S+@\S+\.\S+/.test(infomation.email)) {
      newErrors.email = "Email không hợp lệ *";
      valid = false;
    }
    if (!infomation.phoneNumber.trim()) {
      newErrors.phoneNumber = "Số điện thoại là bắt buộc *";
      valid = false;
    } else if (!/^\d{10}$/.test(infomation.phoneNumber)) {
      newErrors.phoneNumber = "Số điện thoại phải có 10 chữ số *";
      valid = false;
    }

    setErrors(newErrors);
    return valid;
  };

  const onChangeInfomation = (value, name) => {
    setInfomation((prev) => ({ ...prev, [name]: value }));
    setErrors((prev) => ({ ...prev, [name]: "" }));
  };

  const handleLogin = () => {
    dispatch(setPrePage("InfoConfirm"));
    navigation.navigate("LoginScreen", { preScreen: "InfoConfirm" });
  };

  const handleInfoConfirm = async () => {
    if (isLoggedIn) {
      if (!validateForm()) {
        return;
      }

      try {
        // Lưu thông tin chỉnh sửa cục bộ
        dispatch(
          updateInforUserChange({
            firstName: infomation.firstName,
            lastName: infomation.lastName,
            email: infomation.email,
            phone: infomation.phoneNumber,
            phoneCountry: infomation.phoneCountry,
          })
        );
        const bookingPayload_ = {
          ...bookingPayload,
          customerName: infomation.lastName,
          customerEmail: infomation.email,
          customerPhone: infomation.phoneNumber,
        };
        dispatch(updateBookingPayload(bookingPayload_));

        // Gọi fetchBookingRoom và điều hướng
        dispatch(fetchBookingRoom());
        navigation.navigate("OrderConfirm");
      } catch (error) {
        console.error("Error:", error);
        Alert.alert("Lỗi", error.message || "Xử lý thông tin thất bại");
      }
    } else {
      handleLogin();
    }
  };

  if (loadingInfoUser) {
    return <SkeletonInfoConfirm />;
  }

  return (
    <KeyboardAvoidingView
      style={{ flex: 1 }}
      behavior={Platform.OS === "ios" ? "padding" : "height"}
      keyboardVerticalOffset={Platform.OS === "ios" ? 60 : 0}
    >
      <View style={styles.container}>
        {isLoggedIn && (
          <>
            <Text style={styles.title}>THÔNG TIN CÁ NHÂN</Text>

            <View
              style={[
                styles.inputContainer,
                errors.firstName && styles.inputError,
              ]}
            >
              <Ionicons
                name="person-outline"
                size={20}
                color="#007AFF"
                style={styles.icon}
              />
              <TextInput
                style={styles.input}
                value={infomation.firstName}
                onChangeText={(value) => onChangeInfomation(value, "firstName")}
                placeholder="Họ *"
                placeholderTextColor="#999"
                editable={isLoggedIn}
              />
              {errors.firstName ? (
                <Text style={styles.errorText}>{errors.firstName}</Text>
              ) : null}
            </View>

            <View
              style={[
                styles.inputContainer,
                errors.lastName && styles.inputError,
              ]}
            >
              <Ionicons
                name="person-outline"
                size={20}
                color="#007AFF"
                style={styles.icon}
              />
              <TextInput
                style={styles.input}
                value={infomation.lastName}
                onChangeText={(value) => onChangeInfomation(value, "lastName")}
                placeholder="Tên *"
                placeholderTextColor="#999"
                editable={isLoggedIn}
              />
              {errors.lastName ? (
                <Text style={styles.errorText}>{errors.lastName}</Text>
              ) : null}
            </View>

            <View
              style={[styles.inputContainer, errors.email && styles.inputError]}
            >
              <Ionicons
                name="mail-outline"
                size={20}
                color="#007AFF"
                style={styles.icon}
              />
              <TextInput
                style={styles.input}
                value={infomation.email}
                onChangeText={(value) => onChangeInfomation(value, "email")}
                placeholder="Email *"
                placeholderTextColor="#999"
                keyboardType="email-address"
                editable={isLoggedIn}
              />
              {errors.email ? (
                <Text style={styles.errorText}>{errors.email}</Text>
              ) : null}
            </View>

            <View
              style={[
                styles.inputContainer,
                errors.phoneNumber && styles.inputError,
              ]}
            >
              <Ionicons
                name="call-outline"
                size={20}
                color="#007AFF"
                style={styles.icon}
              />
              <TextInput
                style={[styles.input]}
                value={infomation.phoneCountry}
                editable={false}
              />
              <TextInput
                style={[styles.input, { flex: 1 }]}
                value={infomation.phoneNumber}
                onChangeText={(value) =>
                  onChangeInfomation(value, "phoneNumber")
                }
                placeholder="Số điện thoại *"
                placeholderTextColor="#999"
                keyboardType="phone-pad"
                editable={isLoggedIn}
              />
              {errors.phoneNumber ? (
                <Text style={styles.errorText}>{errors.phoneNumber}</Text>
              ) : null}
            </View>
          </>
        )}

        {isLoggedIn && (
          <TouchableOpacity
            style={[styles.button, loadingInfoUser && styles.buttonDisabled]}
            onPress={handleInfoConfirm}
            disabled={loadingInfoUser}
          >
            <Text style={styles.buttonText}>
              {loadingInfoUser ? "Đang xử lý..." : "Xác nhận thông tin"}
            </Text>
          </TouchableOpacity>
        )}
        {!isLoggedIn && (
          <TouchableOpacity
            style={styles.wrapperLoginButton}
            onPress={handleLogin}
          >
            <View style={styles.loginButton}>
              <Text style={styles.loginButtonText}>Đăng nhập tài khoản</Text>
            </View>
          </TouchableOpacity>
        )}
      </View>
    </KeyboardAvoidingView>
  );
};

export default InfoConfirmScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    paddingHorizontal: 20,
    paddingVertical: 30,
  },
  title: {
    fontSize: 20,
    fontWeight: "400",
    color: "#000",
    marginTop: 30,
    marginBottom: 50,
    textAlign: "center",
  },
  wrapperLoginButton: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "oranage",
  },
  loginButton: {
    backgroundColor: "#00F598",
    paddingVertical: 12,
    paddingHorizontal: 80,
    borderRadius: 14,
    alignItems: "center",
    marginBottom: 20,
  },
  loginButtonText: {
    fontSize: 16,
    color: "white",
    fontWeight: "400",
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
    marginBottom: 20,
  },
  inputError: {
    borderBottomColor: "#FF0000",
  },
  icon: {
    marginRight: 10,
    marginBottom: 10,
  },
  input: {
    fontSize: 16,
    color: "#000",
    paddingVertical: 10,
    marginBottom: 10,
  },
  phoneCode: {
    fontSize: 16,
    color: "#000",
    marginRight: 10,
  },
  checkIcon: {
    marginLeft: 10,
  },
  errorText: {
    color: "#FF0000",
    fontSize: 12,
    marginTop: 5,
    position: "absolute",
    bottom: -20,
    left: 30,
  },
  button: {
    backgroundColor: "#00F598",
    paddingVertical: 12,
    borderRadius: 14,
    alignItems: "center",
    marginTop: 50,
    marginBottom: 10,
  },
  buttonText: {
    fontSize: 16,
    color: "white",
    fontWeight: "400",
  },
});

src\Pages\Hotels\ListHotelByLocation.js
import React, { useEffect, useLayoutEffect, useState } from "react";
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  Image,
  TouchableOpacity,
  SafeAreaView,
  TextInput,
} from "react-native";
import Icon from "@expo/vector-icons/FontAwesome"; // Sử dụng FontAwesome cho biểu tượng
import Ionicons from "react-native-vector-icons/Ionicons";
import SkeletonListHotelByLocation from "../../Components/Skeleton/Home/SkeletonListHotelByLocation";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import ModalAmenity from "../../Components/Modal/Home/ModalAmenity";
import ModalSort from "../../Components/Modal/Home/ModalSort";
import {
  fetchHotelById,
  fetchHotelByLocation,
  fetchHotelList,
} from "../../Redux/Slice/hotelSlice";
import ModalFilter from "../../Components/Modal/Home/ModalFilter";
const ListHotelByLocation = ({ navigation }) => {
  const [searchText, setSearchText] = useState("");
  const {
    hotelList,
    locationList,
    hotelDetail,
    hotelByLocation,
    loading,
    loadingListHotel,
    error,
    inforFilter,
  } = useAppSelector((state) => state.hotel);

  const modalDefault = {
    Amenity: false,
    FilterBy: false,
    SortBy: false,
  };

  console.log(hotelByLocation);
  const [modalVisible, setModalVisible] = useState({
    modalDefault,
  });

  const dispatch = useAppDispatch();

  useEffect(() => {
    dispatch(fetchHotelList());
    dispatch(fetchHotelByLocation(inforFilter));
  }, [
    inforFilter.amenityIds,
    inforFilter.sortById,
    inforFilter.serviceIds,
    dispatch,
  ]);

  // console.log(">>> 51 listByHotel", hotelByLocation);

  if (loadingListHotel) {
    return <SkeletonListHotelByLocation />;
  }

  //   console.log(">>> 123 ListLocationi", hotelByLocation);

  const handleToHotelDetails = (item) => {
    const id = item?.hotelId;
    dispatch(fetchHotelById(id));
    navigation.navigate("HotelDetails", { item });
    // console.log(item?.hotelId);
  };

  const test = [
    {
      hotelId: 10,
      hotelLocation: "Hà Nội",
      hotelName: "Old Quarter Inn",
      hotelRating: 4.3,
      imageUrl: null,
      price: 875000,
      promotionName: "Ưu đãi đầu năm 2025",
      sumReview: 300,
    },
    {
      hotelId: 2,
      hotelLocation: "Hà Nội",
      hotelName: "Onomo",
      hotelRating: 4.3,
      imageUrl:
        "https://res.cloudinary.com/dt7eo0hbq/image/upload/v1729241122/Room/nipyn0qgyoyhtgkadlyi.jpg",
      price: 950000,
      promotionName: "Ưu đãi đầu năm 2025",
      sumReview: 150,
    },
    {
      hotelId: 11,
      hotelLocation: "Hà Nội",
      hotelName: "Lotus Blossom Resort",
      hotelRating: 4.1,
      imageUrl: null,
      price: 1000000,
      promotionName: null,
      sumReview: 250,
    },
    {
      hotelId: 13,
      hotelLocation: "Hà Nội",
      hotelName: "Tràng An Plaza",
      hotelRating: 4.4,
      imageUrl: null,
      price: 1125000,
      promotionName: "Giảm giá mùa hè",
      sumReview: 320,
    },
    {
      hotelId: 12,
      hotelLocation: "Hà Nội",
      hotelName: "Skyline Hotel",
      hotelRating: 4.6,
      imageUrl: null,
      price: 1250000,
      promotionName: "Ưu đãi cuối tuần",
      sumReview: 380,
    },
  ];
  const HotelItem1 = ({ item }) => {
    return (
      <TouchableOpacity
        style={styles.hotelItem1}
        onPress={() => handleToHotelDetails(item)}
      >
        {/* Hình ảnh khách sạn */}
        <View style={styles.image1}>
          <Image
            source={{ uri: item.imageUrl }}
            style={styles.hotelImage1}
            resizeMode="cover"
          />
        </View>

        {/* Thông tin khách sạn */}
        <View style={styles.hotelDetails1}>
          {/* Tên khách sạn và đánh giá */}
          <View style={styles.hotelHeader1}>
            <Text style={styles.hotelName1}>{item.hotelName}</Text>
            <View style={styles.ratingContainer1}>
              <Icon
                name="star"
                size={16}
                color="#EBA731"
                style={styles.starIcon1}
              />
              <Text style={styles.ratingText1}>{item.hotelRating}</Text>
              <Text style={styles.reviewText1}>
                Đánh giá ({item.sumReview})
              </Text>
            </View>
          </View>

          {/* Mô tả */}
          <Text style={styles.description1}>
            Nằm trong khu vực khách quan...
          </Text>
          {item.promotionName && (
            <View style={styles.promotion1}>
              <Text style={styles.promotionText1}>{item.promotionName}</Text>
            </View>
          )}
          {/* Khuyến mãi và giá */}
          <View style={styles.footer1}>
            <Text style={styles.price1}>${item.price}</Text>
            <TouchableOpacity style={styles.bookButton1}>
              <Text style={styles.bookButtonText1}>Đặt ngay</Text>
            </TouchableOpacity>
          </View>
        </View>
      </TouchableOpacity>
    );
  };
  const HotelItem = ({ item }) => {
    return (
      <TouchableOpacity
        style={styles.hotelItem}
        onPress={() => handleToHotelDetails(item)}
      >
        {/* Container chính với flexDirection: row */}
        <View style={styles.hotelContainer}>
          {/* Phần ảnh bên trái */}
          <View style={styles.imageContainer}>
            <Image
              source={{ uri: item.imageUrl }}
              style={styles.hotelImageMain}
              resizeMode="cover"
            />
            <View style={styles.imageRow}>
              <Image
                source={{ uri: item.imageUrl }}
                style={styles.hotelImageSmall1}
                resizeMode="cover"
              />
              <Image
                source={{ uri: item.imageUrl }}
                style={styles.hotelImageSmall}
                resizeMode="cover"
              />
            </View>
          </View>

          {/* Phần thông tin bên phải */}
          <View style={styles.hotelDetails}>
            {/* Tên khách sạn */}
            <Text style={styles.hotelName}>{item?.hotelName}</Text>

            {/* Mô tả */}
            <Text style={styles.description}>
              Nằm trong khu vực khách quan...
            </Text>

            {/* Đánh giá và số nhận xét */}
            <View style={styles.ratingContainer}>
              <View style={styles.ratingBox}>
                <Text style={styles.ratingText}>{item?.hotelRating}</Text>
              </View>
              <View style={styles.ratingBox2}>
                <Text style={styles.reviewCount}>
                  {item?.sumReview} nhận xét
                </Text>
              </View>
            </View>

            {/* Khuyến mãi */}
            {item.promotionName && (
              <View style={styles.promotion}>
                <Text style={styles.promotionText}>{item?.promotionName}</Text>
              </View>
            )}
            {item.promotionValue && (
              <View style={[styles.promotion, { backgroundColor: "#24784E" }]}>
                <Text style={styles.promotionText}>{item?.promotionValue}</Text>
              </View>
            )}

            {/* Giá và nút đặt ngay */}
            <View style={styles.footer}>
              <View style={styles.priceContainer}>
                <View>
                  <Text style={styles.oldPrice}>
                    {/* {Math.round(item.price * 2).toLocaleString()} đ */}
                    {item?.price?.toLocaleString()} đ
                  </Text>
                </View>
                <View>
                  <Text style={styles.price}>
                    {item?.promotionPrice?.toLocaleString()} đ
                  </Text>
                </View>
              </View>
            </View>
            <View style={styles.bookView}>
              <TouchableOpacity
                style={styles.bookButton}
                onPress={() => handleToHotelDetails(item)}
              >
                <Text style={styles.bookButtonText}>Đặt ngay</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </TouchableOpacity>
    );
  };

  console.log(modalVisible);
  return (
    <SafeAreaView style={styles.container}>
      {/* Tiêu đề và số lượng khách sạn */}
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.headerNavi}
          onPress={() => navigation.navigate("Home")}
        >
          <Ionicons
            name="chevron-back"
            size={20}
            color="black"
            style={[styles.searchIcon]}
          />
          <Text style={styles.title}>Khách sạn</Text>
        </TouchableOpacity>
        <Text style={styles.subtitle}>{hotelByLocation?.length} khách sạn</Text>
      </View>

      {/* Thanh tìm kiếm và bộ lọc */}
      <View style={styles.filterContainer}>
        {/* Thanh tìm kiếm */}
        <View style={styles.searchBar}>
          <TouchableOpacity>
            <Ionicons
              name="search-outline"
              size={20}
              color="#0090FF"
              style={[styles.searchIcon]}
            />
          </TouchableOpacity>
          <TextInput
            style={styles.searchText}
            placeholder="Tìm kiếm"
            value={searchText}
            onChangeText={(text) => setSearchText(text)}
          />
          <TouchableOpacity>
            <Ionicons
              name="close-outline"
              size={20}
              color="black"
              style={[styles.searchIcon]}
            />
          </TouchableOpacity>
        </View>

        {/* Bộ lọc */}
        <View style={styles.filterButtons}>
          <TouchableOpacity
            style={styles.filterButton}
            onPress={() =>
              setModalVisible({
                ...modalDefault,
                Amenity: !modalVisible.Amenity,
              })
            }
          >
            <Text style={styles.filterButtonText}>Tiện nghi</Text>
            <Icon name="angle-down" size={25} color="#000000" />
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.filterButton}
            onPress={() =>
              setModalVisible({
                ...modalDefault,
                FilterBy: !modalVisible.FilterBy,
              })
            }
          >
            <Text style={styles.filterButtonText}>Bộ lọc</Text>
            <Icon name="angle-down" size={25} color="#000000" />
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.filterButton}
            onPress={() =>
              setModalVisible({
                ...modalDefault,
                SortBy: !modalVisible.SortBy,
              })
            }
          >
            <Text style={styles.filterButtonText}>Sắp xếp</Text>
            <Icon name="angle-down" size={25} color="#000000" />
          </TouchableOpacity>
        </View>
      </View>

      {/* Danh sách khách sạn */}
      {/* ) : modalVisible.FilterBy ? (
        <ModalFilter
          onClose={() => setModalVisible({ ...modalVisible, FilterBy: false })}
          onApply={handleApplyFilter} // Giả sử bạn có hàm này
        /> */}
      {modalVisible.Amenity ? (
        <ModalAmenity
          onClose={() => setModalVisible({ ...modalVisible, Amenity: false })}
        />
      ) : modalVisible.SortBy ? (
        <ModalSort
          onClose={() => setModalVisible({ ...modalVisible, SortBy: false })}
        />
      ) : modalVisible.FilterBy ? (
        <ModalFilter
          onClose={() => setModalVisible({ ...modalVisible, FilterBy: false })}
        />
      ) : (
        <ScrollView style={styles.scrollView}>
          {/* {hotelByLocation &&
            hotelByLocation?.map((item, index) => (
              <HotelItem1 key={index} item={item} />
            ))} */}
          {hotelByLocation &&
            hotelByLocation?.map((item, index) => (
              <HotelItem key={index} item={item} />
            ))}
        </ScrollView>
      )}
    </SafeAreaView>
  );
};

export default ListHotelByLocation;
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#FFFFFF",
  },
  header: {
    marginTop: 30,
    paddingHorizontal: 15,
    paddingVertical: 10,
  },
  headerNavi: {
    flexDirection: "row",
    alignItems: "center",
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#000000",
  },
  subtitle: {
    fontSize: 16,
    color: "#666666",
    marginTop: 5,
  },
  filterContainer: {
    paddingHorizontal: 15,
    marginBottom: 10,
  },
  searchBar: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#F5F5F5",
    borderRadius: 10,
    //     padding: 10,
    paddingLeft: 10,
    marginBottom: 10,
  },
  searchIcon: {
    marginRight: 10,
    fontWeight: "800",
  },
  searchText: {
    flex: 1,
    fontSize: 16,
    color: "#666666",
  },
  filterButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  filterButton: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 10,
    paddingVertical: 8,
    paddingHorizontal: 12,
    flex: 1,
    marginHorizontal: 5,
    justifyContent: "space-between",
  },
  filterButtonText: {
    fontSize: 14,
    color: "#000000",
  },
  scrollView: {
    flex: 1,
  },
  hotelItem: {
    backgroundColor: "#FFFFFF",
    borderRadius: 15,
    marginHorizontal: 15,
    marginBottom: 10,
    elevation: 3, // Bóng cho Android
    shadowColor: "#000", // Bóng cho iOS
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    borderWidth: 1,
    borderColor: "#E0E0E0",
    height: 280,
    padding: 5,
  },
  hotelContainer: {
    flexDirection: "row", // Ảnh bên trái, thông tin bên phải
    // padding: 10,
  },
  imageContainer: {
    width: "35%", // Ảnh chiếm 40% chiều rộng
    marginRight: 10,
    flexDirection: "column",
    justifyContent: "space-between",
  },
  hotelImageMain: {
    width: "100%",
    height: "65%", // Chiều cao ảnh lớn
    // borderRadius: 5,
    borderTopLeftRadius: 12,
    marginBottom: 5,
  },
  imageRow: {
    height: "33%",
    flexDirection: "row",
    justifyContent: "space-between",
  },
  hotelImageSmall1: {
    width: "48%", // Chiếm 48% để có khoảng cách giữa 2 ảnh
    borderBottomLeftRadius: 12,
    // borderRadius: 12,
  },
  hotelImageSmall: {
    width: "48%", // Chiếm 48% để có khoảng cách giữa 2 ảnh
  },
  hotelDetails: {
    flex: 1, // Thông tin chiếm phần còn lại
    justifyContent: "flex-start",
    padding: 10,
    paddingLeft: 0,
    flexDirection: "column",
  },
  hotelName: {
    fontSize: 18,
    fontWeight: "500",
    color: "#191E38",
    marginBottom: 5,
  },
  description: {
    fontSize: 14,
    color: "#2B2F38",
    marginBottom: 10,
  },
  ratingContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 15,
  },
  ratingBox: {
    backgroundColor: "#24784E", // Màu xanh giống trong hình
    borderRadius: 5,
    paddingVertical: 5,
    paddingHorizontal: 8,
    marginRight: 5,
  },
  ratingBox2: {
    flexDirection: "column",
    alignItems: "center",
  },
  ratingText: {
    fontSize: 12,
    fontWeight: "bold",
    color: "#FFFFFF", // Chữ trắng trong ô xanh
  },
  reviewText: {
    fontSize: 14,
    color: "#191E38", // Màu xanh giống "Ngoại hạng"
    marginRight: 5,
    fontWeight: "bold",
  },
  reviewCount: {
    fontSize: 14,
    color: "#2B2F38",
  },
  promotion: {
    backgroundColor: "#FEDB39", // Màu cam giống trong hình
    borderRadius: 5,
    paddingVertical: 5,
    paddingHorizontal: 10,
    alignSelf: "flex-end",
    marginBottom: 10,
    marignRight: 10,
  },
  promotionText: {
    fontSize: 14,
    color: "white",
    fontWeight: "600",
  },
  footer: {
    // flexDirection: "row",
    // alignItems: "flex-end",
    // justifyContent: "space-between",
  },
  priceContainer: {
    flexDirection: "row",
    justifyContent: "flex-end",
    alignItems: "center",
  },
  oldPrice: {
    fontSize: 12,
    color: "#666666",
    textDecorationLine: "line-through", // Gạch ngang giá cũ
    marginBottom: 2,
  },
  price: {
    fontSize: 24,
    fontWeight: "900",
    color: "#2A2317", // Màu cam giống trong hình
    marginBottom: 10,
  },
  totalPrice: {
    fontSize: 10,
    color: "#666666",
  },
  bookView: {
    marginTop: "auto",
    width: "80%",
    marginHorizontal: "auto",
    textAlign: "center",
  },
  bookButton: {
    backgroundColor: "#24784E", // Màu xanh của nút "Đặt ngay"
    borderRadius: 8,
    paddingVertical: 6,
    paddingHorizontal: 15,
    textAlign: "center",
  },
  bookButtonText: {
    fontSize: 14,
    color: "#FFFFFF",
    fontWeight: "500",
    textAlign: "center",
  },

  //-------------------------------------------
  hotelItem1: {
    backgroundColor: "#FFFFFF",
    borderRadius: 15,
    marginHorizontal: 15,
    marginVertical: 10,
    elevation: 3, // Bóng cho Android
    shadowColor: "#000", // Bóng cho iOS
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
  },
  image1: {
    width: "100%",
    height: "200",
    justifyContent: "center",
    alignItems: "center",
  },
  hotelImage1: {
    width: "95%",
    height: "90%",
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
    borderRadius: 10,
  },
  hotelDetails1: {
    padding: 10,
  },
  hotelHeader1: {
    marginBottom: 5,
  },
  hotelName1: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#000000",
  },
  ratingContainer1: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 5,
  },
  starIcon1: {
    marginRight: 5,
  },
  ratingText1: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
    marginRight: 5,
  },
  reviewText1: {
    fontSize: 14,
    color: "#666666",
    marginLeft: 40,
  },
  description1: {
    fontSize: 14,
    color: "#666666",
    marginBottom: 10,
  },
  footer1: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
  },
  promotion1: {
    backgroundColor: "#F8D146",
    borderRadius: 8,
    paddingVertical: 5,
    paddingHorizontal: 10,
    alignSelf: "flex-start",
  },
  promotionText1: {
    fontSize: 14,
    color: "#FFFFFF",
    fontWeight: "400",
  },
  price1: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
    marginLeft: 20,
  },
  bookButton1: {
    backgroundColor: "#00F598", // Màu xanh theo yêu cầu
    borderRadius: 10,
    paddingVertical: 5,
    paddingHorizontal: 30,
  },
  bookButtonText1: {
    fontSize: 14,
    color: "#FFFFFF",
    fontWeight: "400",
  },
});

src\Pages\Hotels\OrderConfirmScreen.js
import React, { useEffect, useLayoutEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  SafeAreaView,
  ScrollView,
  ActivityIndicator,
  Alert,
} from "react-native";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import Ionicons from "react-native-vector-icons/Ionicons";
import getServiceIcon from "../../Components/Icon/getServiceIcon";
import {
  fetchBookingRoom,
  setNavigateFoodCart,
  updateBookingPayload,
} from "../../Redux/Slice/hotelSlice";
import SkeletonOrderConfirm from "../../Components/Skeleton/Hotels/SkeletonOrderConfirm";
import { formatPrice } from "../../Utils/formarPrice";
import { fetchListPromotion } from "../../Redux/Slice/promotionSlice";
import {
  fetchPaymentOrder,
  resetPaymentData,
} from "../../Redux/Slice/paymentSlice";
import ReusableModal from "../../Components/Modal/FlexibleModal/ReusableModal";
import cloneDeep from "lodash/cloneDeep";
const OrderConfirmScreen = ({ navigation }) => {
  const [paymentMethod, setPaymentMethod] = useState("ZaloPay");
  const [isLoading, setIsLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [modalType, setModalType] = useState("confirm");
  const [modalTitle, setModalTitle] = useState("");
  const [modalMessage, setModalMessage] = useState("");

  const { inforUserChange, infoUser } = useAppSelector((state) => state.auth);
  const {
    bookingData,
    bookingPayload,
    listUniqueIdBookingRoom,
    loadingBookingRoom,
  } = useAppSelector((state) => state.hotel);
  const { paymentData, loadingPayment, error } = useAppSelector(
    (state) => state.payment
  );

  console.log(">>>>> check dataa");
  console.log(bookingData);
  console.log(bookingPayload);
  const dispatch = useAppDispatch();
  const listRoom = bookingData?.roomBookedList;

  const showModal = (type, title, message) => {
    setModalType(type);
    setModalTitle(title);
    setModalMessage(message);
    setModalVisible(true);
  };

  useEffect(() => {
    const bookingPayload_ = {
      ...bookingPayload,
      couponId: bookingData?.couponId,
      couponCode: bookingData?.couponCode,
    };
    dispatch(updateBookingPayload(bookingPayload_));
  }, [bookingData]);
  // Reset paymentData khi vào màn hình
  useEffect(() => {
    dispatch(resetPaymentData());
    return () => {
      dispatch(resetPaymentData());
    };
  }, [dispatch]);

  // Theo dõi paymentData để điều hướng
  useEffect(() => {
    if (
      paymentData &&
      paymentData.orderUrl !== "" &&
      paymentData.appTransId !== ""
    ) {
      console.log("Dữ liệu API trả về:", paymentData);
      setIsLoading(false);
      navigation.navigate("PaymentWebViewScreenQuan", {
        orderUrl: paymentData.orderUrl,
      });
    } else if (!loadingPayment && error) {
      console.error("Payment error:", error);
      Alert.alert("Lỗi", error || "Lỗi tạo thanh toán");
      setIsLoading(false);
    }
  }, [paymentData, loadingPayment, error, navigation]);

  // Gọi fetchBookingRoom khi bookingPayload thay đổi
  useEffect(() => {
    dispatch(fetchBookingRoom(bookingPayload));
  }, [bookingPayload?.roomRequestList, dispatch]);

  const getUniqueServiceTypes = (serviceSelect) => {
    const serviceTypes = new Set(
      serviceSelect?.map((service) => service.serviceType) || []
    );
    return Array.from(serviceTypes);
  };

  const handleToOrderFood = () => {
    dispatch(setNavigateFoodCart("OrderConfirm"));
    navigation.navigate("OrderFood", { prePage: "OrderConfirm" });
  };

  const handleToSale = () => {
    const totalPrice =
      +bookingData?.totalPriceRoom + +bookingData?.totalPriceService;
    const code = bookingPayload?.couponId;
    dispatch(fetchListPromotion({ code, totalPrice }));
    navigation.navigate("Discount", { prePage: "OrderConfirm" });
  };

  const handlePayment = async () => {
    setIsLoading(true);
    try {
      await dispatch(fetchPaymentOrder(bookingPayload)).unwrap();
      console.log("Dữ liệu gửi lên API:", bookingPayload);
    } catch (error) {
      console.error("Payment error:", error);
      Alert.alert("Lỗi", error.message || "Lỗi tạo thanh toán");
      setIsLoading(false);
    }
  };

  const handleToPolicy = (item) => {
    navigation.navigate("AllPolicy", { data: item?.policyBooked });
  };

  const renderListRoom = (item) => (
    <View style={styles.roomWrapper}>
      <View style={styles.roomInfo}>
        <Text style={styles.roomLabel}>Tên Phòng</Text>
        <Text style={styles.roomValue}>{item?.roomName}</Text>
      </View>
      <View style={styles.roomInfo}>
        <Text style={styles.roomLabel}>Loại phòng</Text>
        <Text style={styles.roomValue}>{item?.roomType}</Text>
      </View>
      <View style={styles.roomInfo}>
        <Text style={styles.roomLabel}>Số khách</Text>
        <Text style={styles.roomValue}>{item?.adults} người</Text>
      </View>
      <View style={styles.roomInfo}>
        <Text style={styles.roomLabel}>Giá</Text>
        <Text style={styles.roomValue}>{formatPrice(item?.priceRoom)}</Text>
      </View>
      <View style={styles.roomInfoService}>
        <View style={styles.roomInfoServiceText}>
          <Text style={styles.roomLabel}>Dịch vụ</Text>
        </View>
        <View style={styles.serviceIcons}>
          {item?.serviceSelect?.length > 0 ? (
            getUniqueServiceTypes(item.serviceSelect).map((type) => (
              <TouchableOpacity
                key={type}
                style={styles.iconWrapper}
                onPress={handleToOrderFood}
              >
                {getServiceIcon(type)}
              </TouchableOpacity>
            ))
          ) : (
            <TouchableOpacity onPress={handleToOrderFood}>
              <Ionicons name="add-outline" size={24} color="#007AFF" />
            </TouchableOpacity>
          )}
        </View>
      </View>
      <View style={styles.roomInfo}>
        <Text style={styles.roomLabel}>Điều kiện</Text>
        <TouchableOpacity
          onPress={() => handleToPolicy(item)}
          style={[styles.roomValue, { fontWeight: "bold", color: "#007AFF" }]}
        >
          <View>
            <Text style={{ fontWeight: "bold", color: "#007AFF" }}>
              Xem thêm
            </Text>
          </View>
          <View>
            <Ionicons
              name="chevron-forward-outline"
              size={18}
              color="#007AFF"
            />
          </View>
        </TouchableOpacity>
      </View>
    </View>
  );

  if (loadingBookingRoom) {
    return <SkeletonOrderConfirm />;
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.mainContainer}>
        <View style={styles.headerSection}>
          <Text style={[styles.title, styles.titleCenter]}>
            Thông tin khách hàng
          </Text>
          <View style={styles.infoSection}>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Tên</Text>
              <Text style={styles.infoValue}>
                {(inforUserChange || infoUser)?.lastName}
              </Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Email</Text>
              <Text style={styles.infoValue}>
                {(inforUserChange || infoUser)?.email}
              </Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Số điện thoại</Text>
              <Text style={styles.infoValue}>
                +84 {(inforUserChange || infoUser)?.phone}
              </Text>
            </View>
          </View>
          <View style={styles.br} />
        </View>

        <View style={styles.headerSection}>
          <Text style={[styles.title, styles.titleCenter]}>
            Thông tin khách sạn
          </Text>
          <View style={styles.infoSection}>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Tên khách sạn</Text>
              <Text style={styles.infoValue}>{bookingData?.hotelName}</Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Vị trí khách sạn</Text>
              <Text style={styles.infoValue}>{bookingData?.hotelAddress}</Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Tổng người lớn</Text>
              <Text style={styles.infoValue}>{bookingData?.totalAdults}</Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>CheckIn</Text>
              <Text style={styles.infoValue}>{bookingData?.checkIn}</Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>CheckOut</Text>
              <Text style={styles.infoValue}>{bookingData?.checkOut}</Text>
            </View>
          </View>
          <View style={styles.br} />
        </View>

        <View style={styles.roomsSection}>
          <Text style={styles.subTitle}>Phòng đặt</Text>
          <ScrollView showsVerticalScrollIndicator={false}>
            {listRoom?.map((item, index) => (
              <View key={item.uniqueId}>{renderListRoom(item)}</View>
            ))}
          </ScrollView>
          <View style={styles.br} />
        </View>

        <View style={styles.headerSection}>
          <View style={styles.infoSection}>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Mã giảm giá</Text>
              {bookingPayload?.couponCode && (
                <TouchableOpacity
                  style={styles.wrapperInfoValueSale}
                  onPress={handleToSale}
                >
                  <Ionicons name="bookmark-outline" size={18} color="#007AFF" />
                  <Text style={styles.infoValueSale}>
                    {bookingPayload?.couponCode}
                  </Text>
                </TouchableOpacity>
              )}
              {!bookingPayload?.couponCode && (
                <TouchableOpacity
                  // style={styles.wrapperInfoValueSale}
                  onPress={handleToSale}
                >
                  <Ionicons name="add-outline" size={18} color="#007AFF" />
                  <Text style={styles.infoValueSale}>
                    {bookingPayload?.couponCode}
                  </Text>
                </TouchableOpacity>
              )}
            </View>
          </View>
        </View>

        <View style={styles.headerSection}>
          <Text style={[styles.title, styles.titleCenter]}>Hóa đơn</Text>
          <View style={styles.infoSection}>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Giá tiền phòng</Text>
              <Text style={styles.infoValue}>
                {formatPrice(bookingData?.totalPriceRoom)}
              </Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabelSale}>Giá tiền dịch vụ</Text>
              <Text style={styles.infoValue}>
                {formatPrice(bookingData?.totalPriceService)}
              </Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Mã giảm giá</Text>
              <Text style={styles.infoValue}>
                {formatPrice(bookingData?.priceCoupon)}
              </Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Giá tiền cọc </Text>
              <Text style={styles.infoValue}>
                {formatPrice(bookingData?.priceDeposit)}
              </Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Giá cuối cùng</Text>
              <Text style={styles.infoValue}>
                {formatPrice(bookingData?.finalPrice)}
              </Text>
            </View>
          </View>
          <View style={styles.br} />
        </View>
      </ScrollView>
      <View style={styles.footerSection}>
        <View style={styles.br} />
        <Text style={styles.subTitle}>Phương thức thanh toán</Text>
        <View style={styles.infoSectionLast}>
          <TouchableOpacity
            style={styles.paymentOption}
            onPress={() => setPaymentMethod("ZaloPay")}
          >
            <View style={styles.radioCircle}>
              {paymentMethod === "ZaloPay" && (
                <View style={styles.selectedRadio} />
              )}
            </View>
            <Text style={styles.paymentText}>ZaloPay</Text>
          </TouchableOpacity>
        </View>

        <TouchableOpacity
          style={[
            styles.button,
            (isLoading || loadingPayment) && styles.buttonDisabled,
          ]}
          onPress={() =>
            showModal("confirm", "Xác nhận", ` ${bookingData?.policyPayment} `)
          }
          disabled={isLoading || loadingPayment}
        >
          <Text style={styles.buttonText}>
            {isLoading || loadingPayment
              ? "Đang xử lý..."
              : "Xác nhận đặt phòng"}
          </Text>
        </TouchableOpacity>
      </View>

      <ReusableModal
        visible={modalVisible}
        type={modalType}
        title={modalTitle}
        message={modalMessage}
        confirmText={modalType === "confirm" ? "Xác nhận" : "OK"}
        cancelText="Hủy"
        onConfirm={() => {
          setModalVisible(false);
          handlePayment();
        }}
        onCancel={() => {
          setModalVisible(false);
        }}
      />
    </SafeAreaView>
  );
};

export default OrderConfirmScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  mainContainer: {
    flex: 1,
    paddingHorizontal: 20,
    paddingVertical: 5,
  },
  headerSection: {
    // Phần đầu cố định, không cần flex cụ thể vì sẽ chiếm không gian tự nhiên
  },
  roomsSection: {
    // flex: 1, // Chiếm không gian còn lại để ScrollView có thể cuộn
    // marginVertical: 10,
  },
  footerSection: {
    // Phần cuối cố định, không cần flex cụ thể vì sẽ chiếm không gian tự nhiên
  },
  title: {
    fontWeight: "400",
    color: "#000",
    marginBottom: 5,
    textAligin: "center",
  },
  titleCenter: {
    textAlign: "center",
    fontSize: 17,
  },
  subTitle: {
    fontSize: 16,
    fontWeight: "400",
    color: "#000",
    marginBottom: 5,
    textAlign: "center",
  },
  infoSection: {
    // marginBottom: 10,
    // flexDirection: "row",
    // justifyContent:"center"
  },
  infoSectionSale: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  infoSectionLast: {
    flexDirection: "row",
    justifyContent: "space-evenly",
    alignItems: "center",
  },
  infoItem: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  infoLabel: {
    fontSize: 14,
    color: "#666",
    marginBottom: 2,
  },
  infoValue: {
    fontSize: 16,
    color: "#000",
    marginBottom: 2,
  },
  roomInfo: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 2,
  },
  roomInfoService: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 2,
    flexWrap: "wrap",
  },
  roomInfoServiceText: {
    width: "20%",
  },
  roomLabel: {
    fontSize: 14,
    color: "#666",
  },
  roomValue: {
    fontSize: 14,
    color: "#000",
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
  },
  paymentOption: {
    flexDirection: "row",
    alignItems: "center",
    // marginBottom: 10,
  },
  radioCircle: {
    width: 20,
    height: 20,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: "#007AFF",
    alignItems: "center",
    justifyContent: "center",
    marginRight: 10,
  },
  selectedRadio: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: "#007AFF",
  },
  paymentText: {
    fontSize: 16,
    color: "#000",
  },
  button: {
    backgroundColor: "#00F598",
    paddingVertical: 12,
    borderRadius: 14,
    alignItems: "center",
    marginTop: 10,
  },
  buttonText: {
    fontSize: 16,
    color: "white",
    fontWeight: "400",
  },
  br: {
    borderBottomColor: "#E5E5E5",
    borderBottomWidth: 1,
    marginVertical: 5,
  },
  roomWrapper: {
    // marginVertical: 20,
    borderBottomColor: "#E5E5E5",
    borderBottomWidth: 1,
    paddingVertical: 20,
  },
  serviceIcons: {
    width: "76%",
    flexDirection: "row",
    // alignItems: "flex-start",
    justifyContent: "flex-end",
    flexWrap: "wrap",
  },
  iconWrapper: {
    marginLeft: 3,
  },
  infoValueSale: {
    padding: 3,
    color: "#007AFF",
    fontSize: 12,
    marginBottom: 2,
    padding: 2,
    textAlign: "",
  },
  wrapperInfoValueSale: {
    flexDirection: "row",
    borderWidth: 1,
    borderColor: "#007AFF",
    borderRadius: 8,
  },
});

src\Pages\Hotels\PhotoScreen.js
import React, { useState } from "react";
import {
  FlatList,
  Image,
  Dimensions,
  TouchableOpacity,
  Modal,
  View,
  Text,
  StyleSheet,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import { useAppSelector } from "../../Redux/hook";

// Lấy chiều rộng màn hình để tính toán kích thước ảnh
const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get("window");
// Tính toán kích thước và khoảng cách
const NUM_COLUMNS = 3; // Số cột
const SPACING = SCREEN_WIDTH * 0.05; // Khoảng cách giữa các ảnh (5% chiều rộng màn hình)
const TOTAL_SPACING = (NUM_COLUMNS + 1) * SPACING; // Tổng khoảng cách (giữa các ảnh và hai bên lề)
const IMAGE_SIZE = (SCREEN_WIDTH - TOTAL_SPACING) / NUM_COLUMNS; // Chiều rộng mỗi ảnh

const PhotoScreen = () => {
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedPhoto, setSelectedPhoto] = useState(null);
  const [currentIndex, setCurrentIndex] = useState(0); // Chỉ số ảnh hiện tại

  const { hotelDetail } = useAppSelector((state) => state.hotel);

  // Dữ liệu mẫu hoặc từ hotelDetail
  const photoList2 =
    hotelDetail?.images?.map((item, index) => ({
      id: index,
      url: item,
    })) || [];

  // Hàm render từng ảnh
  const RenderPhotoItem = ({ item, index }) => {
    return (
      <TouchableOpacity
        onPress={() => {
          setSelectedPhoto(item.url);
          setCurrentIndex(index); // Lưu chỉ số của ảnh được chọn
          setModalVisible(true);
        }}
        style={styles.photoItem}
      >
        <Image
          source={{ uri: item.url }}
          style={styles.photoImage}
          resizeMode="cover"
        />
      </TouchableOpacity>
    );
  };

  // Xử lý chuyển sang ảnh trước
  const handlePrePhoto = () => {
    if (currentIndex > 0) {
      const newIndex = currentIndex - 1;
      setCurrentIndex(newIndex);
      setSelectedPhoto(photoList2[newIndex].url);
    }
  };

  // Xử lý chuyển sang ảnh tiếp theo
  const handleNextPhoto = () => {
    if (currentIndex < photoList2.length - 1) {
      const newIndex = currentIndex + 1;
      setCurrentIndex(newIndex);
      setSelectedPhoto(photoList2[newIndex].url);
    }
  };

  return (
    <View style={styles.container}>
      <FlatList
        data={photoList2}
        renderItem={RenderPhotoItem}
        keyExtractor={(item) => item.id.toString()}
        numColumns={NUM_COLUMNS}
        contentContainerStyle={styles.photoList}
        showsVerticalScrollIndicator={false}
      />
      <Modal
        animationType="fade"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <TouchableOpacity
          style={styles.modalOverlay}
          activeOpacity={1}
          onPress={() => setModalVisible(false)}
        >
          <TouchableOpacity
            style={styles.modalContent}
            activeOpacity={1}
            onPress={(e) => e.stopPropagation()}
          >
            <Image
              source={{ uri: selectedPhoto }}
              style={styles.modalImage}
              resizeMode="contain"
            />
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setModalVisible(false)}
            >
              <Ionicons name="close" size={30} color="#fff" />
            </TouchableOpacity>

            {/* Nút Previous */}
            {currentIndex > 0 && (
              <TouchableOpacity
                style={styles.preButton}
                onPress={handlePrePhoto}
              >
                <Ionicons name="chevron-back-outline" size={30} color="#fff" />
              </TouchableOpacity>
            )}

            {/* Nút Next */}
            {currentIndex < photoList2.length - 1 && (
              <TouchableOpacity
                style={styles.nextButton}
                onPress={handleNextPhoto}
              >
                <Ionicons
                  name="chevron-forward-outline"
                  size={30}
                  color="#fff"
                />
              </TouchableOpacity>
            )}
          </TouchableOpacity>
        </TouchableOpacity>
      </Modal>
    </View>
  );
};

export default PhotoScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    marginLeft: -10,
  },
  photoList: {
    paddingHorizontal: SPACING,
    paddingVertical: SPACING,
  },
  photoItem: {
    width: IMAGE_SIZE,
    height: IMAGE_SIZE,
    marginHorizontal: SPACING / 2,
    marginVertical: SPACING / 2,
  },
  photoImage: {
    width: "100%",
    height: "100%",
    borderRadius: 8,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.8)",
    justifyContent: "center",
    alignItems: "center",
  },
  modalContent: {
    width: SCREEN_WIDTH,
    height: SCREEN_HEIGHT * 0.8,
    position: "relative",
  },
  modalImage: {
    width: "100%",
    height: "100%",
  },
  closeButton: {
    position: "absolute",
    top: 10,
    right: 10,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    borderRadius: 15,
    padding: 5,
  },
  preButton: {
    position: "absolute",
    top: "50%",
    left: 10,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    borderRadius: 15,
    padding: 5,
  },
  nextButton: {
    position: "absolute",
    top: "50%",
    right: 10,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    borderRadius: 15,
    padding: 5,
  },
});

src\Pages\Hotels\PriceScreen.js
// src/Pages/HotelDetails/HotelDetails.js
import React, { useState } from "react";
import {
  View,
  Text,
  ImageBackground,
  Image,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  Dimensions,
  navigation,
  Alert,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import Icon from "react-native-vector-icons/FontAwesome"; // Sử dụng FontAwesome cho
import cloneDeep from "lodash/cloneDeep";
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";
import { useAppSelector, useAppDispatch } from "../../Redux/hook";
import SkeletonPriceScreen from "../../Components/Skeleton/Hotels/SkeletonPriceScreen";
import RateReviews from "../Reviews/RateReviews";
import MapPriceScreen from "../../Components/Map/MapPriceScreen";
import * as Progress from "react-native-progress";
import ModalCheckIn from "../../Components/Modal/Home/ModalCheckIn";
import ModalCheckOut from "../../Components/Modal/Home/ModalCheckOut";
import ModalGuestsAndRooms from "../../Components/Modal/Home/ModalGuestsAndRooms";
import { getReviewDetails, updateFilter } from "../../Redux/Slice/hotelSlice";

const PriceScreen = ({ navigation, route }) => {
  const {
    hotelList,
    hotelDetail,
    loading,
    error,
    locationList,
    hotelByLocation,
    inforFilter,
  } = useAppSelector((state) => state.hotel);

  const [open, setOpen] = useState({
    Modal_1: true,
    Modal_CheckIn: false,
    Modal_CheckOut: false,
    Modal_GuestsAndRooms: false,
  });

  const handleOrderFood = () => {
    navigation.navigate("OrderFood");
  };

  const handleToFoodDetail = () => {
    navigation.navigate("FoodDetails");
  };
  const dispatch = useAppDispatch();
  const ratingPercentages = [
    {
      star: 5,
      percentage: (hotelDetail && hotelDetail?.review?.feedback?.fiveStar) || 0,
      color: "#007AFF",
    }, // Xanh dương
    {
      star: 4,
      percentage: (hotelDetail && hotelDetail?.review?.feedback?.fourStar) || 0,
      color: "#00C853",
    }, // Xanh lá
    {
      star: 3,
      percentage:
        (hotelDetail && hotelDetail?.review?.feedback?.threeStar) || 0,
      color: "#FFD700",
    }, // Vàng
    {
      star: 2,
      percentage: (hotelDetail && hotelDetail?.review?.feedback?.twoStar) || 0,
      color: "#FF8C00",
    }, // Cam
    {
      star: 1,
      percentage: (hotelDetail && hotelDetail?.review?.feedback?.oneStar) || 0,
      color: "#FF0000",
    }, // Đỏ
  ];

  console.log(">>>>>>>>>>>>>>>>>>>>>>>", hotelDetail);
  const renderStars = (rating) => {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
    const stars = [];
    for (let i = 0; i < fullStars; i++) {
      stars.push(
        <Ionicons
          key={`full-${i}`}
          style={styles.iconBed}
          name="star"
          size={15}
          color="orange"
        />
      );
    }
    if (hasHalfStar) {
      stars.push(
        <Ionicons
          key="half"
          style={styles.iconBed}
          name="star-half"
          size={15}
          color="orange"
        />
      );
    }
    for (let i = 0; i < emptyStars; i++) {
      stars.push(
        <Ionicons
          key={`empty-${i}`}
          style={styles.iconBed}
          name="star-outline"
          size={15}
          color="orange"
        />
      );
    }
    return stars;
  };

  const [selectDay, setSelectDay] = useState({
    day: 4,
    month: 4,
    year: 2025,
  });
  const formatToYYYYMMDD = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    return `${year}-${month}-${day}`;
  };

  const handleOpenModal = (name) => {
    const open_ = cloneDeep(open);
    open_[name] = true;
    setOpen(open_);
  };

  const handleCloseModal = (name) => {
    const open_ = cloneDeep(open);
    open_[name] = false;
    setOpen(open_);
  };

  const handleModalCheck = (name, value) => {
    const open_ = cloneDeep(open);
    open_[name] = value;

    if (name === "Modal_CheckIn" || name === "Modal_CheckOut") {
      const day =
        inforFilter[name === "Modal_CheckIn" ? "checkin" : "checkout"];
      setSelectDay({
        day: +day.split("-")[2],
        month: +day.split("-")[1],
        year: +day.split("-")[0],
      });
    }

    setOpen(open_);
  };

  const handleConfirmDate = (name) => {
    const formattedDate = `${selectDay.year}-${String(selectDay.month).padStart(
      2,
      "0"
    )}-${String(selectDay.day).padStart(2, "0")}`;

    console.log(selectDay);
    if (name === "checkin") {
      const today = new Date();

      const dateToday = formatToYYYYMMDD(today);
      const date1 = new Date(dateToday);
      const date2 = new Date(formattedDate);
      if (date2 < date1) {
        Alert.alert("Ngày CheckIn phải lớn hơn ngày hiện tại");
        return;
      }
    } else {
      const date1 = new Date(inforFilter.checkin);
      const date2 = new Date(formattedDate);
      // console.log(date1, date2);
      if (date2 <= date1) {
        Alert.alert("Ngày CheckOut phải lớn hơn ngày CheckIn");
        return;
      }
    }
    // setInforFilter({
    //   ...inforFilter,
    //   [name]: formattedDate,
    // });
    dispatch(updateFilter({ ...inforFilter, [name]: formattedDate }));
    const nameModal = name === "checkin" ? "Modal_CheckIn" : "Modal_CheckOut";
    handleModalCheck(nameModal, false);
  };

  const handleToRateDetails = (item) => {
    console.log(item.reviewId);
    dispatch(getReviewDetails(item.reviewId));
    navigation.navigate("RateDetails", { name: item.username });
  };

  const ratingsData =
    (hotelDetail && hotelDetail?.review?.feedback?.comments) || [];

  const handleViewAllComments = () => {
    navigation.navigate("AllComments", { comments: ratingsData });
  };
  console.log(">>>>>>>>>>>>>>>", hotelDetail);
  return (
    <ScrollView style={styles.body}>
      {/* Title and description */}
      <View style={styles.body__section}>
        <Text style={styles.body__title}>MÔ TẢ KHÁCH SẠN</Text>
        <Text style={styles.body__description}>
          {hotelDetail && hotelDetail?.review?.description}
          {/* {hotelDetail && hotelDetail.review.} */}
        </Text>
      </View>
      {/* Facilities */}
      <View style={styles.body__section1}>
        <Text style={styles.body__subtitle}>TIỆN ÍCH</Text>
        <View style={styles.body__facilities}>
          <View style={styles.body__facility}>
            <Ionicons name="wifi-outline" size={44} color="#007AFF" />
            <Text style={styles.body__facility__text}>WiFi</Text>
          </View>
          <View style={styles.body__facility}>
            <Ionicons name="barbell-outline" size={44} color="#007AFF" />
            <Text style={styles.body__facility__text}>Phòng Gym</Text>
          </View>
          <View style={styles.body__facility}>
            <Ionicons name="restaurant-outline" size={44} color="#007AFF" />
            <Text style={styles.body__facility__text}>Bữa sáng miễn phí</Text>
          </View>
          <View style={styles.body__facility}>
            <Ionicons name="happy-outline" size={44} color="#007AFF" />
            <Text style={styles.body__facility__text}>Phích hợp trẻ em</Text>
          </View>
        </View>
      </View>
      {/* Check-in/out info */}
      <View style={styles.body__section}>
        <View style={styles.body__info}>
          <Ionicons name="location-outline" size={25} color="#007AFF" />
          <Text style={styles.body__info__text}>
            {hotelDetail && hotelDetail?.review?.location}
          </Text>
        </View>
        <View style={styles.body__info}>
          <Ionicons name="call-outline" size={25} color="#007AFF" />
          <Text style={styles.body__info__text}>
            {hotelDetail && hotelDetail?.review?.phoneNumber}
          </Text>
        </View>
        <View style={styles.body__info__view}>
          <View style={styles.body__info}>
            <Ionicons name="calendar-outline" size={25} color="#007AFF" />
            <Text style={styles.body__info__text}>Nhận phòng: 12:00</Text>
          </View>
          <View style={styles.body__info}>
            <Ionicons name="calendar-outline" size={25} color="#007AFF" />
            <Text style={styles.body__info__text}>Trả phòng: 14:00</Text>
          </View>
        </View>
      </View>
      <View style={styles.body__section2}>
        <View style={styles.body__service}>
          <Ionicons name="fast-food-outline" size={25} color="#007AFF" />
          <Text style={styles.body__service__text}>Bữa tối</Text>
        </View>
        <View style={styles.body__service}>
          <Ionicons name="logo-octocat" size={25} color="#007AFF" />
          <Text style={styles.body__service__text}>Thú cưng</Text>
        </View>
        <View style={styles.body__service}>
          <Ionicons name="business-outline" size={25} color="#007AFF" />
          <Text style={styles.body__service__text}>Phòng vip</Text>
        </View>
        <View style={styles.body__service}>
          <Ionicons name="pizza-outline" size={25} color="#007AFF" />
          <Text style={styles.body__service__text}>Bữa sáng</Text>
        </View>
        <View style={styles.body__service}>
          <Ionicons name="water-outline" size={25} color="#007AFF" />
          <Text style={styles.body__service__text}>Bể bơi</Text>
        </View>
        <View style={styles.body__service}>
          <Ionicons name="diamond-outline" size={25} color="#007AFF" />
          <Text style={styles.body__service__text}>Dịch vụ cao cấp</Text>
        </View>
      </View>
      {/* Room info */}
      <TouchableOpacity
        style={styles.inputContainer}
        onPress={() => handleModalCheck("Modal_CheckIn", true)}
      >
        <Ionicons name="calendar-outline" size={25} color="#007AFF" />
        <Text style={styles.inputText}>{inforFilter.checkin}</Text>
        <Icon
          name="angle-down"
          size={20}
          color="#0090FF"
          style={styles.arrowIcon}
        />
      </TouchableOpacity>
      <TouchableOpacity
        style={styles.inputContainer}
        onPress={() => handleModalCheck("Modal_CheckOut", true)}
      >
        <Ionicons name="calendar-outline" size={25} color="#007AFF" />
        <Text style={styles.inputText}>{inforFilter.checkout}</Text>
        <Icon
          name="angle-down"
          size={20}
          color="#0090FF"
          style={styles.arrowIcon}
        />
      </TouchableOpacity>
      <ModalCheckIn
        visible={open.Modal_CheckIn}
        onClose={handleModalCheck}
        selectDay={selectDay}
        setSelectDay={setSelectDay}
        confirm={handleConfirmDate}
      />
      <ModalCheckOut
        visible={open.Modal_CheckOut}
        onClose={handleModalCheck}
        selectDay={selectDay}
        setSelectDay={setSelectDay}
        confirm={handleConfirmDate}
      />
      <TouchableOpacity
        style={styles.inputContainer}
        onPress={() => handleModalCheck("Modal_GuestsAndRooms", true)}
      >
        <Ionicons name="business-outline" size={25} color="#007AFF" />
        <Text style={styles.inputText}>
          {inforFilter.adults} Người lớn, {inforFilter.children} Trẻ em,{" "}
          {inforFilter.roomNumber} Phòng
        </Text>
        <Icon
          name="angle-down"
          size={20}
          color="#0090FF"
          style={styles.arrowIcon}
        />
      </TouchableOpacity>
      <ModalGuestsAndRooms
        visible={open.Modal_GuestsAndRooms}
        onClose={handleModalCheck}
      />

      <View style={styles.map}>
        <View style={styles.mapView}>
          <Text style={styles.mapViewTitle}>VỊ TRÍ KHÁCH SẠN</Text>
        </View>
        <MapPriceScreen data={hotelDetail?.review?.ll} />
      </View>
      {/* <RateReviews /> */}
      <View style={styles.ratings}>
        <View style={styles.ratingsTitle}>
          <Text style={styles.ratingsTitleText}>XẾP HẠNG ĐÁNH GIÁ</Text>
        </View>
        <View style={styles.ratings__writeButton}>
          <Text style={[styles.ratings__writeButtonText, { color: "black" }]}>
            Tóm tắt đánh giá
          </Text>
          <Text style={styles.ratings__writeButtonText}> + VIẾT ĐÁNH GIÁ</Text>
        </View>
        <View style={styles.ratings__stats}>
          {ratingPercentages.map((item) => (
            <View key={item.star} style={styles.ratings__stats1}>
              {/* Vòng tròn tiến độ */}
              <Progress.Circle
                size={65}
                progress={+(parseInt(item?.percentage) / 100)}
                thickness={6}
                color={`${item.color}`}
                unfilledColor={"#e0e0e0"}
                borderWidth={0}
                showsText={false} // Tắt văn bản mặc định
              />
              {/* Văn bản và icon tùy chỉnh chồng lên */}
              <View style={styles.overlay}>
                <View style={styles.topRow}>
                  <Text style={styles.scoreText}>{item.star}</Text>
                  <Ionicons
                    style={styles.iconBed}
                    name="star"
                    size={15}
                    color="orange"
                  />
                </View>
                <Text style={styles.percentText}>{item?.percentage}%</Text>
              </View>
            </View>
          ))}
        </View>
        <View style={styles.ratings__option}>
          <View style={styles.ratings__optionList}>
            <View style={styles.ratings__optionItem}>
              <Text style={styles.ratings__label}>Phòng </Text>

              <View style={styles.ratings__text}>
                <Text>
                  {hotelDetail && hotelDetail?.review?.feedback?.ratingRoom}
                </Text>
                <Ionicons
                  style={styles.iconBed}
                  name="star"
                  size={15}
                  color="orange"
                />
              </View>
            </View>
            <View style={styles.ratings__optionItem}>
              <Text style={styles.ratings__label}>Địa điểm </Text>
              <View style={styles.ratings__text}>
                <Text>
                  {hotelDetail && hotelDetail?.review?.feedback?.ratingLocation}
                </Text>
                <Ionicons
                  style={styles.iconBed}
                  name="star"
                  size={15}
                  color="orange"
                />
              </View>
            </View>
            <View style={styles.ratings__optionItem}>
              <Text style={styles.ratings__label}>Dịch vụ</Text>
              <View style={styles.ratings__text}>
                <Text>
                  {hotelDetail && hotelDetail?.review?.feedback?.ratingService}
                </Text>
                <Ionicons
                  style={styles.iconBed}
                  name="star"
                  size={15}
                  color="orange"
                />
              </View>
            </View>
          </View>
        </View>
        <View style={styles.ratings__statsScore}>
          <Text style={styles.ratings__statsScoreValue}>
            {hotelDetail && hotelDetail?.review?.feedback?.ratingHotel}
          </Text>
          <View style={styles.ratings__statsScoreLabel}>
            <Text>Rất tốt</Text>
            <View style={styles.start}>
              {renderStars(
                (hotelDetail && hotelDetail?.review?.feedback?.ratingHotel) || 0
              )}
            </View>
          </View>
        </View>

        {/* {ratingsData?.map((item, index) => (
          <TouchableOpacity
            key={item.reviewId}
            style={styles.ratings__item}
            onPress={() => handleToRateDetails(item)}
          >
            <Image
              source={{
               
                uri: `${item.urlAvatar}`,
              }}
              style={styles.ratings__itemAvatar}
            />
            <View style={styles.ratings__itemContent}>
              <View style={styles.ratings__itemHeader}>
                <Text style={styles.ratings__itemName}>{item.username}</Text>
                <Text style={styles.ratings__itemScore}>{item.rating}/5</Text>
              </View>
             
              <Text style={styles.ratings__itemText}>{item.comment}</Text>
            </View>
          </TouchableOpacity>
        ))} */}
        <View style={styles.commentsSection}>
          <View style={styles.commentsHeader}>
            <Text style={styles.commentsTitle}>Nhận xét</Text>
            {ratingsData?.length > 5 && (
              <TouchableOpacity onPress={handleViewAllComments}>
                <Text style={styles.viewAllText}>Xem tất cả</Text>
              </TouchableOpacity>
            )}
          </View>
          {ratingsData?.length > 0 ? (
            ratingsData.slice(-5).map((item, index) => (
              <TouchableOpacity
                key={item.reviewId}
                style={styles.ratings__item}
                onPress={() => handleToRateDetails(item)}
              >
                <Image
                  source={{ uri: `${item.urlAvatar}` }}
                  style={styles.ratings__itemAvatar}
                />
                <View style={styles.ratings__itemContent}>
                  <View style={styles.ratings__itemHeader}>
                    <Text style={styles.ratings__itemName}>
                      {item.username}
                    </Text>
                    <Text style={styles.ratings__itemScore}>
                      {item.rating}/5
                    </Text>
                  </View>
                  <Text style={styles.ratings__itemText}>{item.comment}</Text>
                </View>
              </TouchableOpacity>
            ))
          ) : (
            <Text style={styles.noCommentsText}>Chưa có nhận xét nào.</Text>
          )}
        </View>
      </View>
    </ScrollView>
  );
};

export default PriceScreen;

const styles = StyleSheet.create({
  // Block: body
  body: {
    flex: 1,
    backgroundColor: "white",
  },
  body__section1: {
    // backgroundColor: "#EFF3F5",
    backgroundColor: "white",
  },
  body__section: {
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
    backgroundColor: "white",
  },
  body__title: {
    fontSize: 18,
    fontWeight: "400",
    marginBottom: 10,
    textAlign: "center",
  },
  body__description: {
    fontSize: 14,
    color: "#555",
    lineHeight: 20,
    textAlign: "center",
  },
  body__subtitle: {
    fontSize: 20,
    fontWeight: "400",
    marginBottom: 10,
    textAlign: "center",
  },
  body__facilities: {
    flexDirection: "row",
  },
  body__facility: {
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    width: "25%",
    marginBottom: 10,
  },
  body__facility__text: {
    fontSize: 12,
    marginLeft: 5,
    color: "#555",
    textAlign: "center",
  },
  body__info__view: {
    flexDirection: "row",
  },
  body__info: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 15,
    marginRight: 40,
  },
  body__info__text: {
    fontSize: 14,
    marginLeft: 5,
    color: "#555",
  },
  body__section3: {
    paddingHorizontal: 20,
    paddingVertical: 12,
    backgroundColor: "white",
  },
  body__subtitle3: {
    fontSize: 20,
    fontWeight: 400,
    paddingBottom: 10,
  },
  body__dropdown: {
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "gray",
    borderRadius: 5,
    paddingHorizontal: 10,
    paddingBottom: 20,
  },
  body__dropdown__text: {
    paddingLeft: 10,
    fontSize: 14,
    color: "black",
  },
  icon__chevron_down: {
    marginLeft: "auto",
  },
  body__section2: {
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "space-between",
    padding: 10,
    backgroundColor: "#EFF3F5",
    backgroundColor: "white",
  },
  body__service: {
    flexDirection: "row",
    alignItems: "center",
    width: "30%",
    marginVertical: 10,
  },
  body__service__text: {
    marginLeft: 10,
    fontSize: 14,
    color: "#000",
  },

  footer: {
    padding: 15,
    backgroundColor: "#f8f8f8",
  },
  footer__food: {
    marginBottom: 15,
  },
  footer__food__title: {
    width: "100%",
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  footer__food__text: {
    fontSize: 14,
    fontWeight: "bold",
    marginBottom: 10,
  },
  footer__food__items: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  footer__food__item: {
    width: 120,
    height: 100,
    borderRadius: 15,
    marginRight: 10,
  },
  footer__item__text: {
    textAlign: "center",
    fontWeight: "300",
  },
  footer__food__more: {
    fontSize: 14,
    color: "#007AFF",
  },
  footer__map: {
    width: "100%",
    height: 150,
    borderRadius: 10,
    marginBottom: 15,
  },
  footer__action: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  footer__price: {
    flexDirection: "column",

    fontSize: 22,
    fontWeight: "bold",
    color: "black",
    width: "50%",
  },
  footer__price__text: {
    fontSize: 16,
    fontWeight: "300",
  },
  footer__button: {
    width: "50%",
    backgroundColor: "#00F598",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 5,
  },
  footer__button__text: {
    fontSize: 16,
    color: "#fff",
    fontWeight: "bold",
    textAlign: "center",
  },
  map: {
    backgroundColor: "white",
    marginVertical: 40,
  },
  mapView: {
    marginLeft: 20,
  },
  mapViewTitle: {
    fontSize: 20,
    fontWeight: 400,
    paddingBottom: 10,
  },
  ratings: {
    flex: 1,
    backgroundColor: "#F5F5F5",
    paddingHorizontal: 20,
    backgroundColor: "white",
  },
  ratingsTitle: {},
  ratingsTitleText: {
    fontSize: 20,
    fontWeight: 400,
    paddingBottom: 10,
  },
  ratings__header: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 40,
    marginBottom: 10,
  },
  ratings__headerBack: {
    fontSize: 24,
    color: "#00C4B4",
    marginRight: 10,
  },
  ratings__headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#000000",
    marginLeft: 10,
  },
  ratings__search: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "white",
    borderRadius: 15,
    borderWidth: 1,
    borderColor: "gray",
    marginBottom: 15,
  },
  ratings__search__Input: {
    flex: 1,
    backgroundColor: "white",
    borderRadius: 10,
    padding: 10,
    fontSize: 14,
    color: "#000000",
    justifyContent: "center",
    alignItems: "center",
  },
  ratings__writeButton: {
    marginBottom: 20,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  ratings__writeButtonText: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#0090FF",
  },
  ratings__stats: {
    flexDirection: "row",
    alignItems: "center",
    width: "100%",
    marginBottom: 20,
    justifyContent: "space-between",
  },
  ratings__statsScore: {
    marginRight: 20,
    alignItems: "center",
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    marginBottom: 20,
  },
  ratings__statsScoreValue: {
    fontSize: 30,
    fontWeight: "bold",
    color: "#000000",
    marginLeft: 10,
  },
  ratings__statsScoreLabel: {
    fontSize: 16,
    color: "#000000",
    marginLeft: 20,
  },
  start: {
    flexDirection: "row",
  },
  ratings__statsBars: {
    flex: 1,
  },
  ratings__statsBar: {
    backgroundColor: "#E0E0E0",
    height: 10,
    borderRadius: 5,
    marginBottom: 5,
  },
  ratings__statsBarFill: {
    backgroundColor: "#FFC107",
    height: 10,
    borderRadius: 5,
  },
  ratings__option: {
    marginBottom: 20,
  },
  ratings__optionList: {
    flexDirection: "row",
    alignItems: "center",
  },
  ratings__optionItem: {
    width: "33%",
    textAlign: "center",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    borderRightColor: "gray",
    borderRightWidth: 1,
  },
  ratings__text: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
  },
  ratings__statsLabels: {
    marginLeft: 10,
  },
  ratings__statsLabel: {
    fontSize: 14,
    color: "#000000",
    marginBottom: 5,
  },
  ratings__item: {
    flexDirection: "row",
    marginBottom: 15,
  },
  ratings__itemAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 10,
  },
  ratings__itemContent: {
    flex: 1,
  },
  ratings__itemHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  ratings__itemName: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
  },
  ratings__itemScore: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
  },
  ratings__itemTime: {
    fontSize: 12,
    color: "#666666",
    marginBottom: 5,
  },
  ratings__itemText: {
    fontSize: 14,
    color: "#000000",
  },
  progressCircleContainer: {
    position: "relative",
    alignItems: "center",
    justifyContent: "center",
  },
  progressCircle: {
    borderRadius: 999,
    position: "absolute",
  },
  progressCircleFill: {
    borderRightColor: "transparent",
    borderBottomColor: "transparent",
  },
  progressCircleTextContainer: {
    alignItems: "center",
    justifyContent: "center",
    width: 60,
    height: 60,
  },
  progressCircleText: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#333",
  },
  progressCirclePercentage: {
    fontSize: 12,
    color: "#666",
  },

  ratings__stats1: {
    justifyContent: "center",
    alignItems: "center",
  },
  overlay: {
    position: "absolute",
    justifyContent: "center",
    alignItems: "center",
  },
  topRow: {
    flexDirection: "row",
    alignItems: "center",
  },
  scoreText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "black",
  },
  icon__chevron_down: {
    marginLeft: 2,
  },
  percentText: {
    fontSize: 12,
    color: "black",
    marginTop: 2,
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    borderBottomColor: "gray",
    borderBottomWidth: 1,
    position: "relative",
    marginHorizontal: 15,
    padding: 10,
    marginBottom: 10,
    marginTop: 8,
  },
  inputText: {
    flex: 1,
    marginLeft: 15,
    color: "black",
    fontWeight: "400",
    fontSize: 18,
  },

  commentsSection: {
    paddingVertical: 10,
  },
  commentsHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 10,
  },
  commentsTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#000",
  },
  viewAllText: {
    fontSize: 14,
    color: "#007AFF",
    fontWeight: "500",
  },
  noCommentsText: {
    fontSize: 14,
    color: "#666",
    textAlign: "center",
  },
});

src\Pages\Notification\NotificationScreen.jsx
import React, { useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  FlatList,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import * as Notifications from 'expo-notifications';
import { useAppDispatch, useAppSelector } from '../../Redux/hook';
import { useWebSocket } from '../../hooks/useWebSocket';
import {
  addNotification,
  fetchListNotification,
  markNotificationAsRead,
} from '../../Redux/Slice/notificationSlice';
import { API_BASE_URL } from '../../Constant/Constant';
import axios from 'axios'; // Giả sử bạn dùng axios để gọi API

const NotificationsScreen = () => {
  const dispatch = useAppDispatch();
  const { accessToken, isLoggedIn, userId } = useAppSelector((state) => state.auth);
  const { listNotification } = useAppSelector((state) => state.notification);

  // Map loại thông báo với icon và màu sắc
  const getNotificationIcon = (type) => {
    switch (type?.toUpperCase()) {
      case 'BOOKING':
        return { icon: 'checkmark-circle', color: '#2563EB' };
      default:
        return { icon: 'notifications', color: '#6B7280' };
    }
  };

  // Lắng nghe notification từ hệ thống (expo-notifications)
  useEffect(() => {
    const subscription = Notifications.addNotificationReceivedListener(
      (notification) => {
        const { title, body, data } = notification.request.content;

        const newNoti = {
          id: Date.now(),
          title,
          message: body,
          type: data?.type || 'SYSTEM',
          createdAt: data?.created_at || new Date().toISOString(),
          isRead: false, // Mặc định là chưa đọc
        };

        console.log('📩 Notification received:', newNoti);
        dispatch(addNotification(newNoti));
      }
    );

    const responseSubscription =
      Notifications.addNotificationResponseReceivedListener((response) => {
        console.log('Notification response:', response);
      });

    dispatch(fetchListNotification());

    return () => {
      subscription.remove();
      responseSubscription.remove();
    };
  }, [dispatch]);

  // Lắng nghe từ WebSocket
  useWebSocket(userId, (notification) => {
    console.log('🌐 WebSocket nhận notification: ', notification);

    const newNoti = {
      id: notification.id || Date.now(),
      title: notification.title,
      message: notification.message,
      type: notification.type || 'SYSTEM',
      createdAt: notification.createdAt || new Date().toISOString(),
      isRead: notification.isRead || false,
    };

    dispatch(addNotification(newNoti));

    Notifications.scheduleNotificationAsync({
      content: {
        title: newNoti.title,
        body: newNoti.message,
        data: {
          type: newNoti.type,
          created_at: newNoti.createdAt,
          isRead: newNoti.isRead,
        },
      },
      trigger: null, // gửi ngay lập tức
    });
  });

  // Hàm gọi API để đánh dấu thông báo là đã đọc
  const markAsRead = async (notificationId) => {
    console.log('Đánh dấu thông báo là đã đọc:', notificationId);
    try {
      const response = await axios.get(
        `${API_BASE_URL}/api/notifications/${notificationId}/read`,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          }
        }
      );
      console.log('API response:', response.data);
      // Kiểm tra phản hồi API
      if (response.data === true) {
        dispatch(fetchListNotification()); // Cập nhật Redux store nếu thành công
      }
    } catch (error) {
      console.error('Error marking notification as read:', error);
      // Có thể hiển thị thông báo lỗi cho người dùng
    }
  };

  // Xử lý khi nhấp vào thông báo
  const handleNotificationPress = (notification) => {
    if (!notification.isRead) {
      markAsRead(notification.id);
    }
  };

  const parseLocalDateTimeArray = (arr) => {
    if (!Array.isArray(arr) || arr.length < 6) return new Date(); // fallback
    const [year, month, day, hour, minute, second] = arr;
    return new Date(year, month - 1, day, hour, minute, second); // month - 1 vì JS tính từ 0
  };

  // Render từng thông báo
  const renderNotification = ({ item }) => {
    const { icon, color } = getNotificationIcon(item?.type);
    const isRead = item?.isRead || false;

    return (
      <TouchableOpacity
        style={[
          styles.notificationCard,
          { backgroundColor: isRead ? '#FFFFFF' : '#F0F7FF' },
        ]}
        activeOpacity={0.7}
        onPress={() => handleNotificationPress(item)}
      >
        <View style={styles.notificationIconContainer}>
          <Ionicons name={icon} size={36} color={color} />
        </View>
        <View style={styles.notificationContent}>
          <View style={styles.titleContainer}>
            {item?.title && (
              <Text style={styles.notificationTitle}>{item.title}</Text>
            )}
            {!isRead && <View style={styles.unreadDot} >{item.isRead}</View>}
          </View>
          {item?.message && (
            <Text style={styles.notificationMessage}>{item.message}</Text>
          )}
          {item?.createdAt && (
            <Text style={styles.notificationTime}>
              {parseLocalDateTimeArray(item.createdAt).toLocaleString('vi-VN', {
                dateStyle: 'short',
                timeStyle: 'short',
              })}
            </Text>
          )}
        </View>
      </TouchableOpacity>
    );
  };

  // Giao diện khi chưa đăng nhập
  if (!accessToken || !isLoggedIn) {
    return (
      <View style={styles.emptyContainer}>
        <Ionicons name="log-in-outline" size={48} color="#6B7280" />
        <Text style={styles.emptyText}>
          Vui lòng đăng nhập để xem thông báo
        </Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {listNotification?.length > 0 ? (
        <FlatList
          data={listNotification}
          renderItem={renderNotification}
          keyExtractor={(item) => item?.id?.toString()}
          contentContainerStyle={styles.listContainer}
          showsVerticalScrollIndicator={false}
        />
      ) : (
        <View style={styles.emptyContainer}>
          <Ionicons
            name="notifications-off-outline"
            size={48}
            color="#6B7280"
          />
          <Text style={styles.emptyText}>Bạn chưa có thông báo nào</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F3F4F6',
    paddingHorizontal: 16,
    paddingTop: 24,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#1F2937',
    marginBottom: 16,
    textAlign: 'center',
  },
  listContainer: {
    paddingBottom: 20,
  },
  notificationCard: {
    flexDirection: 'row',
    alignItems: 'center',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
    borderLeftWidth: 4,
    borderLeftColor: '#2563EB',
  },
  notificationIconContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  notificationContent: {
    flex: 1,
  },
  titleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  notificationTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  notificationMessage: {
    fontSize: 14,
    color: '#4B5563',
    lineHeight: 20,
  },
  notificationTime: {
    fontSize: 12,
    color: '#F59E0B',
    marginTop: 4,
  },
  unreadDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#2563EB',
    marginLeft: 8,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  emptyText: {
    fontSize: 16,
    color: '#6B7280',
    textAlign: 'center',
    marginTop: 12,
  },
});

export default NotificationsScreen;
src\Pages\Notification\NotificationScreenQuan.js
import React, { useState, useEffect,useCallback  } from 'react';
import { View, Text, FlatList, StyleSheet } from 'react-native';
import { useFocusEffect } from '@react-navigation/native';
import * as Notifications from 'expo-notifications';
import { useWebSocket } from '../../hooks/useWebSocket';
import { fetchNotifications } from "../../Redux/apiQuan";
import NotificationItem from '../../Components/Notification/NotificationItem';
//import styles from '../styles/notificationStyles';

const NotificationScreen = () => {
  const { userId } = 4;
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);

  // Lấy danh sách thông báo từ API
  const fetchNotificationsData = async () => {
    try {
      const response = await fetchNotifications();
      console.log('Thông báo:', response.data);
      setNotifications(response.data);
    } catch (error) {
      console.error('Không thể tải thông báo:', error.message);
    } finally {
      setLoading(false);
    }
  };

  // Lắng nghe notification từ Expo (push/local)
  useEffect(() => {
    const subscription = Notifications.addNotificationReceivedListener((notification) => {
      const { title, body } = notification.request.content;
      const newNoti = {
        id: Date.now(),
        title,
        message: body,
        createdAt: new Date().toISOString(),
      };
      setNotifications((prev) => [newNoti, ...prev]);
    });

    const responseSubscription = Notifications.addNotificationResponseReceivedListener((response) => {
      console.log('Notification response:', response);
    });

    return () => {
      subscription.remove();
      responseSubscription.remove();
    };
  }, []);

  // Nhận dữ liệu từ WebSocket và hiển thị banner
  useWebSocket(userId, (notification) => {
    const newNoti = {
      id: Date.now(),
      ...notification,
      createdAt: new Date().toISOString(),
    };

    setNotifications((prev) => [newNoti, ...prev]);

    Notifications.scheduleNotificationAsync({
      content: {
        title: notification.title,
        body: notification.message,
      },
      trigger: null, // gửi ngay lập tức
    });
  });

  // Gọi API khi màn hình được mount
  useFocusEffect(
    useCallback(() => {
      fetchNotificationsData();
    }, [])
  );

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Danh sách thông báo</Text>
      {loading ? (
        <Text>Đang tải...</Text>
      ) : !notifications || notifications.length === 0 ? (
        <Text>Không có thông báo nào.</Text>
      ) : (
        <FlatList
          data={notifications}
          renderItem={({ item }) => <NotificationItem item={item} />}
          keyExtractor={(item) => item.id.toString()}
          initialNumToRender={10}
          maxToRenderPerBatch={10}
        />
      )}
    </View>
  );
};

export default NotificationScreen;
const styles = StyleSheet.create({
  container: { flex: 1, padding: 20 },
  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 10 },
  notificationItem: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
    marginBottom: 10,
  },
  unread: {
    backgroundColor: '#d0ebff', // Màu cho thông báo chưa đọc
  },
  title: { fontSize: 16, fontWeight: 'bold' },
  message: { fontSize: 14, color: '#333' },
  date: { fontSize: 12, color: '#666' },
});

src\Pages\Payment\PaymentButton.js
import React from "react";
import { TouchableOpacity, Text, StyleSheet } from "react-native";

const PaymentButton = ({
  onPress,
  title = "Thanh toán với ZaloPay",
  disabled,
}) => {
  return (
    <TouchableOpacity
      style={[styles.button, disabled && styles.disabled]}
      onPress={onPress}
      disabled={disabled}
    >
      <Text style={styles.buttonText}>{title}</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  button: {
    backgroundColor: "#00C4B4",
    padding: 15,
    borderRadius: 8,
    alignItems: "center",
  },
  disabled: {
    backgroundColor: "#cccccc",
  },
  buttonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default PaymentButton;

src\Pages\Payment\PaymentResultScreenQuan.js
import React, { useEffect, useState } from "react";
import { View, Text, StyleSheet, Button, Image } from "react-native";
import paymentApi from "../Payment/paymentApi";
import { useAppDispatch } from "../../Redux/hook";
import { resetPaymentData } from "../../Redux/Slice/paymentSlice";

const PaymentResultScreenQuan = ({ route, navigation }) => {
  const {
    appTransId,
    status,
    amount,
    appid,
    bankcode,
    checksum,
    discountamount,
    pmcid,
    message,
  } = route.params || {};
  const [isLoading, setIsLoading] = useState(true);
  const [resultMessage, setResultMessage] = useState(message || "");
  const dispatch = useAppDispatch();
  useEffect(() => {
    const fetchPaymentStatus = async () => {
      try {
        const response = await paymentApi.checkPaymentStatus(appTransId);
        console.log("Payment status response:", response);
        setResultMessage(
          response.message || message || "Không có thông tin chi tiết"
        );
      } catch (error) {
        console.error("Error fetching payment status:", error);
        setResultMessage("Không thể kiểm tra trạng thái thanh toán");
      } finally {
        setIsLoading(false);
      }
    };

    if (appTransId) {
      fetchPaymentStatus();
      dispatch(resetPaymentData());
    } else {
      setResultMessage("Không tìm thấy mã giao dịch");
      setIsLoading(false);
    }
  }, [appTransId]);

  const handleBackToHome = () => {
    navigation.navigate("Home");
  };

  if (isLoading) {
    return (
      <View style={styles.container}>
        <Text style={styles.message}>Đang kiểm tra trạng thái...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {status === "PAID" && (
        <>
          <Image
            source={{
              uri: "https://img.icons8.com/color/96/000000/checked--v1.png",
            }}
            style={styles.icon}
          />
          <Text style={styles.title}>Thanh toán thành công</Text>
          <Text style={styles.message}>Giao dịch của bạn đã hoàn tất.</Text>
        </>
      )}
      {(status === "FAILED" || status === "UNKNOWN") && (
        <>
          <Image
            source={{
              uri: "https://img.icons8.com/color/96/000000/cancel--v1.png",
            }}
            style={styles.icon}
          />
          <Text style={styles.title}>Thanh toán thất bại</Text>
          <Text style={styles.message}>Đã có lỗi xảy ra.</Text>
        </>
      )}
      <Text style={styles.details}>Mã giao dịch: {appTransId}</Text>
      <Text style={styles.details}>Số tiền: {amount}</Text>
      <Text style={styles.details}>App ID: {appid}</Text>
      <Text style={styles.details}>Mã ngân hàng: {bankcode || "Không có"}</Text>
      <Text style={styles.details}>Checksum: {checksum}</Text>
      <Text style={styles.details}>
        Số tiền giảm giá: {discountamount || 0}
      </Text>
      <Text style={styles.details}>Phương thức thanh toán: {pmcid}</Text>
      <Text style={styles.details}>Thông tin: {resultMessage}</Text>
      <Button
        title="Trở về trang Home"
        onPress={handleBackToHome}
        color="#00C4B4"
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#f5f5f5",
  },
  icon: {
    width: 96,
    height: 96,
    marginBottom: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 10,
    color: "#333",
  },
  message: {
    fontSize: 16,
    color: "#666",
    textAlign: "center",
    marginBottom: 20,
  },
  details: {
    fontSize: 14,
    color: "#888",
    marginBottom: 10,
  },
});

export default PaymentResultScreenQuan;

src\Pages\Payment\PaymentScreenQuan.js
import React, { useEffect, useState } from "react";
import { View, StyleSheet, Alert, ActivityIndicator } from "react-native";
import paymentApi from "./paymentApi";
import PaymentButton from "./PaymentButton";
import ReusableModal from "../../Components/Modal/FlexibleModal/ReusableModal";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import {
  fetchPaymentOrder,
  resetPaymentData,
} from "../../Redux/Slice/paymentSlice";

const PaymentScreenQuan = ({ navigation }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [modalType, setModalType] = useState("confirm");
  const [modalTitle, setModalTitle] = useState("");
  const [modalMessage, setModalMessage] = useState("");

  const showModal = (type, title, message) => {
    setModalType(type);
    setModalTitle(title);
    setModalMessage(message);
    setModalVisible(true);
  };

  const { bookingPayload } = useAppSelector((state) => state.hotel);
  const { paymentData, loadingPayment } = useAppSelector(
    (state) => state.payment
  );
  const dispatch = useAppDispatch();

  // const a = {
  //   checkInDate: "2025-04-21",
  //   checkOutDate: "2025-04-22",
  //   couponId: 0,
  //   hotelId: 1,
  //   roomRequestList: [
  //     {
  //       adults: 1,
  //       children: 0,
  //       price: 900000,
  //       roomId: 1,
  //       roomName: "Phòng Deluxe Gia đình",
  //       serviceList: [Array],
  //       uniqueId: "room1_1",
  //     },
  //   ],
  //   };

  //   const b = {
  //     hotelId: 1,
  //     checkInDate: "2025-04-21",
  //     checkOutDate: "2025-04-22",
  //     couponId: 0,
  //     roomRequestList: [
  //       {
  //         roomId: 1,
  //         adults: 1,
  //         children: 0,
  //         price: 900000,
  //         serviceList: [
  //           {
  //             id: 29,
  //             quantity: 1,
  //             time: "2025-04-19T17:57:24.031Z",
  //             note: "string",
  //           },
  //         ],
  //       },
  //     ],
  //   };

  useEffect(() => {
    if (
      paymentData &&
      paymentData.orderUrl !== "" &&
      paymentData.appTransId !== ""
    ) {
      console.log("Dữ liệu API trả về:", paymentData);
      setIsLoading(false);
      navigation.navigate("PaymentWebViewScreenQuan", {
        orderUrl: paymentData.orderUrl,
      });
    }
  }, [paymentData]);

  const handlePayment = async () => {
    setIsLoading(true);
    try {
      dispatch(fetchPaymentOrder(bookingPayload));
      console.log(
        "KKKKKKKKKKKKKKKKKKKKKKKKKKKK dữ liệu gửi lên api",
        bookingPayload
      );
      console.log("KKKKKKKKKKKKKK dữ liệu api trả về", paymentData);
      console.log(">>> run dispatch");

      // navigation.navigate("PaymentWebViewScreenQuan", {
      //   orderUrl: paymentData.orderUrl,
      // });
    } catch (error) {
      console.error("Payment error:", error);
      Alert.alert("Lỗi", error.message || "Lỗi tạo thanh toán");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      {isLoading ? (
        <ActivityIndicator size="large" color="#00C4B4" />
      ) : (
        <PaymentButton
          onPress={() =>
            showModal(
              "confirm",
              "Xác nhận ",
              "Bạn có chắc chắn muốn thanh toán với ZaloPay?"
            )
          }
          disabled={isLoading}
        />
      )}
      <ReusableModal
        visible={modalVisible}
        type={modalType}
        title={modalTitle}
        message={modalMessage}
        confirmText={modalType === "confirm" ? "Xác nhận" : "OK"}
        cancelText="Hủy"
        onConfirm={() => {
          setModalVisible(false);
          handlePayment();
          console.log(`${modalType} confirmed!`);
        }}
        onCancel={() => {
          setModalVisible(false);
          console.log("Canceled!");
        }}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#F5F5F5",
  },
});

export default PaymentScreenQuan;

src\Pages\Payment\PaymentWebViewScreenQuan.js
import React, { useRef, useState } from "react";
import { View, ActivityIndicator, Alert } from "react-native";
import { WebView } from "react-native-webview";

const PaymentWebViewScreenQuan = ({ navigation, route }) => {
  const { orderUrl } = route.params;
  const [loading, setLoading] = useState(true);

  const handleNavigationStateChange = (navState) => {
    const { url } = navState;

    if (url.startsWith("myapp://payment-result")) {
      // Chặn mở URL ngoài WebView
      console.log("Redirect URL detected: ", url);
      const params = new URLSearchParams(url.split("?")[1]);

      const status = params.get("status");
      const appTransId = params.get("apptransid");
      const amount = params.get("amount");
      const message = params.get("message") || "";

      navigation.navigate("PaymentResultScreenQuan", {
        appTransId,
        status: status === "1" ? "PAID" : "FAILED",
        amount,
        message,
      });
    }
  };

  const handleShouldStartLoadWithRequest = (request) => {
    const { url } = request;

    // Kiểm tra URL trước khi mở
    if (url.startsWith("myapp://")) {
      // Nếu là custom scheme, chặn WebView mở
      console.log("Blocking custom URL:", url);
      console.log("Redirect URL detected: ", url);
      const params = new URLSearchParams(url.split("?")[1]);

      const status = params.get("status");
      const appTransId = params.get("apptransid");
      const amount = params.get("amount");
      const message = params.get("message") || "";

      navigation.navigate("PaymentResultScreenQuan", {
        appTransId,
        status: status === "1" ? "PAID" : "FAILED",
        amount,
        message,
      });
      return false; // Chặn URL mở trong WebView
    }

    return true; // Tiếp tục mở URL trong WebView nếu không phải custom scheme
  };

  return (
    <View style={{ flex: 1 }}>
      {loading && <ActivityIndicator size="large" color="#00C4B4" />}
      <WebView
        source={{ uri: orderUrl }}
        onNavigationStateChange={handleNavigationStateChange}
        onShouldStartLoadWithRequest={handleShouldStartLoadWithRequest} // Kiểm tra URL trước khi mở
        startInLoadingState
        onLoadEnd={() => setLoading(false)} // Dừng loading khi WebView tải xong
        originWhitelist={["*"]}
      />
    </View>
  );
};

export default PaymentWebViewScreenQuan;

src\Pages\Profile\EditProfile.js
import React, { useState, useLayoutEffect, useRef } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Image,
  TouchableOpacity,
  Alert,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import * as ImagePicker from "expo-image-picker";
import { useNavigation, useRoute } from "@react-navigation/native";
import PhoneInput from "react-native-phone-number-input";
import { parsePhoneNumberFromString } from "libphonenumber-js";
import { useDispatch } from "react-redux";
import { updateUserInfo, fetchUserInfo } from "../../Redux/Slice/authSlice";

const EditProfile = () => {
  const navigation = useNavigation();
  const route = useRoute();
  const dispatch = useDispatch();
  const { userData } = route.params;
  console.log(userData);

  const [firstName, setFirstName] = useState(userData.firstName || "");
  const [lastName, setLastName] = useState(userData.lastName || "");
  const [email, setEmail] = useState(userData.email || "");
  const [phone, setPhone] = useState(userData.phone || "");
  const [avatar, setAvatar] = useState(
    userData.avatar || "https://cdn-icons-png.flaticon.com/512/149/149071.png"
  );

  const phoneInputRef = useRef(null);

  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });
    if (!result.canceled) {
      setAvatar(result.assets[0].uri);
    }
  };

  const handleSave = async () => {
    if (!validateFields(firstName, lastName, phone)) return;
    const updatedInfo = {
      firstName,
      lastName,
      email,
      phone,
      // image: avatar,
    };

    try {
      const result = await dispatch(updateUserInfo(updatedInfo)).unwrap();
      await dispatch(fetchUserInfo());
      Alert.alert("Thành công", "Cập nhật thông tin thành công!");
      navigation.goBack();
    } catch (error) {
      Alert.alert("Lỗi", "Không thể cập nhật thông tin. Vui lòng thử lại.");
    }
  };
  const validateFields = (firstName, lastName, phone) => {
    const nameRegex = /^[A-Za-zÀ-ỹ\s]+$/; // chấp nhận tiếng Việt + space
    const phoneRegex = /^\d{10}$/;

    if (!nameRegex.test(firstName)) {
      Alert.alert("Lỗi", "Họ chỉ được chứa chữ cái và khoảng trắng.");
      return false;
    }

    if (!nameRegex.test(lastName)) {
      Alert.alert("Lỗi", "Tên chỉ được chứa chữ cái và khoảng trắng.");
      return false;
    }

    if (!phoneRegex.test(phone)) {
      Alert.alert("Lỗi", "Số điện thoại phải gồm đúng 10 chữ số.");
      return false;
    }

    return true;
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity
        style={styles.header}
        onPress={() => navigation.goBack()}
      >
        <Ionicons name="chevron-back-outline" size={24} color="black" />
        <Text style={styles.headerText}>Chỉnh sửa hồ sơ</Text>
      </TouchableOpacity>

      <View style={styles.avatarContainer}>
        <Image source={{ uri: avatar }} style={styles.avatar} />
        <TouchableOpacity style={styles.cameraIcon} onPress={pickImage}>
          <Ionicons name="camera-outline" size={24} color="white" />
        </TouchableOpacity>
      </View>

      {/* First name */}
      <View style={styles.inputContainer}>
        <Text style={styles.inputLabel}>Họ</Text>
        <View style={styles.inputText}>
          <Ionicons name="person-outline" size={20} color="#0090FF" />
          <TextInput
            style={styles.input}
            value={firstName}
            onChangeText={setFirstName}
            placeholder="Nhập họ"
          />
        </View>
      </View>

      {/* Last name */}
      <View style={styles.inputContainer}>
        <Text style={styles.inputLabel}>Tên</Text>
        <View style={styles.inputText}>
          <Ionicons name="person-circle-outline" size={20} color="#0090FF" />
          <TextInput
            style={styles.input}
            value={lastName}
            onChangeText={setLastName}
            placeholder="Nhập tên"
          />
        </View>
      </View>

      {/* Email */}
      <View style={styles.inputContainer}>
        <Text style={styles.inputLabel}>Email</Text>
        <View style={styles.inputText}>
          <Ionicons name="mail-outline" size={20} color="#0090FF" />
          <TextInput
            style={styles.input}
            value={email}
            onChangeText={setEmail}
            keyboardType="email-address"
            placeholder="Email"
          />
        </View>
      </View>

      {/* Phone */}
      <View style={styles.inputContainer}>
        <Text style={styles.inputLabel}>Số điện thoại</Text>
        <View style={styles.inputText}>
          <Ionicons name="call-outline" size={20} color="#0090FF" />
          <TextInput
            style={styles.input}
            value={phone}
            onChangeText={setPhone}
            keyboardType="email-address"
            placeholder="Phone"
          />
        </View>
      </View>

      {/* Save button */}
      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveText}>Cập nhật</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#F7F8FA", padding: 20 },
  header: { flexDirection: "row", alignItems: "center", marginBottom: 20 },
  headerText: { fontSize: 20, fontWeight: "bold", marginLeft: 10 },
  avatarContainer: {
    alignSelf: "center",
    position: "relative",
    marginBottom: 20,
  },
  avatar: { width: 120, height: 120, borderRadius: 60 },
  cameraIcon: {
    position: "absolute",
    bottom: 5,
    right: 5,
    backgroundColor: "#00C853",
    padding: 6,
    borderRadius: 20,
  },
  inputContainer: {
    borderBottomColor: "gray",
    borderBottomWidth: 1,
    marginBottom: 25,
  },
  inputLabel: { fontSize: 12, marginBottom: 5 },
  inputText: {
    flexDirection: "row",
    alignItems: "center",
    gap: 5,
  },
  input: { flex: 1, paddingLeft: 8 },
  saveButton: {
    backgroundColor: "#00F598",
    padding: 12,
    borderRadius: 12,
    alignItems: "center",
    marginTop: 30,
  },
  saveText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
  },
  phoneContainer: {
    width: "100%",
    height: 50,
    backgroundColor: "transparent",
  },
  textContainer: {
    backgroundColor: "transparent",
  },
});

export default EditProfile;


src\Pages\Profile\PersonalVoucher.js
import React, { useLayoutEffect, useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
} from "react-native";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchMyVouchers,
  clearVoucherStatus,
} from "../../Redux/Slice/voucherSlice"; // Thay bằng đường dẫn thực tế
import { useAppDispatch, useAppSelector } from "../../Redux/hook";

const PersonalVoucher = ({ navigation }) => {
  const dispatch = useAppDispatch();
  const { accessToken, isLoggedIn } = useAppSelector((state) => state.auth);
  const { myVouchers, loading, error } = useAppSelector(
    (state) => state?.voucher
  );
  const [activeTab, setActiveTab] = useState("unused");

  // Gọi API khi component mount
  useEffect(() => {
    if (isLoggedIn && accessToken) {
      dispatch(fetchMyVouchers());
    }
  }, [dispatch, isLoggedIn, accessToken]);

  // Xử lý thông báo lỗi
  useEffect(() => {
    if (error) {
      alert(error);
      dispatch(clearVoucherStatus());
    }
  }, [error, dispatch]);

  // Ẩn/hiện tabBar

  const handleToVoucherDetail = (voucher) => {
    navigation.navigate("VoucherDetail", { voucher });
  };
  const handleToHome = (item) => {
    if (item.status === "unused") {
      // console.log("Current nav state: ", navigation.getState());
      navigation.reset({
        index: 0,
        routes: [{ name: "Profile" }],
      });
      navigation.navigate("Home");
    } else {
      console.log("Voucher đã dùng/đã hết hạn");
    }
  };

  const voucherData =
    activeTab === "unused"
      ? myVouchers?.unused
      : activeTab === "used"
      ? myVouchers?.used
      : myVouchers?.expired;

  const renderVoucher = ({ item }) => (
    <TouchableOpacity
      onPress={() => handleToVoucherDetail(item)}
      style={[
        styles.voucherItem,
        activeTab === "expired" && styles.expiredVoucher,
      ]}
    >
      <View style={styles.iconContainer}>
        <View
          style={[
            styles.voucherIconContainer,
            { backgroundColor: item?.iconBackground },
          ]}
        >
          <Text style={styles.voucherIcon}>V</Text>
        </View>
      </View>
      <View style={styles.voucherContent}>
        <View style={styles.voucherContentLeft}>
          <Text style={styles.voucherTitle}>{item?.title}</Text>
          {item?.condition ? (
            <Text style={styles.voucherCondition}>{item?.condition}</Text>
          ) : null}
          <Text style={styles.voucherExpiry}>{item?.expiry}</Text>
          <View style={styles.voucherActions}>
            {/* <TouchableOpacity>
              <Text style={styles.conditionText}>Điều kiện</Text>
            </TouchableOpacity> */}
          </View>
        </View>
        <View style={styles.voucherContentRight}>
          <TouchableOpacity
            style={[
              styles.actionButton,
              item?.status === "unused"
                ? styles.actionButtonUnused
                : styles.actionButtonUsed,
            ]}
            onPress={() => handleToHome(item)}
          >
            <Text style={styles.actionButtonText}>
              {item?.status === "unused"
                ? "Dùng ngay"
                : item?.status === "used"
                ? "Đã dùng"
                : "Hết hạn"}
            </Text>
          </TouchableOpacity>
        </View>
      </View>
    </TouchableOpacity>
  );

  if (loading) {
    return (
      <View style={styles.container}>
        <Text>Đang tải...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text>Lỗi: {error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.tabContainer}>
        {["unused", "used", "expired"].map((tab) => (
          <TouchableOpacity
            key={tab}
            style={[styles.tab, activeTab === tab && styles.activeTab]}
            onPress={() => setActiveTab(tab)}
          >
            <Text
              style={[
                styles.tabText,
                activeTab === tab && styles.activeTabText,
              ]}
            >
              {tab === "unused"
                ? "Có thể sử dụng"
                : tab === "used"
                ? "Đã dùng"
                : "Đã hết hạn"}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
      <FlatList
        data={voucherData}
        renderItem={renderVoucher}
        keyExtractor={(item) => item?.id}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>
              {activeTab === "unused"
                ? "Không có voucher nào có thể sử dụng."
                : activeTab === "used"
                ? "Không có voucher nào đã dùng."
                : "Không có voucher nào đã hết hạn."}
            </Text>
          </View>
        }
      />
    </View>
  );
};

export default PersonalVoucher;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#FFF",
  },
  tabContainer: {
    flexDirection: "row",
    borderBottomWidth: 1,
    borderBottomColor: "#E5E5E5",
  },
  tab: {
    flex: 1,
    paddingVertical: 12,
    alignItems: "center",
    borderBottomWidth: 2,
    borderBottomColor: "transparent",
  },
  activeTab: {
    borderBottomColor: "#007AFF",
  },
  tabText: {
    fontSize: 14,
    color: "#666",
    fontWeight: "500",
  },
  activeTabText: {
    color: "#007AFF",
    fontWeight: "bold",
  },
  voucherItem: {
    flexDirection: "row",
    backgroundColor: "#FFF",
    borderRadius: 8,
    marginHorizontal: 16,
    marginVertical: 4,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
    overflow: "hidden",
  },
  expiredVoucher: {
    opacity: 0.5,
  },
  iconContainer: {
    width: 80,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FFF",
  },
  voucherIconContainer: {
    width: 60,
    height: 60,
    borderRadius: 8,
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 2,
    borderColor: "#FFF",
    borderStyle: "dashed",
  },
  voucherIcon: {
    fontSize: 30,
    color: "#FFF",
    fontWeight: "bold",
  },
  voucherContent: {
    flex: 1,
    paddingVertical: 12,
    paddingRight: 12,
    flexDirection: "row",
  },
  voucherContentLeft: {
    width: "70%",
  },
  voucherContentRight: {
    justifyContent: "center",
    alignItems: "center",
  },
  voucherTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginTop: 4,
  },
  voucherCondition: {
    fontSize: 12,
    color: "#666",
    marginTop: 2,
  },
  voucherExpiry: {
    fontSize: 12,
    color: "#666",
    marginTop: 2,
  },
  voucherActions: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginTop: 8,
  },
  conditionText: {
    fontSize: 12,
    color: "#00A4E8",
    fontWeight: "500",
  },
  actionButton: {
    borderRadius: 4,
    paddingHorizontal: 12,
    paddingVertical: 6,
  },
  actionButtonUnused: {
    backgroundColor: "#46BFE0",
  },
  actionButtonUsed: {
    backgroundColor: "#CCCCCC",
  },
  actionButtonText: {
    fontSize: 12,
    color: "#FFF",
    fontWeight: "bold",
  },
  emptyContainer: {
    padding: 20,
    alignItems: "center",
  },
  emptyText: {
    fontSize: 14,
    color: "#666",
    textAlign: "center",
  },
});


src\Pages\Profile\Points.js
import React from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  FlatList,
} from "react-native";
import Icon from "react-native-vector-icons/MaterialCommunityIcons";

const rewards = [
  { id: "1", title: "Giảm 15% cho mọi đặt phòng", points: 1000 },
  { id: "2", title: "Giảm 15% cho mọi đặt phòng", points: 1000 },
];

const Points = ({ navigation }) => {
  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>Điểm: 2300</Text>
        <TouchableOpacity onPress={() => navigation.navigate("PointsHistory")}>
          <Text style={styles.historyText}>Lịch sử</Text>
        </TouchableOpacity>
      </View>
      {/* Danh sách voucher */}
      <FlatList
        data={rewards}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.rewardItem}>
            <View style={styles.rewardItemGroup}>
              <Icon name="ticket-percent-outline" size={60} color="#007BFF" />
            </View>
            <View style={styles.rewardItemGroup}>
              <Text style={styles.rewardTitle}>{item.title}</Text>
            </View>
            <View style={styles.rewardItemGroup}>
              <Text style={styles.rewardPoints}>{item.points} điểm</Text>
            </View>
          </View>
        )}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    padding: 20,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
  },
  historyText: {
    fontSize: 20,
    color: "#007BFF",
    fontWeight: "bold",
  },
  rewardItem: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderColor: "#ddd",
  },
  rewardItemGroup: {
    width: "30%",
    alignItems: "center",
    justifyContent: "center",
  },
  rewardTextContainer: {
    marginLeft: 10,
  },
  rewardTitle: {
    fontSize: 16,
  },
  rewardPoints: {
    fontSize: 14,
    color: "#007BFF",
    fontWeight: "bold",
  },
});

export default Points;

src\Pages\Profile\PointsHistory.js
import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  FlatList,
} from "react-native";
import Icon from "react-native-vector-icons/MaterialCommunityIcons";

const historyData = {
  received: [
    { id: "1", title: "Nhận 432 điểm từ đơn hàng", date: "14/03/2025" },
    { id: "2", title: "Nhận 200 điểm từ khuyến mãi", date: "10/02/2025" },
  ],
  used: [
    { id: "3", title: "Dùng 1000 điểm cho giảm giá 15%", date: "05/03/2025" },
    { id: "4", title: "Dùng 500 điểm cho giảm giá 10%", date: "01/02/2025" },
  ],
};

const PointsHistory = () => {
  const [selectedTab, setSelectedTab] = useState("received");

  return (
    <View style={styles.container}>
      {/* Tabs */}
      <View style={styles.tabContainer}>
        <TouchableOpacity
          style={[
            styles.tabButton,
            selectedTab === "received" && styles.activeTab,
          ]}
          onPress={() => setSelectedTab("received")}
        >
          <Text
            style={[
              styles.tabText,
              selectedTab === "received" && styles.activeTabText,
            ]}
          >
            Đã nhận
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tabButton, selectedTab === "used" && styles.activeTab]}
          onPress={() => setSelectedTab("used")}
        >
          <Text
            style={[
              styles.tabText,
              selectedTab === "used" && styles.activeTabText,
            ]}
          >
            Đã dùng
          </Text>
        </TouchableOpacity>
      </View>

      {/* Danh sách lịch sử */}
      <FlatList
        data={historyData[selectedTab]}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.historyItem}>
            <Icon
              name={
                selectedTab === "received"
                  ? "checkbox-marked-circle"
                  : "star-circle-outline"
              }
              size={40}
              color={selectedTab === "received" ? "#4CAF50" : "#FF9800"} // Màu xanh lá cho "Đã nhận", cam cho "Đã dùng"
            />
            <View style={styles.historyTextContainer}>
              <Text style={styles.historyTitle}>{item.title}</Text>
              <Text style={styles.historyDate}>Ngày: {item.date}</Text>
            </View>
          </View>
        )}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F9F9F9",
    padding: 20,
  },
  tabContainer: {
    flexDirection: "row",
    backgroundColor: "#E0E0E0",
    borderRadius: 25,
    padding: 2,
    marginBottom: 15,
  },
  tabButton: {
    flex: 1,
    paddingVertical: 12,
    alignItems: "center",
    borderRadius: 25,
  },
  activeTab: {
    backgroundColor: "#007BFF",
  },
  tabText: {
    fontSize: 16,
    color: "#007BFF",
    fontWeight: "bold",
  },
  activeTabText: {
    color: "#fff",
    fontWeight: "bold",
  },
  historyItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderColor: "#ddd",
  },
  historyTextContainer: {
    marginLeft: 10,
  },
  historyTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#444",
  },
  historyDate: {
    fontSize: 14,
    color: "#777",
  },
});

export default PointsHistory;

src\Pages\Profile\Profile.js
import React, { useCallback, useEffect, useState } from "react";
import { View, Text, StyleSheet, Image, TouchableOpacity } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useFocusEffect } from "@react-navigation/native";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";
import { fetchUserInfo, logout, setPrePage } from "../../Redux/Slice/authSlice";

const Profile = ({ navigation }) => {
  const dispatch = useAppDispatch();
  const { isLoggedIn, infoUser } = useAppSelector((state) => state.auth);
  console.log(infoUser);
  const anonymousData = {
    name: "Ẩn danh",
    email: "email@anonym.com",
    phone: "+123456789",
    avatar:
      "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT2F8DoZLvVpkbPZs1z1dBzXKLvgRNwgUrstA&s",
  };

  // Avatar fallback nếu chưa có từ API
  const defaultAvatar =
    "https://media.istockphoto.com/id/1587604256/vi/anh/ch%C3%A2n-dung-lu%E1%BA%ADt-s%C6%B0-v%C3%A0-ng%C6%B0%E1%BB%9Di-ph%E1%BB%A5-n%E1%BB%AF-da-%C4%91en-v%E1%BB%9Bi-m%C3%A1y-t%C3%ADnh-b%E1%BA%A3ng-n%E1%BB%A5-c%C6%B0%E1%BB%9Di-v%C3%A0-h%E1%BA%A1nh-ph%C3%BAc-t%E1%BA%A1i-n%C6%A1i-l%C3%A0m.jpg?s=612x612&w=0&k=20&c=0hnV6JuSMy8XAV25oJFzQeHPYysYe8cfHUyhgZlQYQc=";

  useEffect(() => {
    dispatch(fetchUserInfo());
  }, [isLoggedIn, dispatch]);
  const displayData = isLoggedIn
    ? {
        firstName: infoUser?.firstName || "No name",
        lastName: infoUser?.lastName || "",
        email: infoUser?.email || "No email",
        phone: infoUser?.phone || "No phone",
        image: infoUser?.image || defaultAvatar,
      }
    : anonymousData;

  const handleToEditProfile = () => {
    navigation.navigate("EditProfile", { userData: displayData });
  };

  const handleToRewardMember = () => {
    navigation.navigate("RewardMember");
  };

  const handleToSettingsScreen = () => {
    navigation.navigate("SettingsScreen");
  };

  const handleToPersonalVoucher = () => {
    navigation.navigate("PersonalVoucher");
  };

  const handleLogin = () => {
    dispatch(setPrePage("Profile"));
    navigation.navigate("LoginScreen");
  };
  const handleLogout = () => {
    dispatch(logout());
    navigation.navigate("LoginScreen");
  };

  return (
    <View style={styles.container}>
      <View style={styles.topContainer}>
        <Image
          source={{ uri: displayData.image }}
          style={styles.profileImage}
        />
      </View>

      <View style={styles.profileCard}>
        {isLoggedIn && (
          <TouchableOpacity
            style={styles.editButton}
            onPress={handleToEditProfile}
          >
            <Ionicons name="pencil" size={26} color="white" />
          </TouchableOpacity>
        )}
        <Text style={styles.userName}>
          {displayData.firstName} {displayData.lastName}
        </Text>
        <Text style={styles.userEmail}>{displayData.email}</Text>
        <Text style={styles.userPhone}>{displayData.phone}</Text>
      </View>

      <View style={styles.optionsContainer}>
        {isLoggedIn ? (
          <>
            <TouchableOpacity
              style={styles.optionItem}
              onPress={handleToSettingsScreen}
            >
              <Text style={styles.optionText}>Cài đặt</Text>
              <Ionicons name="chevron-forward" size={20} color="#0090FF" />
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.optionItem}
              onPress={handleToRewardMember}
            >
              <Text style={styles.optionText}>Phần thưởng và Thành viên</Text>
              <Ionicons name="chevron-forward" size={20} color="#0090FF" />
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.optionItem}
              onPress={handleToPersonalVoucher}
            >
              <Text style={styles.optionText}>Voucher của bạn</Text>
              <Ionicons name="chevron-forward" size={20} color="#0090FF" />
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.logoutButton}
              onPress={() => handleLogout()}
            >
              <Text style={styles.logoutText}>Đăng xuất</Text>
            </TouchableOpacity>
          </>
        ) : (
          <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>
            <Text style={styles.loginText}>Đăng nhập</Text>
          </TouchableOpacity>
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F7F8FA",
    justifyContent: "center",
    alignItems: "center",
  },
  topContainer: {
    height: "50%",
    width: "100%",
    borderBottomLeftRadius: 30,
    borderBottomRightRadius: 30,
    overflow: "hidden",
  },
  profileImage: {
    width: "100%",
    height: "100%",
    resizeMode: "cover",
  },
  profileCard: {
    position: "relative",
    width: "85%",
    backgroundColor: "white",
    padding: 20,
    borderRadius: 15,
    alignItems: "center",
    shadowColor: "#000",
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 5,
    marginTop: -50,
  },
  editButton: {
    width: 50,
    height: 50,
    position: "absolute",
    top: -20,
    right: -20,
    backgroundColor: "#00C853",
    padding: 8,
    borderRadius: 100,
    justifyContent: "center",
    alignItems: "center",
    elevation: 5,
  },
  userName: {
    fontSize: 30,
    fontWeight: "bold",
    marginTop: 10,
  },
  userEmail: {
    fontSize: 16,
    color: "#555",
  },
  userPhone: {
    fontSize: 16,
    color: "#555",
  },
  optionsContainer: {
    padding: 20,
  },
  optionItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    backgroundColor: "white",
    padding: 15,
    borderRadius: 10,
    marginBottom: 15,
    elevation: 3,
    width: "95%",
  },
  optionText: {
    fontSize: 16,
    color: "#333",
  },
  logoutButton: {
    backgroundColor: "#00F598",
    padding: 15,
    borderRadius: 10,
    alignItems: "center",
    elevation: 3,
  },
  logoutText: {
    fontSize: 16,
    color: "white",
    fontWeight: "400",
  },
  loginButton: {
    marginTop: 80,
    backgroundColor: "#00F598",
    padding: 15,
    borderRadius: 10,
    alignItems: "center",
    elevation: 3,
    paddingHorizontal: 120,
  },
  loginText: {
    fontSize: 16,
    color: "white",
    fontWeight: "bold",
  },
});

export default Profile;

src\Pages\Profile\RewardMember.js
import React, { useLayoutEffect, useEffect, useMemo, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
} from "react-native";
import Color from "color";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchSystemVouchers,
  fetchRanks,
  saveVoucher,
  fetchMyVouchers,
  clearVoucherStatus,
} from "../../Redux/Slice/voucherSlice";

const RewardMember = ({ navigation }) => {
  const dispatch = useDispatch();
  const { accessToken, isLoggedIn } = useSelector((state) => state.auth);
  const {
    systemVouchers,
    myVouchers,
    ranks,
    user,
    loading,
    error,
    successSave,
  } = useSelector((state) => state.voucher);
  const [activeTab, setActiveTab] = useState("Overview");

  // Gọi API khi component mount
  useEffect(() => {
    if (isLoggedIn && accessToken) {
      dispatch(fetchSystemVouchers());
      dispatch(fetchMyVouchers());
      dispatch(fetchRanks());
    }
  }, [dispatch, isLoggedIn, accessToken]);

  // Xử lý thông báo khi lưu voucher
  useEffect(() => {
    if (successSave) {
      alert(successSave); // Có thể thay bằng ToastAndroid hoặc thư viện khác
      dispatch(clearVoucherStatus());
    }
    if (error) {
      alert(error);
      dispatch(clearVoucherStatus());
    }
  }, [successSave, error, dispatch]);

  // Ẩn/hiện tabBar

  // Tính toán userRank
  const userRank = useMemo(
    () =>
      [...ranks]
        .reverse()
        .find(
          (rank) =>
            user.Orders >= rank.minOrders && user.Spend >= rank.minSpending
        ) ||
      ranks[0] || {
        name: "Đồng",
        color: "#d3a652",
        minOrders: 0,
        minSpending: 0,
      },
    [ranks, user]
  );

  const currentRankIndex = ranks.findIndex(
    (rank) => rank.name === userRank.name
  );

  const nextRank = ranks[currentRankIndex + 1];
  let progressOrders = 100;
  let progressSpend = 100;
  if (nextRank) {
    progressOrders = Math.min((user.Orders / nextRank.minOrders) * 100, 100);
    progressSpend = Math.min((user.Spend / nextRank.minSpending) * 100, 100);
  }

  // Tạo danh sách ID của myVouchers để kiểm tra
  const myVouchersIds = useMemo(() => {
    return [
      ...myVouchers?.unused,
      ...myVouchers?.used,
      ...myVouchers?.expired,
    ].map((voucher) => voucher.id);
  }, [myVouchers]);

  const handleToVoucherDetail = (voucher) => {
    navigation.navigate("VoucherDetail", { voucher });
  };

  const handleSaveVoucher = (voucherId) => {
    dispatch(saveVoucher(voucherId));
  };

  const renderRank = ({ item }) => (
    <View
      style={[
        styles.rankItem,
        { borderColor: item.color },
        userRank.name === item.name && styles.currentRank,
      ]}
    >
      <Text style={[styles.rankName, { color: item.color }]}>{item.name}</Text>
      <Text style={styles.rankCondition}>
        {`Đặt thành công ≥ ${
          item.minOrders
        } | Chi tiêu ≥ ${item.minSpending.toLocaleString()} VND`}
      </Text>
      <Text style={styles.description}>{item.description}</Text>
    </View>
  );

  const renderVoucher = ({ item }) => {
    const isSaved = myVouchersIds.includes(String(item.id)); // Kiểm tra coupon đã lưu

    return (
      <TouchableOpacity
        style={styles.voucherItem}
        onPress={() => handleToVoucherDetail(item)}
      >
        <View style={styles.iconContainer}>
          <View
            style={[
              styles.voucherIconContainer,
              { backgroundColor: item.iconBackground || "#ccc" },
            ]}
          >
            <Text style={styles.voucherIcon}>S</Text>
          </View>
        </View>
        <View style={styles.voucherContent}>
          <View style={styles.voucherContentLeft}>
            <Text style={styles.voucherTitle}>{item.description}</Text>
            <Text style={styles.voucherExpiry}>{item.code}</Text>
            <Text style={styles.voucherExpiry}>{item.expirationDate}</Text>
          </View>
          <View style={styles.voucherContentRight}>
            <TouchableOpacity
              style={[
                styles.actionButton,
                isSaved ? styles.actionButtonSaved : styles.actionButtonNormal,
              ]}
              onPress={() => !isSaved && handleSaveVoucher(item.id)}
              disabled={isSaved}
            >
              <Text style={styles.actionButtonText}>
                {isSaved ? "Đã lưu" : "Lưu"}
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      </TouchableOpacity>
    );
  };

  const renderOverview = () => (
    <View style={styles.overviewContainer}>
      <View
        style={[
          styles.pointsCard,
          { backgroundColor: Color(userRank.color).hex() },
        ]}
      >
        <View
          style={{
            flexDirection: "row",
            justifyContent: "space-between",
            alignItems: "center -between",
          }}
        >
          <Text style={styles.pointsLabel}>Thứ hạng</Text>
          <Text
            style={[
              styles.pointsRank,
              { backgroundColor: Color(userRank.color).lighten(0.1).hex() },
            ]}
          >
            {userRank.name}
          </Text>
        </View>

        <View style={styles.progressRow}>
          <View style={styles.progressBox}>
            <Text style={styles.progressTitle}>Đặt thành công</Text>
            <Text style={styles.progressStatus}>
              {user.Orders}/{nextRank?.minOrders || user.Orders}
            </Text>
            <View style={styles.progressBar}>
              <View
                style={[
                  styles.progressFill,
                  {
                    width: `${progressOrders}%`,
                    backgroundColor: Color(userRank.color).lighten(0.5).hex(),
                  },
                ]}
              />
            </View>
          </View>

          <View style={styles.progressBox}>
            <Text style={styles.progressTitle}>Chi tiêu</Text>
            <Text style={styles.progressStatus}>
              {user.Spend.toLocaleString()} /
              {nextRank?.minSpending.toLocaleString() ||
                user.Spend.toLocaleString()}
            </Text>
            <View style={styles.progressBar}>
              <View
                style={[
                  styles.progressFill,
                  {
                    width: `${progressSpend}%`,
                    backgroundColor: Color(userRank.color).lighten(0.5).hex(),
                  },
                ]}
              />
            </View>
          </View>
        </View>

        <Text style={styles.updateNote}>
          Thứ hạng sẽ được cập nhật lại sau 30.06.2025
        </Text>
      </View>

      <View style={styles.voucherSection}>
        <Text style={styles.sectionTitle}>Ưu đãi từ hệ thống</Text>
        <FlatList
          data={systemVouchers && systemVouchers}
          renderItem={renderVoucher}
          keyExtractor={(item) => item.id.toString()}
          contentContainerStyle={styles.voucherList}
        />
      </View>
    </View>
  );

  if (loading) {
    return (
      <View style={styles.container}>
        <Text>Đang tải...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text>Lỗi: {error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.tabContainer}>
        {["Overview", "Rating"].map((tab) => (
          <TouchableOpacity
            key={tab}
            style={[styles.tab, activeTab === tab && styles.activeTab]}
            onPress={() => setActiveTab(tab)}
          >
            <Text
              style={[
                styles.tabText,
                activeTab === tab && styles.activeTabText,
              ]}
            >
              {tab === "Overview" ? "Tổng quan" : "Xếp hạng"}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      {activeTab === "Overview" && renderOverview()}

      {activeTab === "Rating" && (
        <View style={styles.ranksContainer}>
          <FlatList
            data={ranks}
            renderItem={renderRank}
            keyExtractor={(item) => item.name}
            contentContainerStyle={styles.ranksList}
          />
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F5F5F5",
  },
  userInfo: {
    padding: 16,
  },
  userName: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#333",
  },
  tabContainer: {
    flexDirection: "row",
    margin: 16,
    marginBottom: 0,
  },
  tab: {
    flex: 1,
    paddingVertical: 8,
    alignItems: "center",
    borderBottomWidth: 2,
    borderBottomColor: "#DDD",
  },
  activeTab: {
    borderBottomColor: "#007AFF",
  },
  tabText: {
    fontSize: 16,
    color: "#666",
  },
  activeTabText: {
    color: "#007AFF",
    fontWeight: "bold",
  },
  overviewContainer: {
    flex: 1,
  },
  pointsCard: {
    padding: 16,
    borderRadius: 12,
    margin: 16,
    marginBottom: 8,
  },
  pointsLabel: {
    fontSize: 16,
    color: "#fff",
    fontWeight: "bold",
  },
  pointsRank: {
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 8,
    color: "#fff",
    fontWeight: "600",
  },
  progressRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 12,
  },
  progressBox: {
    width: "48%",
  },
  progressTitle: {
    color: "#fff",
    fontSize: 14,
    marginBottom: 4,
  },
  progressStatus: {
    color: "#fff",
    fontSize: 12,
    marginBottom: 6,
  },
  progressBar: {
    height: 8,
    backgroundColor: "rgba(255,255,255,0.3)",
    borderRadius: 4,
    overflow: "hidden",
  },
  progressFill: {
    height: "100%",
    borderRadius: 4,
  },
  updateNote: {
    marginTop: 12,
    color: "#fff",
    fontSize: 12,
    textAlign: "center",
  },
  voucherSection: {
    flex: 1,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginHorizontal: 16,
    marginBottom: 8,
  },
  voucherList: {
    paddingHorizontal: 16,
    paddingBottom: 16,
  },
  voucherItem: {
    flexDirection: "row",
    backgroundColor: "#FFF",
    borderRadius: 8,
    marginVertical: 4,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
    overflow: "hidden",
  },
  iconContainer: {
    width: 80,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FFF",
  },
  voucherIconContainer: {
    width: 60,
    height: 60,
    borderRadius: 8,
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 2,
    borderColor: "#FFF",
    borderStyle: "dashed",
  },
  voucherIcon: {
    fontSize: 30,
    color: "#FFF",
    fontWeight: "bold",
  },
  voucherContent: {
    flex: 1,
    paddingVertical: 12,
    paddingRight: 12,
    flexDirection: "row",
  },
  voucherContentLeft: {
    width: "70%",
  },
  voucherContentRight: {
    justifyContent: "center",
    alignItems: "center",
  },
  voucherTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginTop: 4,
  },
  voucherExpiry: {
    fontSize: 12,
    color: "#666",
    marginTop: 2,
  },
  actionButton: {
    borderRadius: 4,
    paddingHorizontal: 12,
    paddingVertical: 6,
  },
  actionButtonNormal: {
    backgroundColor: "#EE4D2D",
  },
  actionButtonSaved: {
    backgroundColor: "#CCCCCC",
  },
  actionButtonText: {
    fontSize: 12,
    color: "#FFF",
    fontWeight: "bold",
  },
  ranksContainer: {
    flex: 1,
    backgroundColor: "#FFF",
    margin: 16,
    padding: 16,
    borderRadius: 12,
    elevation: 2,
  },
  ranksList: {
    paddingBottom: 16,
  },
  rankItem: {
    padding: 16,
    borderWidth: 1,
    borderRadius: 8,
    marginBottom: 8,
  },
  currentRank: {
    backgroundColor: "#F0F0F0",
  },
  rankName: {
    fontSize: 18,
    fontWeight: "bold",
  },
  rankCondition: {
    fontSize: 14,
    color: "#666",
    marginTop: 4,
  },
  description: {
    fontSize: 12,
    color: "#666",
    marginTop: 4,
  },
});

export default RewardMember;


src\Pages\Profile\VoucherDetail.js
import React from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
} from "react-native";

const FAKE_VOUCHERS = [
  {
    id: "1",
    code: "SUMMER25",
    type: "PERCENTAGE",
    expiry: "2025-04-30 17:40:08",
    quantity: 100,
    isActive: true,
    discountValue: 25.0,
    minOrderValue: 2000000.0,
    createdAt: "2025-04-04 17:40:54",
    maxDiscount: 50000,
    description: "Giảm giá 25% với những hóa đơn trên 2 triệu đồng",
    rank: null,
  },
  {
    id: "2",
    code: "WELCOME100",
    type: "FIXED",
    expiry: "2025-04-27 17:42:36",
    quantity: 100,
    isActive: true,
    discountValue: 100000.0,
    minOrderValue: 0.0,
    createdAt: "2025-04-04 17:43:01",
    maxDiscount: 0,
    description: "Giảm ngay 100.000đ với hóa đơn đầu tiên",
    rank: null,
  },
  {
    id: "3",
    code: "DONG10P",
    type: "PERCENTAGE",
    expiry: "2025-12-31 00:00:00",
    quantity: 100,
    isActive: true,
    discountValue: 10.0,
    minOrderValue: 300000.0,
    createdAt: "2025-04-19 00:00:00",
    maxDiscount: 0,
    description: "Giảm 10% cho đơn đầu tiên - hạng Đồng",
    rank: "Đồng",
  },
];

const VoucherDetail = ({ navigation }) => {
  const voucher = FAKE_VOUCHERS[0]; // Sử dụng voucher đầu tiên trong danh sách giả

  const applicableProducts =
    "Áp dụng trên app cho một số sản phẩm tham gia chương trình. Không áp dụng cho sim, thẻ cao, e-voucher, sữa cho bé dưới 2 tuổi.";
  const paymentMethods = "Tất cả các hình thức thanh toán";
  const shippingUnits =
    "Giao Hàng Nhanh, VNPost Tiết Kiệm, Viettel Post, Giao Hàng Tiết Kiệm, VNPost Nhanh, J&T Express, GrabExpress, Standard Express - LWE, Standard Express - DoorA, Standard Express, Shopee Express, NowShip, Ninja Van, BEST Express - Korea, Standard Express, Hoá Tốc, Nhanh, Tiết kiệm";

  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <View style={styles.header}>
          <View style={styles.limitedLabel}>
            <Text style={styles.limitedLabelText}>SỐ LƯỢNG CÓ HẠN</Text>
          </View>
          <View style={styles.iconContainer}>
            <View style={styles.voucherIconContainer}>
              <Text style={styles.voucherIcon}>S</Text>
            </View>
          </View>
          <Text style={styles.title}>
            {voucher.type === "PERCENTAGE"
              ? `Giảm ${voucher.discountValue}% ${
                  voucher.maxDiscount > 0
                    ? `Tối đa ${voucher.maxDiscount.toLocaleString()} VNĐ`
                    : ""
                }`
              : `Giảm ${voucher.discountValue.toLocaleString()} VNĐ`}{" "}
            {voucher.minOrderValue > 0
              ? `Đơn tối thiểu ${voucher.minOrderValue.toLocaleString()} VNĐ`
              : ""}
          </Text>
          <Text style={styles.expiry}>
            Có Hiệu Lực Từ:{" "}
            {new Date(voucher.createdAt).toLocaleString("vi-VN", {
              day: "2-digit",
              month: "2-digit",
              year: "numeric",
              hour: "2-digit",
              minute: "2-digit",
            })}
          </Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Sản Phẩm</Text>
          <Text style={styles.sectionContent}>{applicableProducts}</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Thanh Toán</Text>
          <Text style={styles.sectionContent}>{paymentMethods}</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Đơn vị vận chuyển</Text>
          <Text style={styles.sectionContent}>{shippingUnits}</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Xem chi tiết</Text>
          <Text style={styles.sectionContent}>
            Nhập mã {voucher.code} để được{" "}
            {voucher.type === "PERCENTAGE"
              ? `giảm ${voucher.discountValue}%`
              : `giảm ${voucher.discountValue.toLocaleString()} VNĐ`}{" "}
            {voucher.maxDiscount > 0
              ? `tối đa ${voucher.maxDiscount.toLocaleString()} xu`
              : ""}{" "}
            cho đơn{" "}
            {voucher.minOrderValue > 0
              ? `${voucher.minOrderValue.toLocaleString()} VNĐ`
              : "bất kỳ"}
            . HSD:{" "}
            {new Date(voucher.expiry).toLocaleString("vi-VN", {
              hour: "2-digit",
              minute: "2-digit",
              day: "2-digit",
              month: "2-digit",
              year: "numeric",
            })}
            . SỐ LƯỢNG CÓ HẠN.
          </Text>
        </View>
      </ScrollView>

      <TouchableOpacity
        style={styles.agreeButton}
        onPress={() => navigation.goBack()}
      >
        <Text style={styles.agreeButtonText}>ĐỒNG Ý</Text>
      </TouchableOpacity>
    </View>
  );
};

export default VoucherDetail;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#FFF",
  },
  scrollContent: {
    padding: 16,
    paddingBottom: 80,
  },
  header: {
    marginBottom: 16,
  },
  limitedLabel: {
    backgroundColor: "#FF6200",
    alignSelf: "flex-start",
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
  },
  limitedLabelText: {
    fontSize: 10,
    color: "#FFD700",
    fontWeight: "bold",
  },
  iconContainer: {
    width: 80,
    justifyContent: "center",
    alignItems: "flex-start",
    backgroundColor: "#FFF",
    marginVertical: 8,
  },
  voucherIconContainer: {
    width: 60,
    height: 60,
    borderRadius: 8,
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 2,
    borderColor: "#FFF",
    borderStyle: "dashed",
    backgroundColor: "#FF6200",
  },
  voucherIcon: {
    fontSize: 30,
    color: "#FFF",
    fontWeight: "bold",
  },
  title: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 4,
  },
  expiry: {
    fontSize: 12,
    color: "#FF0000",
  },
  section: {
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 4,
  },
  sectionContent: {
    fontSize: 14,
    color: "#666",
    lineHeight: 20,
  },
  agreeButton: {
    position: "absolute",
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: "#EE4D2D",
    paddingVertical: 16,
    alignItems: "center",
  },
  agreeButtonText: {
    fontSize: 16,
    color: "#FFF",
    fontWeight: "bold",
  },
});


src\Pages\Promotion\Discount.js
import React, { useEffect } from "react";
import { View, Text, TouchableOpacity, StyleSheet } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";
import { useAppSelector, useAppDispatch } from "../../Redux/hook";
import { fetchListPromotion } from "../../Redux/Slice/promotionSlice";
import { formatPrice } from "../../Utils/formarPrice";
import { Alert } from "react-native";
import {
  fetchBookingRoom,
  updateBookingPayload,
} from "../../Redux/Slice/hotelSlice";
import cloneDeep from "lodash/cloneDeep";

const Discount = ({ navigation, route }) => {
  const prePage = route?.params?.prePage || "";
  const { listPromotion, loadingPromotion } = useAppSelector(
    (state) => state.promotion
  );
  const { bookingPayload } = useAppSelector((state) => state.hotel);
  const { accessToken, isLoggedIn } = useAppSelector((state) => state.auth);
  const dispatch = useAppDispatch();

  // Sắp xếp danh sách để mã đang dùng (dựa trên bookingPayload.couponId) lên đầu
  const sortedPromotions = [...listPromotion].sort((a, b) => {
    if (a.id === bookingPayload?.couponId) return -1;
    if (b.id === bookingPayload?.couponId) return 1;
    return 0;
  });

  const handleChooseSale = (item) => {
    try {
      if (prePage === "OrderConfirm") {
        if (!item?.id || !item?.code) {
          Alert.alert("Lỗi", "Mã giảm giá không hợp lệ.");
          return;
        }

        const bookingPayload_ = { ...bookingPayload };
        bookingPayload_.couponId = item.id;
        bookingPayload_.couponCode = item.code;
        console.log("CCCCCCCCCCCCCCCCCCCCC", bookingPayload_);

        dispatch(updateBookingPayload(bookingPayload_));
        // .unwrap()
        // .catch((error) => {
        //   Alert.alert(
        //     "Lỗi",
        //     `Không thể cập nhật booking payload: ${error.message}`
        //   );
        // });

        dispatch(fetchBookingRoom());
        // .unwrap()
        // .catch((error) => {
        //   Alert.alert("Lỗi", `Không thể tải dữ liệu phòng: ${error.message}`);
        // });

        navigation.navigate("OrderConfirm");
      }
      console.log(item);
    } catch (error) {
      Alert.alert("Lỗi", `Không thể xử lý mã giảm giá: ${error.message}`);
    }
  };

  // Chưa đăng nhập
  if (!accessToken && !isLoggedIn) {
    return (
      <View style={styles.emptyContainer}>
        <Ionicons name="log-in-outline" size={48} color="#6B7280" />
        <Text style={styles.emptyText}>
          Bạn cần đăng nhập để xem mã giảm giá
        </Text>
      </View>
    );
  }

  // Đang tải
  if (loadingPromotion) {
    return (
      <View style={styles.emptyContainer}>
        <Text style={styles.emptyText}>Đang tải...</Text>
      </View>
    );
  }
  console.log(sortedPromotions);
  // Giao diện chính
  return (
    <View style={styles.discountCodes}>
      {sortedPromotions.length > 0 ? (
        sortedPromotions.map((item) => (
          <View key={item?.id} style={styles.discountCodes__item}>
            <Ionicons
              name="gift-outline"
              size={45}
              color="#007BFF"
              style={styles.discountCodes__itemIcon}
            />
            <View style={styles.discountCodes__itemContent}>
              <Text style={styles.discountCodes__itemTitle}>
                {item?.description}
              </Text>
              <Text style={styles.discountCodes__itemCode}>{item?.code}</Text>
              <Text style={styles.discountCodes__itemExpiry}>
                Số tiền đặt phòng thấp nhất{" "}
                {formatPrice(item?.minBookingAmount)}
              </Text>
              <Text style={styles.discountCodes__itemExpiry}>
                Hạn sử dụng: {item?.expirationDate}
              </Text>
            </View>
            <TouchableOpacity
              style={[
                styles.actionButton,
                item.id === bookingPayload?.couponId
                  ? styles.actionButtonUsed
                  : styles.actionButtonUnused,
              ]}
              onPress={() => handleChooseSale(item)}
              disabled={item.id === bookingPayload?.couponId}
            >
              <Text style={styles.actionButtonText}>
                {item.id === bookingPayload?.couponId
                  ? "Đang dùng"
                  : "Dùng ngay"}
              </Text>
            </TouchableOpacity>
          </View>
        ))
      ) : (
        <View style={styles.emptyContainer}>
          <Ionicons
            name="notifications-off-outline"
            size={50}
            color="#888888"
          />
          <Text style={styles.emptyText}>Bạn chưa có mã giảm giá nào</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  discountCodes: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  discountCodes__item: {
    flexDirection: "row",
    alignItems: "center", // Căn giữa để nút nằm gọn
    marginBottom: 20,
    paddingVertical: 10,
  },
  discountCodes__itemIcon: {
    marginRight: 10,
  },
  discountCodes__itemContent: {
    flex: 1,
  },
  discountCodes__itemTitle: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
    marginBottom: 5,
  },
  discountCodes__itemCode: {
    fontSize: 14,
    color: "#007BFF",
    marginBottom: 5,
  },
  discountCodes__itemExpiry: {
    fontSize: 14,
    color: "#888888",
  },
  actionButton: {
    borderRadius: 4,
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginLeft: 10,
  },
  actionButtonUnused: {
    backgroundColor: "#00F598", // Màu chủ đạo
  },
  actionButtonUsed: {
    backgroundColor: "#CCCCCC",
  },
  actionButtonText: {
    fontSize: 12,
    color: "#FFF",
    fontWeight: "bold",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FFFFFF",
    paddingHorizontal: 20,
  },
  emptyText: {
    fontSize: 16,
    color: "#888888",
    textAlign: "center",
    marginTop: 20,
  },
});

export default Discount;


src\Pages\Promotion\DiscountHistory .js
import React, { useState, useLayoutEffect } from "react";
import { View, Text, TouchableOpacity, StyleSheet } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";
import DiscountHistoryUse from "./DiscountHistoryUse";
import DiscountHistoryExpired from "./DiscountHistoryExpired";

const DiscountHistory = ({ navigation }) => {
  const [activeTab, setActiveTab] = useState("expired");
  const Tab = createMaterialTopTabNavigator();

  const CustomTabBar = ({ state, descriptors, navigation }) => {
    return (
      <View style={styles.header__tabs}>
        <TouchableOpacity
          style={[
            styles.header__tab,
            styles.header__tab__1,
            // css === 1 && styles.active,
            state.index === 0 && styles.active,
          ]}
          onPress={() => {
            // setCss(1);
            navigation.navigate("DiscountHistoryExpired");
          }}
        >
          <Text
            style={[
              styles.header__tab__text,
              // css === 1 && styles.activeText,
              state.index === 0 && styles.activeText,
            ]}
          >
            Hết hạn
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[
            styles.header__tab,
            styles.header__tab__3,
            // css === 2 && styles.active,
            state.index === 1 && styles.active,
          ]}
          onPress={() => {
            // setCss(2);
            navigation.navigate("DiscountHistoryUse");
          }}
        >
          <Text
            style={[
              styles.header__tab__text,
              // css === 2 && styles.activeText,
              state.index === 1 && styles.activeText,
            ]}
          >
            Đã dùng
          </Text>
        </TouchableOpacity>
      </View>
    );
  };

  return (
    <View style={styles.discountHistory}>
      <Tab.Navigator
        tabBar={(props) => <CustomTabBar {...props} />}
        initialRouteName="DiscountHistoryExpired"
      >
        <Tab.Screen
          name="DiscountHistoryExpired"
          component={DiscountHistoryExpired}
          options={{ tabBarLabel: "Bảng giá (106)" }}
        />
        <Tab.Screen
          name="DiscountHistoryUse"
          component={DiscountHistoryUse}
          options={{ tabBarLabel: "Ảnh (10)" }}
        />
      </Tab.Navigator>
    </View>
  );
};

const styles = StyleSheet.create({
  discountHistory: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    paddingHorizontal: 20,
    paddingTop: 10,
  },
  discountHistory__header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginTop: 40,
    marginBottom: 20,
  },
  discountHistory__headerBack: {},
  discountHistory__headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#000000",
  },
  discountHistory__headerPlaceholder: {
    width: 24, // Để cân bằng với nút back
  },
  discountHistory__tabs: {
    flexDirection: "row",
    backgroundColor: "#F5F5F5",
    borderRadius: 20,
    marginBottom: 20,
    padding: 5,
  },
  discountHistory__tab: {
    flex: 1,
    paddingVertical: 10,
    alignItems: "center",
    borderRadius: 15,
  },
  discountHistory__tabActive: {
    backgroundColor: "#007BFF",
  },
  discountHistory__tabText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#888888",
  },
  discountHistory__tabTextActive: {
    color: "#FFFFFF",
  },
  discountHistory__item: {
    flexDirection: "row",
    alignItems: "flex-start",
    marginBottom: 20,
    paddingVertical: 10,
  },
  discountHistory__itemIcon: {
    marginRight: 10,
  },
  discountHistory__itemContent: {
    flex: 1,
  },
  discountHistory__itemTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#888888",
    marginBottom: 5,
  },
  discountHistory__itemCode: {
    fontSize: 14,
    color: "#888888",
    marginBottom: 5,
  },
  discountHistory__itemExpiry: {
    fontSize: 12,
    color: "#888888",
  },
  header__tabs: {
    flexDirection: "row",
    justifyContent: "center",
    paddingVertical: 10,
  },
  header__tab: {
    paddingVertical: 5,
    borderWidth: 1,
    borderColor: "#0090FF",
    paddingHorizontal: 50,
  },
  header__tab__1: {
    borderTopLeftRadius: 15,
    borderBottomLeftRadius: 15,
  },

  header__tab__3: {
    borderTopRightRadius: 15,
    borderBottomRightRadius: 15,
  },
  header__tab__text: {
    fontSize: 14,
    color: "#007AFF",
  },
  active: {
    backgroundColor: "#0090FF",
  },
  activeText: {
    color: "white",
  },
});

export default DiscountHistory;

src\Pages\Promotion\DiscountHistoryExpired.js
import React, { useState, useLayoutEffect } from "react";
import { View, Text, TouchableOpacity, StyleSheet } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";

const DiscountHistoryExpired = ({ navigation }) => {
  const [activeTab, setActiveTab] = useState("expired");

  const historyItems = [
    {
      id: "1",
      title: "Giảm 20% cho các đặt phòng trên 1500K",
      code: "Mã: STAY20",
      expiry: "Hạn sử dụng: 15/03/2025",
    },
    {
      id: "2",
      title: "Giảm 20% cho các đặt phòng trên 1500K",
      code: "Mã: STAY20",
      expiry: "Hạn sử dụng: 15/03/2025",
    },
  ];

  return (
    <View style={styles.discountHistory}>
      {/* Danh sách mã giảm giá */}
      {historyItems.map((item) => (
        <View key={item.id} style={styles.discountHistory__item}>
          <Ionicons
            name="gift-outline"
            size={45}
            color="#888888"
            style={styles.discountHistory__itemIcon}
          />
          <View style={styles.discountHistory__itemContent}>
            <Text style={styles.discountHistory__itemTitle}>{item.title}</Text>
            <Text style={styles.discountHistory__itemCode}>{item.code}</Text>
            <Text style={styles.discountHistory__itemExpiry}>
              {item.expiry}
            </Text>
          </View>
        </View>
      ))}
    </View>
  );
};

const styles = StyleSheet.create({
  discountHistory: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    paddingHorizontal: 20,
    paddingTop: 10,
  },
  discountHistory__header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginTop: 40,
    marginBottom: 20,
  },
  discountHistory__headerBack: {},
  discountHistory__headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#000000",
  },
  discountHistory__headerPlaceholder: {
    width: 24, // Để cân bằng với nút back
  },
  discountHistory__tabs: {
    flexDirection: "row",
    backgroundColor: "#F5F5F5",
    borderRadius: 20,
    marginBottom: 20,
    padding: 5,
  },
  discountHistory__tab: {
    flex: 1,
    paddingVertical: 10,
    alignItems: "center",
    borderRadius: 15,
  },
  discountHistory__tabActive: {
    backgroundColor: "#007BFF",
  },
  discountHistory__tabText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#888888",
  },
  discountHistory__tabTextActive: {
    color: "#FFFFFF",
  },
  discountHistory__item: {
    flexDirection: "row",
    alignItems: "flex-start",
    marginBottom: 20,
    paddingVertical: 10,
    borderTopColor: "#d3d3d3",
    borderTopWidth: 1,
  },
  discountHistory__itemIcon: {
    marginRight: 10,
  },
  discountHistory__itemContent: {
    flex: 1,
  },
  discountHistory__itemTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#888888",
    marginBottom: 5,
  },
  discountHistory__itemCode: {
    fontSize: 14,
    color: "#888888",
    marginBottom: 5,
  },
  discountHistory__itemExpiry: {
    fontSize: 12,
    color: "#888888",
  },
});

export default DiscountHistoryExpired;

src\Pages\Promotion\DiscountHistoryUse.js
import React, { useState, useLayoutEffect } from "react";
import { View, Text, TouchableOpacity, StyleSheet } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";

const DiscountHistoryUse = ({ navigation }) => {
  const [activeTab, setActiveTab] = useState("expired");

  const historyItems = [
    {
      id: "1",
      title: "Giảm 20% cho các đặt phòng trên 1500K",
      code: "Mã: STAY20",
      expiry: "Hạn sử dụng: 15/03/2025",
    },
    {
      id: "2",
      title: "Giảm 20% cho các đặt phòng trên 1500K",
      code: "Mã: STAY20",
      expiry: "Hạn sử dụng: 15/03/2025",
    },
  ];

  return (
    <View style={styles.discountHistory}>
      {/* Danh sách mã giảm giá */}
      {historyItems.map((item) => (
        <View key={item.id} style={styles.discountHistory__item}>
          <Ionicons
            name="gift-outline"
            size={45}
            color="#888888"
            style={styles.discountHistory__itemIcon}
          />
          <View style={styles.discountHistory__itemContent}>
            <Text style={styles.discountHistory__itemTitle}>{item.title}</Text>
            <Text style={styles.discountHistory__itemCode}>{item.code}</Text>
            <Text style={styles.discountHistory__itemExpiry}>
              {item.expiry}
            </Text>
          </View>
        </View>
      ))}
    </View>
  );
};

const styles = StyleSheet.create({
  discountHistory: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    paddingHorizontal: 20,
    paddingTop: 10,
  },
  discountHistory__header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginTop: 40,
    marginBottom: 20,
  },
  discountHistory__headerBack: {},
  discountHistory__headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#000000",
  },
  discountHistory__headerPlaceholder: {
    width: 24, // Để cân bằng với nút back
  },
  discountHistory__tabs: {
    flexDirection: "row",
    backgroundColor: "#F5F5F5",
    borderRadius: 20,
    marginBottom: 20,
    padding: 5,
  },
  discountHistory__tab: {
    flex: 1,
    paddingVertical: 10,
    alignItems: "center",
    borderRadius: 15,
  },
  discountHistory__tabActive: {
    backgroundColor: "#007BFF",
  },
  discountHistory__tabText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#888888",
  },
  discountHistory__tabTextActive: {
    color: "#FFFFFF",
  },
  discountHistory__item: {
    flexDirection: "row",
    alignItems: "flex-start",
    marginBottom: 20,
    paddingVertical: 10,
    borderTopColor: "#d3d3d3",
    borderTopWidth: 1,
  },
  discountHistory__itemIcon: {
    marginRight: 10,
  },
  discountHistory__itemContent: {
    flex: 1,
  },
  discountHistory__itemTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#888888",
    marginBottom: 5,
  },
  discountHistory__itemCode: {
    fontSize: 14,
    color: "#888888",
    marginBottom: 5,
  },
  discountHistory__itemExpiry: {
    fontSize: 12,
    color: "#888888",
  },
});

export default DiscountHistoryUse;

src\Pages\Promotion\PromotionScreen.js
import React, { useLayoutEffect, useEffect, useMemo } from "react";
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
} from "react-native";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchMyVouchers,
  fetchEventVouchers,
  saveVoucher,
  clearVoucherStatus,
} from "../../Redux/Slice/voucherSlice"; // Thay bằng đường dẫn thực tế

const Promotion = ({ navigation }) => {
  const dispatch = useDispatch();
  const { accessToken, isLoggedIn } = useSelector((state) => state.auth);
  const { eventVouchers, myVouchers, loading, error, successSave } =
    useSelector((state) => state.voucher);

  // Gọi API khi component mount
  useEffect(() => {
    if (isLoggedIn && accessToken) {
      dispatch(fetchEventVouchers());
      dispatch(fetchMyVouchers());
    }
  }, [dispatch, isLoggedIn, accessToken]);

  // Xử lý thông báo khi lưu voucher
  useEffect(() => {
    if (successSave) {
      alert(successSave); // Có thể thay bằng ToastAndroid hoặc thư viện khác
      dispatch(clearVoucherStatus());
    }
    if (error) {
      alert(error);
      dispatch(clearVoucherStatus());
    }
  }, [successSave, error, dispatch]);

  // Tạo danh sách ID của myVouchers để kiểm tra
  const myVouchersIds = useMemo(() => {
    return [
      ...myVouchers.unused,
      ...myVouchers.used,
      ...myVouchers.expired,
    ].map((voucher) => voucher.id);
  }, [myVouchers]);

  const handleToVoucherDetail = (voucher) => {
    navigation.navigate("VoucherDetail", { voucher });
  };

  const handleSaveVoucher = (voucherId) => {
    dispatch(saveVoucher(voucherId));
  };

  const renderVoucher = ({ item }) => {
    const isSaved = myVouchersIds.includes(String(item.id)); // Kiểm tra coupon đã lưu

    return (
      <TouchableOpacity
        style={styles.voucherItem}
        onPress={() => handleToVoucherDetail(item)}
      >
        <View style={styles.iconContainer}>
          <View
            style={[
              styles.voucherIconContainer,
              { backgroundColor: item.iconBackground || "#FF6347" },
            ]}
          >
            <Text style={styles.voucherIcon}>E</Text>
          </View>
        </View>
        <View style={styles.voucherContent}>
          <View style={styles.voucherContentLeft}>
            <Text style={styles.voucherTitle}>{item.description}</Text>
            <Text style={styles.voucherExpiry}>{item.code}</Text>
            <Text style={styles.voucherExpiry}>{item.expirationDate}</Text>
          </View>
          <View style={styles.voucherContentRight}>
            <TouchableOpacity
              style={[
                styles.actionButton,
                isSaved ? styles.actionButtonSaved : styles.actionButtonNormal,
              ]}
              onPress={() => !isSaved && handleSaveVoucher(item.id)}
              disabled={isSaved}
            >
              <Text style={styles.actionButtonText}>
                {isSaved ? "Đã lưu" : "Lưu"}
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      </TouchableOpacity>
    );
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <Text>Đang tải...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text>Lỗi: {error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Khuyến mãi sự kiện</Text>
      </View>
      <FlatList
        data={eventVouchers}
        renderItem={renderVoucher}
        keyExtractor={(item) => item.id.toString()}
        contentContainerStyle={styles.voucherList}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>
              Không có voucher sự kiện nào hiện tại.
            </Text>
          </View>
        }
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F5F5F5",
  },
  header: {
    padding: 16,
    backgroundColor: "#FFF",
    borderBottomWidth: 1,
    borderBottomColor: "#E5E5E5",
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#333",
  },
  voucherList: {
    paddingHorizontal: 16,
    paddingBottom: 16,
  },
  voucherItem: {
    flexDirection: "row",
    backgroundColor: "#FFF",
    borderRadius: 8,
    marginVertical: 4,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
    overflow: "hidden",
  },
  iconContainer: {
    width: 80,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FFF",
  },
  voucherIconContainer: {
    width: 60,
    height: 60,
    borderRadius: 8,
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 2,
    borderColor: "#FFF",
    borderStyle: "dashed",
  },
  voucherIcon: {
    fontSize: 30,
    color: "#FFF",
    fontWeight: "bold",
  },
  voucherContent: {
    flex: 1,
    paddingVertical: 12,
    paddingRight: 12,
    flexDirection: "row",
  },
  voucherContentLeft: {
    width: "70%",
  },
  voucherContentRight: {
    justifyContent: "center",
    alignItems: "center",
  },
  voucherTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginTop: 4,
  },
  voucherExpiry: {
    fontSize: 12,
    color: "#666",
    marginTop: 2,
  },
  actionButton: {
    borderRadius: 4,
    paddingHorizontal: 12,
    paddingVertical: 6,
  },
  actionButtonNormal: {
    backgroundColor: "#EE4D2D",
  },
  actionButtonSaved: {
    backgroundColor: "#CCCCCC",
  },
  actionButtonText: {
    fontSize: 12,
    color: "#FFF",
    fontWeight: "bold",
  },
  emptyContainer: {
    padding: 20,
    alignItems: "center",
  },
  emptyText: {
    fontSize: 14,
    color: "#666",
    textAlign: "center",
  },
});

export default Promotion;

src\Pages\Reviews\RateApp.js
import React, { useLayoutEffect, useState, useEffect } from "react";
import {
  View,
  Text,
  Image,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Modal,
  ActivityIndicator,
} from "react-native"; // Thêm Modal và ActivityIndicator
import { Ionicons } from "@expo/vector-icons";
import * as ImagePicker from "expo-image-picker";
import {
  sendReview,
  resetSendReviewState,
  updateLoadingSendReview,
} from "../../Redux/Slice/hotelSlice";
import { useAppDispatch, useAppSelector } from "../../Redux/hook";

const RateApp = ({ navigation, route }) => {
  const hotel = route?.params?.item || [];
  console.log("item >>>>>>>>>>>>>>", route.params);

  // State cho đánh giá và nhận xét
  const [ratings, setRatings] = useState({
    hotel: 0,
    room: 0,
    location: 0,
    service: 0,
  });
  const [comment, setComment] = useState("");
  const [images, setImages] = useState([]);
  const dispatch = useAppDispatch();

  // Lấy trạng thái từ Redux
  const { loadingSendReview, sendReviewSuccess, sendReviewError } =
    useAppSelector((state) => state.hotel);

  // Xử lý chọn sao
  const handleRating = (criterion, value) => {
    setRatings((prev) => ({
      ...prev,
      [criterion]: value,
    }));
  };

  // Hàm render sao
  const renderStars = (criterion) => {
    const rating = ratings[criterion];
    const fullStars = Math.floor(rating);
    const emptyStars = 5 - fullStars;
    const stars = [];

    for (let i = 0; i < fullStars; i++) {
      stars.push(
        <TouchableOpacity
          style={styles.start}
          key={`full-${i}`}
          onPress={() => handleRating(criterion, i + 1)}
        >
          <Ionicons name="star" size={22} color="#FFD700" />
        </TouchableOpacity>
      );
    }

    for (let i = 0; i < emptyStars; i++) {
      stars.push(
        <TouchableOpacity
          style={styles.start}
          key={`empty-${i}`}
          onPress={() => handleRating(criterion, fullStars + i + 1)}
        >
          <Ionicons name="star-outline" size={22} color="#CCCCCC" />
        </TouchableOpacity>
      );
    }

    return stars;
  };

  const pickImage = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== "granted") {
      alert("Cần cấp quyền truy cập thư viện ảnh để chọn ảnh!");
      return;
    }

    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled) {
      const newImage = {
        uri: result.assets[0].uri,
        type: result.assets[0].type || "image/jpeg",
        name: `sample-image-${images.length + 1}.jpg`,
      };

      if (images.length < 4) {
        setImages((prevImages) => [...prevImages, newImage]);
      } else {
        alert("Bạn chỉ có thể chọn tối đa 4 ảnh!");
      }
    }
  };

  const removeImage = (index) => {
    setImages((prevImages) => prevImages.filter((_, i) => i !== index));
  };

  const handleTo = () => {
    navigation.goBack();
  };

  const handleSubmit = () => {
    const reviewData = {
      hotelId: "1",
      bookingId: hotel.bookingId,
      hotelPoint: ratings.hotel.toString(),
      roomPoint: ratings.room.toString(),
      locationPoint: ratings.location.toString(),
      servicePoint: ratings.service.toString(),
      comment: comment,
      image: images,
    };
    console.log("Dữ liệu gửi 0000000000000", reviewData);
    dispatch(updateLoadingSendReview());
    dispatch(sendReview(reviewData));
  };

  // Reset dữ liệu người dùng sau khi gửi thành công
  const resetUserInput = () => {
    setRatings({
      hotel: 0,
      room: 0,
      location: 0,
      service: 0,
    });
    setComment("");
    setImages([]);
  };

  // Theo dõi trạng thái gửi review để hiển thị thông báo và điều hướng
  useEffect(() => {
    if (sendReviewSuccess) {
      alert("Gửi đánh giá thành công!");
      resetUserInput(); // Reset dữ liệu người dùng
      dispatch(resetSendReviewState());
      navigation.navigate("BookingScreen");
    }
    if (sendReviewError) {
      alert(`Lỗi: ${sendReviewError}`);
      dispatch(resetSendReviewState());
      // Điều hướng về BookingScreen nếu có lỗi
      navigation.navigate("BookingScreen");
    }
  }, [sendReviewSuccess, sendReviewError, dispatch, navigation]);

  return (
    <>
      <ScrollView
        style={styles.rateDetail}
        contentContainerStyle={styles.scrollContent}
      >
        {/* Header */}
        <View style={styles.rateDetail__header}>
          <TouchableOpacity onPress={handleTo}>
            <Ionicons
              style={styles.iconBed}
              name="chevron-back-outline"
              size={25}
              color="black"
            />
          </TouchableOpacity>
          <Text style={styles.rateDetail__headerTitle}>Chi tiết đánh giá</Text>
        </View>

        {/* Tiêu đề "Bình luận của: {username}" */}
        <View style={styles.rateDetail__criterionTitle}>
          <Text style={styles.rateDetail__headerTitleUser}>
            Bình luận của bạn
          </Text>
        </View>

        {/* Tiêu chí đánh giá */}
        <View style={styles.rateDetail__criteria}>
          <View style={styles.rateDetail__criterion}>
            <View style={styles.rateDetail__criterionTitle}>
              <Text style={styles.rateDetail__criterionLabel}>
                Đánh giá khách sạn
              </Text>
            </View>
            <View style={styles.rateDetail__stars}>{renderStars("hotel")}</View>
          </View>
          <View style={styles.rateDetail__criterion}>
            <View style={styles.rateDetail__criterionTitle}>
              <Text style={styles.rateDetail__criterionLabel}>
                Đánh giá phòng
              </Text>
            </View>
            <View style={styles.rateDetail__stars}>{renderStars("room")}</View>
          </View>
          <View style={styles.rateDetail__criterion}>
            <View style={styles.rateDetail__criterionTitle}>
              <Text style={styles.rateDetail__criterionLabel}>
                Đánh giá địa điểm
              </Text>
            </View>
            <View style={styles.rateDetail__stars}>
              {renderStars("location")}
            </View>
          </View>
          <View style={styles.rateDetail__criterion}>
            <View style={styles.rateDetail__criterionTitle}>
              <Text style={styles.rateDetail__criterionLabel}>
                Đánh giá dịch vụ
              </Text>
            </View>
            <View style={styles.rateDetail__stars}>
              {renderStars("service")}
            </View>
          </View>
        </View>

        {/* Nhận xét */}
        <Text style={styles.rateDetail__commentLabel}>Nhận xét</Text>
        <TextInput
          style={styles.rateDetail__commentInput}
          value={comment}
          onChangeText={setComment}
          placeholder="Nhập nhận xét của bạn..."
          multiline
        />

        {/* Hiển thị ảnh đã chọn */}
        <Text style={styles.rateDetail__photosLabel}>Ảnh</Text>
        <View
          style={[
            styles.rateDetail__photos,
            images.length > 0 && { justifyContent: "flex-start" },
          ]}
        >
          {images.length > 0 ? (
            images.map((image, index) => (
              <View key={index} style={styles.imageContainer}>
                <Image
                  source={{ uri: image.uri }}
                  style={styles.rateDetail__photo}
                />
                <TouchableOpacity
                  style={styles.removeButton}
                  onPress={() => removeImage(index)}
                >
                  <Ionicons name="close" size={16} color="white" />
                </TouchableOpacity>
              </View>
            ))
          ) : (
            <View style={styles.notPicture}>
              <Text style={styles.notPictureText}>
                Chưa có ảnh nào được chọn
              </Text>
            </View>
          )}
        </View>

        {/* Nút chọn ảnh (dấu cộng) */}
        {images.length < 4 ? (
          <TouchableOpacity style={styles.addImageButton} onPress={pickImage}>
            <Ionicons name="add" size={24} color="white" />
          </TouchableOpacity>
        ) : (
          ""
        )}
      </ScrollView>

      {/* Nút xác nhận */}
      <View style={styles.footerContainer}>
        <TouchableOpacity
          style={styles.button}
          onPress={handleSubmit}
          disabled={loadingSendReview}
        >
          <Text style={styles.buttonText}>
            {loadingSendReview ? "Đang gửi..." : "Xác nhận"}
          </Text>
        </TouchableOpacity>
      </View>

      {/* Modal loading toàn màn hình */}
      <Modal
        visible={loadingSendReview}
        transparent={true}
        animationType="fade"
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <ActivityIndicator size="large" color="#00F598" />
            <Text style={styles.modalText}>Đang gửi đánh giá...</Text>
          </View>
        </View>
      </Modal>
    </>
  );
};

const styles = StyleSheet.create({
  rateDetail: {
    flex: 1,
    backgroundColor: "#F5F5F5",
    paddingHorizontal: 15,
  },
  scrollContent: {
    paddingBottom: 20,
    // Thêm padding dưới để nội dung không bị che bởi nút "Xác nhận"
  },
  rateDetail__header: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 40,
    marginBottom: 20,
  },
  rateDetail__headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#000000",
  },
  rateDetail__headerTitleUser: {
    fontSize: 18,
    fontWeight: "bold",
    textAlign: "center",
  },
  rateDetail__criteria: {
    marginBottom: 20,
  },
  rateDetail__criterion: {
    flexDirection: "column",
    justifyContent: "space",
    alignItems: "center",
    marginBottom: 5,
    borderBottomColor: "#E5E5E5",
    borderBottomWidth: 1,
  },
  rateDetail__criterionTitle: {
    alignSelf: "flex-start",
    marginBottom: 5,
  },
  rateDetail__criterionLabel: {
    fontSize: 16,
    color: "#000000",
  },
  rateDetail__stars: {
    flexDirection: "row",
    marginTop: 5,
    marginBottom: 8,
  },
  start: {
    marginRight: 5,
  },
  rateDetail__commentLabel: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
    marginBottom: 10,
  },
  rateDetail__commentInput: {
    backgroundColor: "#E8ECEF",
    borderRadius: 10,
    paddingHorizontal: 15,
    paddingVertical: 10,
    fontSize: 14,
    color: "#000000",
    marginBottom: 10,
    minHeight: 40,
  },
  addImageButton: {
    backgroundColor: "#00F598",
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: "center",
    alignItems: "center",
    alignSelf: "flex-start",
    marginBottom: 20,
  },
  rateDetail__photosLabel: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
    marginBottom: 10,
  },
  rateDetail__photos: {
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center",
  },
  imageContainer: {
    position: "relative", // Để định vị nút xóa
    marginRight: 10,
    marginBottom: 10,
  },
  rateDetail__photo: {
    width: 80,
    height: 80,
    borderRadius: 5,
  },
  removeButton: {
    position: "absolute",
    top: -5,
    right: -5,
    backgroundColor: "red",
    borderRadius: 12,
    width: 24,
    height: 24,
    justifyContent: "center",
    alignItems: "center",
  },
  button: {
    width: "90%",
    backgroundColor: "#00F598",
    borderRadius: 10,
    paddingVertical: 12,
    marginTop: 20,
    marginBottom: 20,
    marginHorizontal: "auto",
  },
  buttonText: {
    textAlign: "center",
    color: "white",
    fontSize: 16,
  },
  notPicture: {
    textAlign: "center",
    padding: 20,
  },
  notPictureText: {
    textAlign: "center",
  },
  footerContainer: {
    alignItems: "center",
    paddingBottom: 20,
  },
  loadingContainer: {
    marginTop: 10,
  },
  loadingText: {
    fontSize: 14,
    color: "#666",
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.5)", // Màu xám đen, mờ
    justifyContent: "center",
    alignItems: "center",
  },
  modalContent: {
    backgroundColor: "white",
    padding: 20,
    borderRadius: 10,
    alignItems: "center",
  },
  modalText: {
    marginTop: 10,
    fontSize: 16,
    color: "#333",
  },
});

export default RateApp;

src\Pages\Reviews\RateDetails.js
import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  Image,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useAppSelector } from "../../Redux/hook";

const RateApp = ({ navigation, route }) => {
  const username = route?.params?.name || "";
  console.log(route.params);
  const { reviewDetailsData, loadingReviewDetails } = useAppSelector(
    (state) => state.hotel
  );
  console.log("reviewDetailsData", reviewDetailsData);

  // State cho đánh giá và nhận xét
  const [ratings, setRatings] = useState({});

  useEffect(() => {
    // Kiểm tra nếu reviewDetailsData tồn tại và không rỗng
    if (reviewDetailsData) {
      const initRatings = {
        hotel: reviewDetailsData?.hotelPoint || 0,
        room: reviewDetailsData?.roomPoint || 0,
        location: reviewDetailsData?.locationPoint || 0,
        service: reviewDetailsData?.servicePoint || 0,
      };
      setRatings(initRatings);
    }
  }, [reviewDetailsData]);

  console.log("ratings", ratings);

  // Hàm render sao (sửa lỗi: dùng TouchableOpacity thay vì View để có thể nhấn)
  const renderStars = (criterion) => {
    const rating = ratings[criterion];
    const fullStars = Math.floor(rating);
    const emptyStars = 5 - fullStars;
    const stars = [];

    // Thêm sao đầy
    for (let i = 0; i < fullStars; i++) {
      stars.push(
        <TouchableOpacity style={styles.start} key={`full-${i}`}>
          <Ionicons name="star" size={22} color="#FFD700" />
        </TouchableOpacity>
      );
    }

    // Thêm sao rỗng
    for (let i = 0; i < emptyStars; i++) {
      stars.push(
        <TouchableOpacity style={styles.start} key={`empty-${i}`}>
          <Ionicons name="star-outline" size={22} color="#CCCCCC" />
        </TouchableOpacity>
      );
    }

    return stars;
  };

  const handleTo = () => {
    navigation.goBack();
  };

  if (loadingReviewDetails) {
    return (
      <View>
        <Text>Loading...</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.rateDetail}>
      {/* Header */}
      <View style={styles.rateDetail__header}>
        <TouchableOpacity onPress={handleTo}>
          <Ionicons
            style={styles.iconBed}
            name="chevron-back-outline"
            size={25}
            color="black"
          />
        </TouchableOpacity>
        <Text style={styles.rateDetail__headerTitle}>Chi tiết đánh giá</Text>
      </View>
      <View style={styles.rateDetail__criterionTitle}>
        <Text style={styles.rateDetail__headerTitleUser}>
          Bình luận của: {username}
        </Text>
      </View>
      {/* Tiêu chí đánh giá */}
      <View style={styles.rateDetail__criteria}>
        <View style={styles.rateDetail__criterion}>
          <View style={styles.rateDetail__criterionTitle}>
            <Text style={styles.rateDetail__criterionLabel}>
              Đánh giá khách sạn
            </Text>
          </View>
          <View style={styles.rateDetail__stars}>{renderStars("hotel")}</View>
        </View>
        <View style={styles.rateDetail__criterion}>
          <View style={styles.rateDetail__criterionTitle}>
            <Text style={styles.rateDetail__criterionLabel}>
              Đánh giá phòng
            </Text>
          </View>

          <View style={styles.rateDetail__stars}>{renderStars("room")}</View>
        </View>
        <View style={styles.rateDetail__criterion}>
          <View style={styles.rateDetail__criterionTitle}>
            <Text style={styles.rateDetail__criterionLabel}>
              Đánh giá địa điểm
            </Text>
          </View>
          <View style={styles.rateDetail__stars}>
            {renderStars("location")}
          </View>
        </View>
        <View style={styles.rateDetail__criterion}>
          <View style={styles.rateDetail__criterionTitle}>
            <Text style={styles.rateDetail__criterionLabel}>
              Đánh giá dịch vụ
            </Text>
          </View>
          <View style={styles.rateDetail__stars}>{renderStars("service")}</View>
        </View>
      </View>
      {/* Nhận xét */}
      <Text style={styles.rateDetail__commentLabel}>Nhận xét</Text>
      <Text style={styles.rateDetail__commentInput}>
        {reviewDetailsData?.comment || "Chưa có nhận xét"}
      </Text>
      {/* Hình ảnh */}
      <Text style={styles.rateDetail__photosLabel}>Ảnh</Text>
      <View style={styles.rateDetail__photos}>
        {reviewDetailsData?.image?.length > 0 ? (
          reviewDetailsData.image.map((item, index) => (
            <Image
              key={index}
              source={{
                uri: item, // Sử dụng URL từ dữ liệu API
              }}
              style={styles.rateDetail__photo}
            />
          ))
        ) : (
          <Text>Chưa có ảnh</Text>
        )}
      </View>
      {/* <TouchableOpacity style={styles.button}>
        <Text style={styles.buttonText}>Xác nhận</Text>
      </TouchableOpacity> */}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  rateDetail: {
    flex: 1,
    backgroundColor: "#F5F5F5",
    paddingHorizontal: 15,
  },
  rateDetail__header: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 40,
    marginBottom: 20,
  },
  rateDetail__headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#000000",
  },
  rateDetail__criteria: {
    marginBottom: 20,
  },
  rateDetail__criterion: {
    flexDirection: "column",
    justifyContent: "space",
    alignItems: "center",
    marginBottom: 5,
    borderBottomColor: "#E5E5E5",
    borderBottomWidth: 1,
  },
  rateDetail__criterionTitle: {
    alignSelf: "flex-start",
    marginBottom: 5,
  },
  rateDetail__criterionLabel: {
    fontSize: 16,
    color: "#000000",
  },
  rateDetail__stars: {
    flexDirection: "row",
    marginTop: 5,
    marginBottom: 8,
  },
  rateDetail__commentLabel: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
    marginBottom: 10,
  },
  rateDetail__commentInput: {
    backgroundColor: "#E8ECEF",
    borderRadius: 10,
    padding: 10,
    fontSize: 14,
    color: "#000000",
    marginBottom: 20,
    minHeight: 40,
    paddingHorizontal: 15,
    paddingVertical: 10,
  },
  rateDetail__photosLabel: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
    marginBottom: 10,
  },
  rateDetail__photos: {
    flexDirection: "row",
    flexWrap: "wrap",
  },
  rateDetail__photo: {
    width: 80,
    height: 80,
    borderRadius: 5,
    marginRight: 10,
    marginBottom: 10,
  },
  button: {
    width: "100%",
    backgroundColor: "#00F598",
    borderRadius: 10,
    paddingVertical: 12,
    marginTop: 20,
    marginBottom: 20,
  },
  buttonText: {
    textAlign: "center",
    color: "white",
    fontSize: 16,
  },
  start: {},
  rateDetail__headerTitleUser: {
    fontSize: 18,
    fontWeight: "bold",
    textAlign: "center",
  },
});

export default RateApp;

src\Pages\Reviews\RateReviews.js
import React from "react";
import {
  View,
  Text,
  Image,
  TextInput,
  TouchableOpacity,
  StyleSheet,
} from "react-native";
import { Ionicons } from "@expo/vector-icons"; // Để hiển thị icon ngôi sao (rating)
const RateReviews = ({ navigation }) => {
  const handleToRateDetails = () => {
    // navigation.navigate("RateDetails");
    navigation.navigate("SuccessPayment");
    console.log(">>>");
  };
  const ratingsData = [
    {
      id: "1",
      name: "Duy",
      time: "20 mins ago",
      content: "Khách sạn đẹp, đồ ăn tuyệt vời",
      score: 4.5,
      image:
        "https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?ixlib=rb-4.0.3&auto=format&fit=crop&w=40&h=40&q=80",
    },
    {
      id: "2",
      name: "Hương",
      time: "2 days ago",
      content: "Không thể quên được. Rất thích nơi này!",
      score: 5,
      image:
        "https://images.unsplash.com/photo-1596436889106-be35e843f974?q=80&w=2940&auto=format&fit=crop",
    },
    {
      id: "3",
      name: "Quân",
      time: "2 days ago",
      content: "Đẹp, thích vui",
      score: 4.5,
      image: "",
    },
  ];

  return (
    <View style={styles.ratings}>
      {/* <View style={styles.ratings__header}>
        <TouchableOpacity onPress={() => handleTo()}>
          <Ionicons
            style={styles.iconBed}
            name="chevron-back-outline"
            size={25}
            color="black"
          />
        </TouchableOpacity>
        <Text style={styles.ratings__headerTitle}>Đánh giá</Text>
      </View>

      <View style={styles.ratings__search}>
        <Ionicons
          style={styles.iconBed}
          name="search"
          size={15}
          color="#0D94F6"
          backgroundColor="white"
          marginLeft="10"
        />
        <TextInput
          style={styles.ratings__search__Input}
          placeholder="Tìm đánh giá"
          placeholderTextColor="#666666"
        />
        <Ionicons
          style={styles.iconBed}
          name="close"
          size={15}
          color="black"
          backgroundColor="white"
          marginRight="10"
        />
      </View> */}

      {/* Nút viết đánh giá */}
      <TouchableOpacity style={styles.ratings__writeButton}>
        <Text style={[styles.ratings__writeButtonText, { color: "black" }]}>
          Tóm tắt đánh giá{" "}
        </Text>
        <Text style={styles.ratings__writeButtonText}> + VIẾT ĐÁNH GIÁ</Text>
      </TouchableOpacity>

      {/* Thống kê đánh giá */}
      <View style={styles.ratings__stats}>
        <View style={styles.ratings__statsBars}>
          <View style={styles.ratings__statsBar}>
            <View style={[styles.ratings__statsBarFill, { width: "30%" }]} />
          </View>
          <View style={styles.ratings__statsBar}>
            <View style={[styles.ratings__statsBarFill, { width: "40%" }]} />
          </View>
          <View style={styles.ratings__statsBar}>
            <View style={[styles.ratings__statsBarFill, { width: "20%" }]} />
          </View>
          <View style={styles.ratings__statsBar}>
            <View style={[styles.ratings__statsBarFill, { width: "7%" }]} />
          </View>
          <View style={styles.ratings__statsBar}>
            <View style={[styles.ratings__statsBarFill, { width: "1%" }]} />
          </View>
        </View>
      </View>
      <View style={styles.ratings__option}>
        <View style={styles.ratings__optionList}>
          <View style={styles.ratings__optionItem}>
            <Text style={styles.ratings__label}>Phòng </Text>
            <Text style={styles.ratings__text}>4.5</Text>
          </View>
          <View style={styles.ratings__optionItem}>
            <Text style={styles.ratings__label}>Địa điểm </Text>
            <Text style={styles.ratings__text}>4.8</Text>
          </View>
          <View style={styles.ratings__optionItem}>
            <Text style={styles.ratings__label}>Dịch vụ</Text>
            <Text style={styles.ratings__text}>4.4</Text>
          </View>
        </View>
      </View>

      <View style={styles.ratings__statsScore}>
        <Text style={styles.ratings__statsScoreValue}>4.4</Text>
        <View style={styles.ratings__statsScoreLabel}>
          <Text>Rất tốt</Text>
          <View style={styles.start}>
            <Ionicons
              style={styles.iconBed}
              name="star"
              size={15}
              color="orange"
            />
            <Ionicons
              style={styles.iconBed}
              name="star"
              size={15}
              color="orange"
            />
            <Ionicons
              style={styles.iconBed}
              name="star"
              size={15}
              color="orange"
            />
            <Ionicons
              style={styles.iconBed}
              name="star"
              size={15}
              color="orange"
            />
            <Ionicons
              style={styles.iconBed}
              name="star-half"
              size={15}
              color="orange"
            />
          </View>
        </View>
      </View>
      {/* Danh sách đánh giá */}
      {ratingsData.map((item) => (
        <TouchableOpacity key={item.id} style={styles.ratings__item}>
          <Image
            source={{
              uri: "https://media.istockphoto.com/id/2148367059/fr/photo/la-ligne-dhorizon-c%C3%B4ti%C3%A8re-de-dakar-s%C3%A9n%C3%A9gal-afrique-de-louest.webp?a=1&b=1&s=612x612&w=0&k=20&c=gAwIfTVBEupXPG_K5DoK1k4kpJ_m7SkDF_UlkLrIcGk=",
            }}
            style={styles.ratings__itemAvatar}
          />
          <View style={styles.ratings__itemContent}>
            <View style={styles.ratings__itemHeader}>
              <Text style={styles.ratings__itemName}>{item.name}</Text>
              <Text style={styles.ratings__itemScore}>{item.score}</Text>
            </View>
            <Text style={styles.ratings__itemTime}>{item.time}</Text>
            <Text style={styles.ratings__itemText}>{item.content}</Text>
          </View>
        </TouchableOpacity>
      ))}
    </View>
  );
};
export default RateReviews;
const styles = StyleSheet.create({
  ratings: {
    flex: 1,
    // backgroundColor: "#F5F5F5",
    backgroundColor: "white",
    paddingHorizontal: 20,
  },
  ratings__header: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 40,
    marginBottom: 10,
  },
  ratings__headerBack: {
    fontSize: 24,
    color: "#00C4B4",
    marginRight: 10,
  },
  ratings__headerTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#000000",
    marginLeft: 10,
  },
  ratings__search: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "white",
    borderRadius: 15,
    borderWidth: 1,
    borderColor: "gray",
    marginBottom: 15,
  },
  ratings__search__Input: {
    flex: 1,
    backgroundColor: "white",
    borderRadius: 10,
    padding: 10,
    fontSize: 14,
    color: "#000000",
    //     marginBottom: 10,
    justifyContent: "center",
    alignItems: "center",
  },
  ratings__writeButton: {
    marginBottom: 20,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  ratings__writeButtonText: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#0090FF",
  },
  ratings__stats: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 20,
  },
  ratings__statsScore: {
    marginRight: 20,
    alignItems: "center",
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    marginBottom: 20,
  },
  ratings__statsScoreValue: {
    fontSize: 30,
    fontWeight: "bold",
    color: "#000000",
    marginLeft: 10,
  },
  ratings__statsScoreLabel: {
    fontSize: 16,
    color: "#000000",
    marginLeft: 20,
  },
  start: {
    flexDirection: "row",
  },
  ratings__statsBars: {
    flex: 1,
  },
  ratings__statsBar: {
    backgroundColor: "#E0E0E0",
    height: 10,
    borderRadius: 5,
    marginBottom: 5,
  },
  ratings__statsBarFill: {
    backgroundColor: "#FFC107",
    height: 10,
    borderRadius: 5,
  },
  ratings__option: {
    marginBottom: 20,
  },
  ratings__optionList: {
    flexDirection: "row",
    //     justifyContent: "space-around",
    alignItems: "center",
  },
  ratings__optionItem: {
    width: "33%",
    textAlign: "center",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    borderRightColor: "gray",
    borderRightWidth: 1,
  },
  ratings__text: {
    textAlign: "center",
  },
  ratings__statsLabels: {
    marginLeft: 10,
  },
  ratings__statsLabel: {
    fontSize: 14,
    color: "#000000",
    marginBottom: 5,
  },
  ratings__item: {
    flexDirection: "row",
    marginBottom: 15,
  },
  ratings__itemAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 10,
  },
  ratings__itemContent: {
    flex: 1,
  },
  ratings__itemHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  ratings__itemName: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
  },
  ratings__itemScore: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000000",
  },
  ratings__itemTime: {
    fontSize: 12,
    color: "#666666",
    marginBottom: 5,
  },
  ratings__itemText: {
    fontSize: 14,
    color: "#000000",
  },
});


src\Redux\Slice\authSlice.js
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { API_BASE_URL } from "../../Constant/Constant";

const initValue = {
  accessToken: null,
  isLoggedIn: false,
  loading: false,
  error: null,
  loadingInfoUser: false,
  userInfor: {
    userId: "0",
    firstName: "Lâm",
    lastName: "Tiến Dưỡng",
    email: "lamtiendung11082002@gmail.com",
    phoneNumber: "0982474802",
    country: "+84",
  },
  infoUser: null,
  inforUserChange: null,
  registerLoading: false,
  registerError: null,
  registerSuccess: false,
  prePage: null,
};

export const fetchUserInfo = createAsyncThunk(
  "auth/fetchUserInfo",
  async (_, { getState, rejectWithValue }) => {
    try {
      const { accessToken } = getState().auth;
      if (!accessToken) {
        return rejectWithValue("Không có token để gọi API");
      }

      const response = await fetch(`${API_BASE_URL}/api/user/info`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
      });

      const data = await response.json();
      console.log("fetchUserInfo", data.data);

      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lấy thông tin người dùng"
        );
      }

      return data.data;
    } catch (error) {
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

export const updateUserInfoJson = createAsyncThunk(
  "auth/updateUserInfoJson",
  async (userInfo, { getState, rejectWithValue }) => {
    try {
      if (!userInfo) {
        return rejectWithValue("Thông tin người dùng không được cung cấp");
      }

      const { accessToken } = getState().auth;
      if (!accessToken) {
        return rejectWithValue("Không có token để gọi API");
      }

      const response = await fetch(`${API_BASE_URL}/api/user/update`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify(userInfo),
      });

      const data = await response.json();

      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi cập nhật thông tin người dùng"
        );
      }

      return data.data;
    } catch (error) {
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

//updateupdate
export const updateUserInfo = createAsyncThunk(
  "auth/updateUserInfo",
  async (userInfo, { getState, rejectWithValue }) => {
    try {
      const { accessToken } = getState().auth;
      if (!accessToken) {
        throw new Error("Không có token để gọi API");
      }

      const formData = new FormData();
      formData.append("firstName", userInfo.firstName);
      formData.append("lastName", userInfo.lastName);
      formData.append("email", userInfo.email);
      formData.append("phone", userInfo.phone);

      // Nếu bạn muốn upload hình ảnh từ bộ nhớ (image là URI hoặc file object)
      if (userInfo.image) {
        formData.append("image", {
          uri: userInfo.image.uri, // ví dụ: "file:///data/user/0/..."
          name: userInfo.image.name || "avatar.jpg",
          type: userInfo.image.type || "image/jpeg",
        });
      }

      const response = await fetch(`${API_BASE_URL}/api/user/update`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          // Không cần "Content-Type": multipart/form-data
          // Fetch sẽ tự thêm boundary khi dùng FormData
        },
        body: formData,
      });

      const data = await response.json();
      return data.data;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

export const registerUser = createAsyncThunk(
  "auth/registerUser",
  async (userData, { rejectWithValue }) => {
    try {
      if (!userData) {
        return rejectWithValue("Dữ liệu đăng ký không được cung cấp");
      }

      const response = await fetch(`${API_BASE_URL}/api/auth/register`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(userData),
      });

      const data = await response.json();

      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi đăng ký");
      }

      return data;
    } catch (error) {
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

const authSlice = createSlice({
  name: "auth",
  initialState: initValue,
  reducers: {
    loginStart(state) {
      state.loading = true;
      state.error = null;
    },
    loginSuccess(state, action) {
      state.accessToken = action.payload.accessToken;
      state.userId = action.payload.userId;
      state.isLoggedIn = true;
      state.loading = false;
      AsyncStorage.setItem("accessToken", action.payload.accessToken);
    },
    loginFailure(state, action) {
      state.loading = false;
      state.error = action.payload;
    },
    logout(state) {
      state.accessToken = null;
      state.infoUser = null;
      state.inforUserChange = null;
      state.isLoggedIn = false;
      AsyncStorage.removeItem("accessToken");
    },
    updateInforUserChange(state, action) {
      state.inforUserChange = action.payload;
    },
    clearInforUserChange(state) {
      state.inforUserChange = null;
    },
    resetRegisterState(state) {
      state.registerLoading = false;
      state.registerError = null;
      state.registerSuccess = false;
    },
    setPrePage(state, action) {
      state.prePage = action.payload;
    },
    clearPrePage(state) {
      state.prePage = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchUserInfo.pending, (state) => {
        state.loadingInfoUser = true;
        state.error = null;
      })
      .addCase(fetchUserInfo.fulfilled, (state, action) => {
        console.log(">>> fetchUserInfo fulfilled >>>", action.payload);
        state.loadingInfoUser = false;
        state.infoUser = action.payload;
      })
      .addCase(fetchUserInfo.rejected, (state, action) => {
        state.loadingInfoUser = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(registerUser.pending, (state) => {
        state.registerLoading = true;
        state.registerError = null;
        state.registerSuccess = false;
      })
      .addCase(registerUser.fulfilled, (state) => {
        state.registerLoading = false;
        state.registerSuccess = true;
      })
      .addCase(registerUser.rejected, (state, action) => {
        state.registerLoading = false;
        state.registerError = action.payload || action.error.message;
        state.registerSuccess = false;
      })
      .addCase(updateUserInfoJson.fulfilled, (state, action) => {
        state.infoUser = action.payload;
      })
      .addCase(updateUserInfoJson.rejected, (state, action) => {
        state.error = action.payload || action.error.message;
      });
  },
});

export const {
  loginStart,
  loginSuccess,
  loginFailure,
  logout,
  updateInforUserChange,
  clearInforUserChange,
  resetRegisterState,
  setPrePage,
  clearPrePage,
} = authSlice.actions;

export default authSlice.reducer;

src\Redux\Slice\bookingSlice.js
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { API_BASE_URL } from "../../Constant/Constant";

export const getBookingDetails = createAsyncThunk(
  "booking/getBookingDetails",
  async (id, { getState, rejectWithValue }) => {
    try {
      if (!id) {
        return rejectWithValue("ID đặt phòng không được cung cấp");
      }

      const state = getState();
      const accessToken = state.auth.accessToken;
      if (!accessToken) {
        return rejectWithValue("Không có token để gọi API");
      }

      console.log("id", id);
      console.log("accessToken", accessToken);
      const response = await fetch(
        `${API_BASE_URL}/api/booking/history_detail/${id}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );

      const data = await response.json();
      console.log("data ", data);
      console.log("getBookingDetail", data.data);

      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lấy chi tiết đặt phòng"
        );
      }

      return data.data;
    } catch (error) {
      console.log("error in getBookingDetails error", error);
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

export const fetchConfirmBookingCancelled = createAsyncThunk(
  "booking/fetchConfirmBookingCancelled",
  async (value, { getState, rejectWithValue }) => {
    try {
      if (!value) {
        return rejectWithValue("Dữ liệu hủy đặt phòng không được cung cấp");
      }

      const state = getState();
      const accessToken = state.auth.accessToken;
      if (!accessToken) {
        return rejectWithValue("Không có token để gọi API");
      }

      console.log("value fetchConfirmBookingCancelled ", value);
      console.log("accessToken", accessToken);
      const response = await fetch(`${API_BASE_URL}/api/booking/cancel`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify(value),
      });

      const data = await response.json();
      console.log("---------------------------------- ", data);

      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi hủy đặt phòng");
      }

      return data.data;
    } catch (error) {
      console.log("error in fetchConfirmBookingCancelled error", error);
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

const initValue = {
  error: null,
  loadingBookingDetail: false,
  bookingDetailData: [],
  loadingCancel: false,
  myVoucherData: [],
};

const bookingSlice = createSlice({
  name: "booking",
  initialState: initValue,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(getBookingDetails.pending, (state) => {
        state.loadingBookingDetail = true;
        state.error = null;
      })
      .addCase(getBookingDetails.fulfilled, (state, action) => {
        console.log(">>> 78 AS >>>", action.payload);
        state.loadingBookingDetail = false;
        state.bookingDetailData = action.payload;
      })
      .addCase(getBookingDetails.rejected, (state, action) => {
        state.loadingBookingDetail = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchConfirmBookingCancelled.pending, (state) => {
        state.loadingCancel = true;
        state.error = null;
      })
      .addCase(fetchConfirmBookingCancelled.fulfilled, (state, action) => {
        state.loadingCancel = false;
      })
      .addCase(fetchConfirmBookingCancelled.rejected, (state, action) => {
        state.loadingCancel = false;
        state.error = action.payload || action.error.message;
      });
  },
});

export default bookingSlice.reducer;

src\Redux\Slice\hotelSlice.js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { API_BASE_URL } from "../../Constant/Constant";

const formatToYYYYMMDD = (date) => {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
};

const today = new Date();
const tomorrow = new Date(today);
tomorrow.setDate(today.getDate() + 1);

const checkinDate = formatToYYYYMMDD(today);
const checkoutDate = formatToYYYYMMDD(tomorrow);

export const fetchHotelList = createAsyncThunk(
  "hotel/fetchHotelList",
  async (_, { getState, rejectWithValue }) => {
    try {
      const state = getState();
      const accessToken = state?.auth?.accessToken;
      const headers = accessToken
        ? {
            "Content-Type": "application/json",
            Authorization: `Bearer ${accessToken}`,
          }
        : { "Content-Type": "application/json" };

      const response = await fetch(`${API_BASE_URL}/api/hotel/home`, {
        method: "GET",
        headers,
      });

      const data = await response.json();
      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lấy danh sách khách sạn"
        );
      }

      return data.data;
    } catch (error) {
      return rejectWithValue(
        error.message || "Lỗi không xác định khi lấy danh sách khách sạn"
      );
    }
  }
);

export const fetchHotelById = createAsyncThunk(
  "hotel/fetchHotelById",
  async (hotelId, { rejectWithValue }) => {
    try {
      if (!hotelId) {
        return rejectWithValue("Thiếu ID khách sạn");
      }

      const response = await fetch(
        `${API_BASE_URL}/api/hotel/hotel_detail/${hotelId}`,
        {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        }
      );

      const data = await response.json();
      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lấy chi tiết khách sạn"
        );
      }

      return data.data;
    } catch (error) {
      return rejectWithValue(
        error.message || "Lỗi không xác định khi lấy chi tiết khách sạn"
      );
    }
  }
);

export const fetchLocationList = createAsyncThunk(
  "hotel/fetchLocationList",
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/location/get_list`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });

      const data = await response.json();
      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lấy danh sách địa điểm"
        );
      }

      return data.data;
    } catch (error) {
      return rejectWithValue(
        error.message || "Lỗi không xác định khi lấy danh sách địa điểm"
      );
    }
  }
);

export const fetchAmenityList = createAsyncThunk(
  "hotel/fetchAmenityList",
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/amenity/get_list`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });

      const data = await response.json();
      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lấy danh sách tiện nghi"
        );
      }

      return data.data || [];
    } catch (error) {
      return rejectWithValue(
        error.message || "Lỗi không xác định khi lấy danh sách tiện nghi"
      );
    }
  }
);

export const fetchHotelByLocation = createAsyncThunk(
  "hotel/fetchHotelByLocation",
  async (value, { getState, rejectWithValue }) => {
    try {
      if (!value) {
        return rejectWithValue("Thiếu dữ liệu lọc khách sạn");
      }

      const state = getState();
      const accessToken = state.auth?.accessToken;
      const sortId = state.hotel.inforFilter?.sortById;
      const sortItem = state.hotel.sortList?.find((item) => item.id === sortId);
      const sortBy = sortItem?.key || "price";
      const sortValue = sortItem?.value || "asc";

      const headers = accessToken
        ? {
            "Content-Type": "application/json",
            Authorization: `Bearer ${accessToken}`,
          }
        : { "Content-Type": "application/json" };

      const response = await fetch(
        `${API_BASE_URL}/api/hotel/filter?sortBy=${sortBy}&sort=${sortValue}`,
        {
          method: "POST",
          headers,
          body: JSON.stringify(value),
        }
      );

      const data = await response.json();
      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lọc khách sạn theo địa điểm"
        );
      }

      return data.data?.content || [];
    } catch (error) {
      return rejectWithValue(
        error.message || "Lỗi không xác định khi lọc khách sạn theo địa điểm"
      );
    }
  }
);

export const fetchHotelRoomList = createAsyncThunk(
  "hotel/fetchHotelRoomList",
  async (value, { rejectWithValue }) => {
    try {
      if (!value) {
        return rejectWithValue("Thiếu dữ liệu yêu cầu phòng");
      }

      const response = await fetch(`${API_BASE_URL}/api/room/select_room`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(value),
      });

      const data = await response.json();
      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi lấy danh sách phòng");
      }

      return data.data || [];
    } catch (error) {
      return rejectWithValue(
        error.message || "Lỗi không xác định khi lấy danh sách phòng"
      );
    }
  }
);

export const fetchBookingRoom = createAsyncThunk(
  "hotel/fetchBookingRoom",
  async (_, { getState, rejectWithValue }) => {
    try {
      const { bookingPayload } = getState().hotel;
      const { accessToken } = getState().auth;

      console.log("BBBBBBBBBBBBBBBBBBBBBBBBB", bookingPayload);
      if (!accessToken) {
        return rejectWithValue("Thiếu token để đặt phòng");
      }

      if (!bookingPayload || !bookingPayload.roomRequestList) {
        return rejectWithValue("Thiếu dữ liệu đặt phòng");
      }

      const response = await fetch(`${API_BASE_URL}/api/booking/get_booking`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify(bookingPayload),
      });

      const data = await response.json();
      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi đặt phòng");
      }

      const updatedData = data.data.roomBookedList.map((room, index) => {
        const originalRoom = bookingPayload.roomRequestList[index];
        return {
          ...room,
          uniqueId: originalRoom?.uniqueId || "",
        };
      });

      return {
        ...data.data,
        roomBookedList: updatedData,
      };
    } catch (error) {
      return rejectWithValue(
        error.message || "Lỗi không xác định khi đặt phòng"
      );
    }
  }
);

export const fetchServiceList = createAsyncThunk(
  "hotel/fetchServiceList",
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/service/get_list`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });

      const data = await response.json();
      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi lấy danh sách dịch vụ");
      }

      return data.data || [];
    } catch (error) {
      return rejectWithValue(
        error.message || "Lỗi không xác định khi lấy danh sách dịch vụ"
      );
    }
  }
);

export const fetchBookingStatus = createAsyncThunk(
  "hotel/fetchBookingStatus",
  async (_, { getState, rejectWithValue }) => {
    try {
      const state = getState();
      const accessToken = state.auth?.accessToken;

      if (!accessToken) {
        return rejectWithValue("Thiếu token để lấy trạng thái đặt phòng");
      }

      const response = await fetch(
        `${API_BASE_URL}/api/booking/history_booking`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );

      const data = await response.json();
      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lấy trạng thái đặt phòng"
        );
      }

      return data.data;
    } catch (error) {
      return rejectWithValue(
        error.message || "Lỗi không xác định khi lấy trạng thái đặt phòng"
      );
    }
  }
);

export const getReviewDetails = createAsyncThunk(
  "hotel/getReviewDetails",
  async (reviewId, { getState, rejectWithValue }) => {
    try {
      if (!reviewId) {
        return rejectWithValue("Thiếu ID đánh giá");
      }

      const response = await fetch(
        `${API_BASE_URL}/api/hotel/review/${reviewId}`,
        {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        }
      );

      const data = await response.json();
      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lấy chi tiết đánh giá thất bại"
        );
      }

      return data.data;
    } catch (error) {
      return rejectWithValue(
        error.message || "Lỗi không xác định khi lấy chi tiết đánh giá"
      );
    }
  }
);

export const sendReview = createAsyncThunk(
  "hotel/sendReview",
  async (reviewData, { getState, rejectWithValue }) => {
    try {
      if (!reviewData) {
        return rejectWithValue("Thiếu dữ liệu đánh giá");
      }

      const requiredFields = [
        "hotelId",
        "bookingId",
        "hotelPoint",
        "roomPoint",
        "locationPoint",
        "servicePoint",
        "comment",
      ];
      const missingFields = requiredFields.filter(
        (field) => reviewData[field] === undefined || reviewData[field] === null
      );
      if (missingFields.length > 0) {
        return rejectWithValue(
          `Thiếu các trường bắt buộc: ${missingFields.join(", ")}`
        );
      }

      const state = getState();
      const accessToken = state.auth?.accessToken;
      if (!accessToken) {
        return rejectWithValue("Thiếu token để gửi đánh giá");
      }

      const formData = new FormData();
      formData.append("hotelId", reviewData.hotelId.toString());
      formData.append("bookingId", reviewData.bookingId.toString());
      formData.append("hotelPoint", reviewData.hotelPoint.toString());
      formData.append("roomPoint", reviewData.roomPoint.toString());
      formData.append("locationPoint", reviewData.locationPoint.toString());
      formData.append("servicePoint", reviewData.servicePoint.toString());
      formData.append("comment", reviewData.comment);

      if (reviewData.image && Array.isArray(reviewData.image)) {
        reviewData.image.forEach((file, index) => {
          if (file?.uri) {
            const fileType =
              file.type === "image" ? "image/jpeg" : file.type || "image/jpeg";
            formData.append("image", {
              uri: file.uri,
              type: fileType,
              name: file.name || `image_${index + 1}.jpg`,
            });
          }
        });
      }

      const response = await fetch(`${API_BASE_URL}/api/hotel/send_review`, {
        method: "POST",
        headers: { Authorization: `Bearer ${accessToken}` },
        body: formData,
      });

      const data = await response.json();
      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Gửi đánh giá thất bại");
      }

      return data;
    } catch (error) {
      return rejectWithValue(
        error.message || "Lỗi không xác định khi gửi đánh giá"
      );
    }
  }
);

const hotelSlice = createSlice({
  name: "hotel",
  initialState: {
    sortList: [
      { id: 1, name: "Giá tăng dần", key: "price", value: "asc" },
      { id: 2, name: "Giá giảm dần", key: "price", value: "desc" },
      { id: 3, name: "Đánh giá tăng dần", key: "review", value: "asc" },
      { id: 4, name: "Đánh giá giảm dần", key: "review", value: "desc" },
    ],
    amenityList: [],
    filterList: [],
    hotelList: [],
    locationList: [],
    hotelDetail: null,
    hotelDetailId: "",
    hotelByLocation: [],
    hotelRoomList: [],
    hotelHistorySearch: [],
    bookingData: [],
    bookingPayload: [],
    listUniqueIdBookingRoom: [],
    listBookingRoom: [],
    loading: false,
    loadingListHotel: false,
    loadingHotelRoomList: false,
    loadingBookingRoom: false,
    loadingBookingStatus: false,
    map: false,
    roomNumbeFaker: [],
    error: null,
    inforFilter: {
      locationId: "0",
      checkin: checkinDate,
      checkout: checkoutDate,
      adults: 1,
      children: 0,
      roomNumber: 1,
      amenityIds: [],
      serviceIds: [],
      sortById: 1,
    },
    bookingStatus: {
      BOOKED: [],
      CHECKIN: [],
      CHECKOUT: [],
      CANCELED: [],
    },
    loadingNotification: false,
    notificationList: [],
    tempFilter: {
      amenityIds: [],
      serviceIds: [],
      sortById: 1,
    },
    loadingReviewDetails: false,
    reviewDetailsData: [],
    reviewDetailsError: null,
    loadingSendReview: false,
    sendReviewError: null,
    sendReviewSuccess: false,
    navigateFoodCart: null,
  },
  reducers: {
    setNavigateFoodCart(state, action) {
      state.navigateFoodCart = action.payload;
    },
    cleanNavigateFoodCart(state) {
      state.navigateFoodCart = null;
    },
    updateTempFilter(state, action) {
      state.tempFilter = { ...state.tempFilter, ...(action.payload || {}) };
    },
    applyFilter(state) {
      state.inforFilter = {
        ...state.inforFilter,
        amenityIds: state.tempFilter?.amenityIds || [],
        serviceIds: state.tempFilter?.serviceIds || [],
        sortById: state.tempFilter?.sortById || 1,
      };
    },
    resetTempFilter(state) {
      state.tempFilter = {
        amenityIds: state.inforFilter?.amenityIds || [],
        serviceIds: state.inforFilter?.serviceIds || [],
        sortById: state.inforFilter?.sortById || 1,
      };
    },
    clearHotelDetail(state) {
      state.hotelDetail = null;
    },
    skeletonLoading(state) {
      state.loading = true;
    },
    updateFilter(state, action) {
      state.inforFilter = { ...state.inforFilter, ...(action.payload || {}) };
    },
    mapOpenClose(state, action) {
      state.map = action.payload ?? false;
    },
    updateHotelDetailId(state, action) {
      state.hotelDetailId = action.payload || "";
    },
    uppdateListUniqueIdBookingRoom(state, action) {
      state.listUniqueIdBookingRoom = action.payload || [];
    },
    updateRoomNumber(state, action) {
      state.roomNumbeFaker = action.payload || [];
    },
    updateBookingPayload(state, action) {
      state.bookingPayload = action.payload || [];
    },
    resetSendReviewState: (state) => {
      state.loadingSendReview = false;
      state.sendReviewError = null;
      state.sendReviewSuccess = false;
    },
    updateLoadingSendReview: (state) => {
      state.loadingSendReview = true;
      state.sendReviewError = null;
    },
    addServiceToRoom(state, action) {
      try {
        const serviceData = action.payload || [];
        if (!state.bookingPayload || !state.bookingPayload.roomRequestList) {
          return;
        }

        const updatedRoomRequestList = state.bookingPayload.roomRequestList.map(
          (item) => {
            const matchingRoom = serviceData.find(
              (data) => data?.uniqueId === item?.uniqueId
            );
            if (matchingRoom) {
              const updatedServiceIdList =
                matchingRoom.serviceIds?.length > 0
                  ? matchingRoom.serviceIds.map((service) => ({
                      id: service?.id || "",
                      quantity: service?.quantity || 0,
                      time: service?.time || "",
                      note: service?.note || "",
                    }))
                  : [];

              return {
                ...item,
                serviceList: updatedServiceIdList,
              };
            }

            return {
              ...item,
              serviceList: [],
            };
          }
        );

        state.bookingPayload = {
          ...state.bookingPayload,
          roomRequestList: updatedRoomRequestList,
        };
      } catch (error) {
        console.error("Lỗi trong addServiceToRoom:", error);
      }
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchHotelList.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchHotelList.fulfilled, (state, action) => {
        state.loading = false;
        state.hotelList = action.payload?.[0]?.hotelRequestList || [];
        state.hotelHistorySearch = action.payload?.[0]?.historySearchList || [];
      })
      .addCase(fetchHotelList.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchHotelById.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchHotelById.fulfilled, (state, action) => {
        state.loading = false;
        state.hotelDetail = action.payload || null;
      })
      .addCase(fetchHotelById.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchLocationList.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchLocationList.fulfilled, (state, action) => {
        state.loading = false;
        state.locationList = action.payload || [];
      })
      .addCase(fetchLocationList.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchHotelByLocation.pending, (state) => {
        state.loadingListHotel = true;
        state.error = null;
      })
      .addCase(fetchHotelByLocation.fulfilled, (state, action) => {
        state.loadingListHotel = false;
        state.hotelByLocation = action.payload || [];
      })
      .addCase(fetchHotelByLocation.rejected, (state, action) => {
        state.loadingListHotel = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchAmenityList.pending, (state) => {
        state.error = null;
      })
      .addCase(fetchAmenityList.fulfilled, (state, action) => {
        state.amenityList = action.payload || [];
      })
      .addCase(fetchAmenityList.rejected, (state, action) => {
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchHotelRoomList.pending, (state) => {
        state.loadingHotelRoomList = true;
        state.error = null;
      })
      .addCase(fetchHotelRoomList.fulfilled, (state, action) => {
        state.loadingHotelRoomList = false;
        state.hotelRoomList = action.payload || [];
      })
      .addCase(fetchHotelRoomList.rejected, (state, action) => {
        state.loadingHotelRoomList = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchBookingRoom.pending, (state) => {
        state.loadingBookingRoom = true;
        state.error = null;
      })
      .addCase(fetchBookingRoom.fulfilled, (state, action) => {
        state.loadingBookingRoom = false;
        state.bookingData = action.payload || [];
      })
      .addCase(fetchBookingRoom.rejected, (state, action) => {
        state.loadingBookingRoom = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchServiceList.pending, (state) => {
        state.error = null;
      })
      .addCase(fetchServiceList.fulfilled, (state, action) => {
        state.filterList = action.payload || [];
      })
      .addCase(fetchServiceList.rejected, (state, action) => {
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchBookingStatus.pending, (state) => {
        state.loadingBookingStatus = true;
        state.error = null;
      })
      .addCase(fetchBookingStatus.fulfilled, (state, action) => {
        state.loadingBookingStatus = false;
        state.bookingStatus.BOOKED =
          action.payload?.[0]?.hotelBookingList || [];
        state.bookingStatus.CHECKIN =
          action.payload?.[1]?.hotelBookingList || [];
        state.bookingStatus.CHECKOUT =
          action.payload?.[2]?.hotelBookingList || [];
        state.bookingStatus.CANCELED =
          action.payload?.[3]?.hotelBookingList || [];
      })
      .addCase(fetchBookingStatus.rejected, (state, action) => {
        state.loadingBookingStatus = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(getReviewDetails.pending, (state) => {
        state.loadingReviewDetails = true;
        state.reviewDetailsError = null;
      })
      .addCase(getReviewDetails.fulfilled, (state, action) => {
        state.loadingReviewDetails = false;
        state.reviewDetailsData = action.payload || [];
      })
      .addCase(getReviewDetails.rejected, (state, action) => {
        state.loadingReviewDetails = false;
        state.reviewDetailsError = action.payload;
      })
      .addCase(sendReview.pending, (state) => {
        state.loadingSendReview = true;
        state.sendReviewError = null;
        state.sendReviewSuccess = false;
      })
      .addCase(sendReview.fulfilled, (state) => {
        state.loadingSendReview = false;
        state.sendReviewSuccess = true;
      })
      .addCase(sendReview.rejected, (state, action) => {
        state.loadingSendReview = false;
        state.sendReviewError = action.payload;
        state.sendReviewSuccess = false;
      });
  },
});

export const {
  clearHotelDetail,
  skeletonLoading,
  updateFilter,
  mapOpenClose,
  updateHotelDetailId,
  updateRoomNumber,
  uppdateListUniqueIdBookingRoom,
  addServiceToRoom,
  updateBookingPayload,
  updateTempFilter,
  applyFilter,
  resetTempFilter,
  resetSendReviewState,
  updateLoadingSendReview,
  setNavigateFoodCart,
  cleanNavigateFoodCart,
} = hotelSlice.actions;
export default hotelSlice.reducer;

src\Redux\Slice\notificationSlice.js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { API_BASE_URL } from "../../Constant/Constant";

export const fetchListNotification = createAsyncThunk(
  "notification/fetchListNotification",
  async (_, { getState, rejectWithValue }) => {
    try {
      const state = getState();
      const accessToken = state.auth.accessToken;
      if (!accessToken) {
        return rejectWithValue("Không có token để gọi API");
      }

      const response = await fetch(`${API_BASE_URL}/api/notifications/user`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
      });

      const data = await response.json();
      console.log("fetchListNotification response:", data);

      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lấy danh sách thông báo"
        );
      }

      return data.data;
    } catch (error) {
      console.error("error in fetchListNotification:", error.message);
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

const notificationSlice = createSlice({
  name: "notification",
  initialState: {
    loadingNotification: false,
    error: null,
    listNotification: [],
  },
  reducers: {
    addNotification: (state, action) => {
      state.listNotification.unshift(action.payload);
    },
    markNotificationAsRead(state, action) {
      const notificationId = action.payload;
      const notification = state.listNotification.find(
        (noti) => noti.id === notificationId
      );
      if (notification) {
        notification.is_read = true;
      }
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchListNotification.pending, (state) => {
        state.loadingNotification = true;
        state.error = null;
      })
      .addCase(fetchListNotification.fulfilled, (state, action) => {
        state.loadingNotification = false;
        state.listNotification = action.payload;
      })
      .addCase(fetchListNotification.rejected, (state, action) => {
        state.loadingNotification = false;
        state.error = action.payload || action.error.message;
      });
  },
});

export const { addNotification, markNotificationAsRead } =
  notificationSlice.actions;
export default notificationSlice.reducer;

src\Redux\Slice\paymentSlice.js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { API_BASE_URL } from "../../Constant/Constant";

export const fetchPaymentOrder = createAsyncThunk(
  "payment/fetchPaymentOrder",
  async (_, { getState, rejectWithValue }) => {
    try {
      const state = getState();
      const accessToken = state.auth.accessToken;
      const bookingPayload = state.hotel.bookingPayload;

      if (!accessToken) {
        return rejectWithValue("Không có token để gọi API");
      }
      if (!bookingPayload) {
        return rejectWithValue("Dữ liệu đặt phòng không được cung cấp");
      }

      console.log("fetchPaymentOrder bookingPayload:", bookingPayload);
      console.log("fetchPaymentOrder accessToken:", accessToken);
      const response = await fetch(`${API_BASE_URL}/api/payment/checkout`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify(bookingPayload),
      });

      const data = await response.json();
      console.log("fetchPaymentOrder response:", data.data);

      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi tạo thanh toán");
      }

      return data.data;
    } catch (error) {
      console.error("error from fetchPaymentOrder:", error.message);
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

const paymentSlice = createSlice({
  name: "payment",
  initialState: {
    loadingPayment: false,
    error: null,
    paymentData: {
      zpTransToken: "",
      appTransId: "",
      orderUrl: "",
      returnCode: 0,
      returnMessage: "",
    },
    callPayment: false,
  },
  reducers: {
    resetPaymentData(state) {
      state.paymentData = {
        zpTransToken: "",
        appTransId: "",
        orderUrl: "",
        returnCode: 0,
        returnMessage: "",
      };
      state.error = null;
      state.loadingPayment = false;
    },
    updateCallPayment(state, action) {
      state.callPayment = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchPaymentOrder.pending, (state) => {
        state.loadingPayment = true;
        state.error = null;
      })
      .addCase(fetchPaymentOrder.fulfilled, (state, action) => {
        state.loadingPayment = false;
        state.paymentData = action.payload;
      })
      .addCase(fetchPaymentOrder.rejected, (state, action) => {
        state.loadingPayment = false;
        state.error = action.payload || action.error.message;
      });
  },
});

export const { resetPaymentData, updateCallPayment } = paymentSlice.actions;
export default paymentSlice.reducer;




src\Redux\Slice\promotionSlice.js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { API_BASE_URL } from "../../Constant/Constant";

export const fetchListPromotion = createAsyncThunk(
  "promotion/fetchListPromotion",
  async ({ code, totalPrice }, { getState, rejectWithValue }) => {
    try {
      if (totalPrice === undefined) {
        return rejectWithValue("Tổng giá không được cung cấp");
      }

      const state = getState();
      const accessToken = state.auth.accessToken;
      if (!accessToken) {
        return rejectWithValue("Không có token để gọi API");
      }

      const response = await fetch(
        `${API_BASE_URL}/api/coupon/get_by_user?&totalPrice=${totalPrice}&currentCouponId=${code}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );

      const data = await response.json();
      console.log("fetchListPromotion response:", data.data);

      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lấy danh sách mã giảm giá"
        );
      }

      return data.data;
    } catch (error) {
      console.error("error in fetchListPromotion:", error.message);
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

const promotionSlice = createSlice({
  name: "promotion",
  initialState: {
    loadingPromotion: false,
    error: null,
    listPromotion: [],
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchListPromotion.pending, (state) => {
        state.loadingPromotion = true;
        state.error = null;
      })
      .addCase(fetchListPromotion.fulfilled, (state, action) => {
        state.loadingPromotion = false;
        state.listPromotion = action.payload;
      })
      .addCase(fetchListPromotion.rejected, (state, action) => {
        state.loadingPromotion = false;
        state.error = action.payload || action.error.message;
      });
  },
});

export default promotionSlice.reducer;


src\Redux\Slice\serviceSlice.js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { API_BASE_URL } from "../../Constant/Constant";

export const fetchListService = createAsyncThunk(
  "service/fetchListService",
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/service/get_list`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });

      const data = await response.json();

      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi lấy danh sách dịch vụ");
      }

      return data.data;
    } catch (error) {
      console.log("error in fetchListService:", error);
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

export const fetchServicesByCategory = createAsyncThunk(
  "service/fetchServicesByCategory",
  async (roomQuantities, { rejectWithValue }) => {
    try {
      if (!roomQuantities) {
        return rejectWithValue("Dữ liệu phòng không được cung cấp");
      }

      const response = await fetch(
        `${API_BASE_URL}/api/service/get_by_category`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(roomQuantities),
        }
      );

      const data = await response.json();

      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lấy dịch vụ theo danh mục"
        );
      }

      return data.data;
    } catch (error) {
      console.log("error in fetchServicesByCategory:", error);
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

export const fetchCart = createAsyncThunk(
  "service/fetchCart",
  async ({ cartItems, roomMapping }, { rejectWithValue }) => {
    try {
      if (!cartItems || !roomMapping) {
        return rejectWithValue(
          "Dữ liệu giỏ hàng hoặc ánh xạ phòng không được cung cấp"
        );
      }

      const response = await fetch(`${API_BASE_URL}/api/service/get_cart`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(cartItems),
      });

      const data = await response.json();

      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi lấy giỏ hàng");
      }

      return { ...data.data, roomMapping };
    } catch (error) {
      console.log("error in fetchCart:", error);
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

const serviceSlice = createSlice({
  name: "service",
  initialState: {
    loadingService: false,
    error: null,
    serviceList: {},
    categories: [],
    cart: {
      serviceBookingList: [],
      priceServiceList: [],
      totalPrice: 0,
    },
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchListService.pending, (state) => {
        state.loadingService = true;
        state.error = null;
      })
      .addCase(fetchListService.fulfilled, (state, action) => {
        state.loadingService = false;

        const groupedServices = action.payload.reduce((acc, service) => {
          const { serviceType } = service;
          if (!acc[serviceType]) {
            acc[serviceType] = [];
          }
          acc[serviceType].push(service);
          return acc;
        }, {});
        state.serviceList = groupedServices;

        state.categories = Object.keys(groupedServices).map((key, index) => ({
          id: index + 1,
          name: key,
        }));
      })
      .addCase(fetchListService.rejected, (state, action) => {
        state.loadingService = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchServicesByCategory.pending, (state) => {
        state.loadingService = true;
        state.error = null;
      })
      .addCase(fetchServicesByCategory.fulfilled, (state, action) => {
        state.loadingService = false;

        const groupedServices = action.payload.reduce((acc, item) => {
          acc[item.serviceType] = item.serviceRoomList.map((service) => ({
            id: service.id,
            name: service.name,
            description: service.description,
            image: service.image,
            price: parseFloat(service.price.replace(/,/g, "")),
            serviceType: item.serviceType,
            roomChoseServiceList: service.roomChoseServiceList,
          }));
          return acc;
        }, {});
        state.serviceList = groupedServices;

        state.categories = action.payload
          .filter((item) => item.serviceRoomList.length > 0)
          .map((item, index) => ({
            id: index + 1,
            name: item.serviceType,
          }));
      })
      .addCase(fetchServicesByCategory.rejected, (state, action) => {
        state.loadingService = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchCart.pending, (state) => {
        state.loadingService = true;
        state.error = null;
      })
      .addCase(fetchCart.fulfilled, (state, action) => {
        state.loadingService = false;
        const {
          serviceBookingList,
          priceServiceList,
          totalPrice,
          roomMapping,
        } = action.payload;

        state.cart = {
          serviceBookingList: serviceBookingList.map((item) => {
            const tempMapping = Object.keys(roomMapping || {}).reduce(
              (acc, key) => {
                acc[key] = [...(roomMapping[key] || [])];
                return acc;
              },
              {}
            );

            return {
              serviceId: item.serviceId,
              serviceName: item.serviceName,
              bookingRoomResponseList: item.bookingRoomResponseList.map(
                (room) => {
                  const uniqueId = tempMapping[room.roomId]?.[0];
                  if (uniqueId) {
                    tempMapping[room.roomId].shift();
                  } else {
                    console.warn(
                      `No uniqueId available for roomId ${room.roomId}`
                    );
                  }

                  return {
                    uniqueId,
                    roomId: room.roomId,
                    roomName: room.roomName,
                    quantity: room.quantity,
                    time: room.time || "",
                    note: room.note || "",
                  };
                }
              ),
            };
          }),
          priceServiceList: priceServiceList.map((item) => ({
            serviceName: item.serviceName,
            price: parseFloat(item.price.replace(/,/g, "")),
            totalPrice: parseFloat(item.totalPrice.replace(/,/g, "")),
            totalQuantity: item.totalQuantity,
          })),
          totalPrice: parseFloat(totalPrice.replace(/,/g, "")),
        };
      })
      .addCase(fetchCart.rejected, (state, action) => {
        state.loadingService = false;
        state.error = action.payload || action.error.message;
      });
  },
});

export default serviceSlice.reducer;


src\Redux\Slice\voucherSlice.js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { API_BASE_URL } from "../../Constant/Constant";

export const fetchSystemVouchers = createAsyncThunk(
  "voucher/fetchSystemVouchers",
  async (_, { getState, rejectWithValue }) => {
    try {
      const { accessToken, userName } = getState().auth;
      if (!accessToken) {
        return rejectWithValue("Không có token để gọi API");
      }

      console.log("username fetchSystemVouchers", userName);
      const res = await fetch(`${API_BASE_URL}/api/coupon/member`, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });

      const data = await res.json();

      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi lấy voucher hệ thống");
      }

      console.log("data fetchSystemVouchers", data);
      return {
        couponList: data.data.couponList.map((item) => ({
          id: String(item.id),
          code: item.code,
          description: item.description,
          expirationDate: item.expirationDate,
          iconBackground: "#00A4E8",
        })),
        user: {
          name: userName || "Guest",
          Orders: data.data.currentTotalBooking || 0,
          Spend: parseFloat(data.data.currentTotalSpent) || 0,
        },
      };
    } catch (error) {
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

export const fetchMyVouchers = createAsyncThunk(
  "voucher/fetchMyVouchers",
  async (_, { getState, rejectWithValue }) => {
    try {
      const accessToken = getState().auth.accessToken;
      if (!accessToken) {
        return rejectWithValue("Không có token để gọi API");
      }

      const res = await fetch(`${API_BASE_URL}/api/coupon/my_coupon`, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });

      const data = await res.json();

      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi lấy voucher của bạn");
      }

      const statusMap = {
        CAN_USE: "unused",
        USED: "used",
        EXPIRY_DATE: "expired",
      };

      const colorMap = {
        unused: "#00A4E8",
        used: "#EE4D2D",
        expired: "#EE4D2D",
      };

      const formattedVouchers = {
        unused: [],
        used: [],
        expired: [],
      };

      data.data.forEach((statusGroup) => {
        const localStatus = statusMap[statusGroup.couponStatus];
        const bgColor = colorMap[localStatus];

        statusGroup.couponList.forEach((item) => {
          formattedVouchers[localStatus].push({
            id: String(item.id),
            title: item.code,
            condition: item.description || "",
            expiry: `HSD: ${item.expirationDate}`,
            status: localStatus,
            iconBackground: bgColor,
          });
        });
      });

      return formattedVouchers;
    } catch (error) {
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

export const saveVoucher = createAsyncThunk(
  "voucher/saveVoucher",
  async (voucherId, { getState, rejectWithValue, dispatch }) => {
    try {
      if (!voucherId) {
        return rejectWithValue("ID voucher không được cung cấp");
      }

      const accessToken = getState().auth.accessToken;
      if (!accessToken) {
        return rejectWithValue("Không có token để gọi API");
      }

      const res = await fetch(
        `${API_BASE_URL}/api/coupon/user_save/${voucherId}`,
        {
          method: "GET",
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );

      const data = await res.json();

      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi lưu voucher");
      }

      dispatch(fetchMyVouchers());
      return data.message || "Lưu voucher thành công";
    } catch (error) {
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

export const fetchRanks = createAsyncThunk(
  "voucher/fetchRanks",
  async (_, { rejectWithValue }) => {
    try {
      const res = await fetch(`${API_BASE_URL}/api/coupon/rank`);
      const data = await res.json();

      if (data.statusCode !== 200) {
        return rejectWithValue(
          data.message || "Lỗi khi lấy danh sách xếp hạng"
        );
      }

      const ranks = data.data.map((rank) => ({
        name: rank.name,
        description: rank.description,
        minOrders: rank.minTotalBooking,
        minSpending: parseFloat(rank.minTotalSpent),
        color:
          {
            Đồng: "#d3a652",
            Bạc: "#677486",
            Vàng: "#f3b238d6",
            "Bạch Kim": "#6fd1d6",
            "Kim Cương": "#67e5cb",
          }[rank.name] || "#ccc",
      }));

      return ranks;
    } catch (error) {
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

export const fetchEventVouchers = createAsyncThunk(
  "voucher/fetchEventVouchers",
  async (_, { getState, rejectWithValue }) => {
    try {
      const accessToken = getState().auth.accessToken;
      if (!accessToken) {
        return rejectWithValue("Không có token để gọi API");
      }

      const res = await fetch(`${API_BASE_URL}/api/coupon/event`, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });

      const data = await res.json();

      if (data.statusCode !== 200) {
        return rejectWithValue(data.message || "Lỗi khi lấy voucher sự kiện");
      }

      return data.data.map((item) => ({
        id: String(item.id),
        code: item.code,
        description: item.description,
        expirationDate: item.expirationDate,
        iconBackground: "#FF6347",
      }));
    } catch (error) {
      return rejectWithValue(error.message || "Lỗi không xác định");
    }
  }
);

const initialState = {
  error: null,
  loading: false,
  systemVouchers: [],
  myVouchers: {
    unused: [],
    used: [],
    expired: [],
  },
  eventVouchers: [],
  ranks: [],
  user: { name: "Guest", Orders: 0, Spend: 0 },
  successSave: null,
};

const voucherSlice = createSlice({
  name: "voucher",
  initialState,
  reducers: {
    clearVoucherStatus: (state) => {
      state.successSave = null;
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchSystemVouchers.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchSystemVouchers.fulfilled, (state, action) => {
        state.loading = false;
        state.systemVouchers = action.payload.couponList;
        state.user = action.payload.user;
      })
      .addCase(fetchSystemVouchers.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchMyVouchers.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchMyVouchers.fulfilled, (state, action) => {
        state.loading = false;
        state.myVouchers = action.payload;
      })
      .addCase(fetchMyVouchers.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(saveVoucher.pending, (state) => {
        state.loading = true;
        state.successSave = null;
        state.error = null;
      })
      .addCase(saveVoucher.fulfilled, (state, action) => {
        state.loading = false;
        state.successSave = action.payload;
      })
      .addCase(saveVoucher.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchRanks.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchRanks.fulfilled, (state, action) => {
        state.loading = false;
        state.ranks = action.payload;
      })
      .addCase(fetchRanks.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || action.error.message;
      })
      .addCase(fetchEventVouchers.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchEventVouchers.fulfilled, (state, action) => {
        state.loading = false;
        state.eventVouchers = action.payload;
      })
      .addCase(fetchEventVouchers.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || action.error.message;
      });
  },
});

export const { clearVoucherStatus } = voucherSlice.actions;
export default voucherSlice.reducer;


src\Redux\apiQuan.js
import AsyncStorage from "@react-native-async-storage/async-storage";
import { API_BASE_URL } from "../Constant/Constant";

// Hàm authenticateWithFirebase (đã dùng fetch từ trước, giữ nguyên)
export const authenticateWithFirebase = async (idToken) => {
  return fetch(`${API_BASE_URL}/api/auth/firebase`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ tokenId: idToken }),
  });
};

// Hàm registerDevice chuyển từ axios sang fetch
export const registerDevice = async (deviceToken, deviceType) => {
  const jwtToken = await AsyncStorage.getItem("jwtToken");

  return fetch(`${API_BASE_URL}/api/devices/register`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${jwtToken}`,
    },
    body: JSON.stringify({ deviceToken, deviceType }),
  });
};

// Hàm fetchNotifications chuyển từ axios sang fetch
export const fetchNotifications = async (page = 0, size = 20) => {
  const state = getState();
  const accessToken = state.auth.accessToken;
  console.log("jwtToken", accessToken);
  // Tạo URL với query params (page và size)
  const url = new URL(`${API_BASE_URL}/api/notifications/user`);
  url.searchParams.append("page", page);
  url.searchParams.append("size", size);

  return fetch(url.toString(), {
    method: "GET",
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
  });
};

src\Redux\hook.js
import { useDispatch, useSelector } from "react-redux";

export const useAppDispatch = () => useDispatch();
export const useAppSelector = useSelector;

src\Redux\store.js
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./Slice/authSlice";
import textReducer from "./Slice/text";
import hotelReducer from "./Slice/hotelSlice";
import serviceReducer from "./Slice/serviceSlice";
import promotionReducer from "./Slice/promotionSlice";
import paymentReducer from "./Slice/paymentSlice";
import notificationReducer from "./Slice/notificationSlice";
import bookingReducer from "./Slice/bookingSlice";
import voucherReducer from "./Slice/voucherSlice";

export const store = configureStore({
  reducer: {
    auth: authReducer,
    text: textReducer,
    hotel: hotelReducer,
    service: serviceReducer,
    promotion: promotionReducer,
    payment: paymentReducer,
    notification: notificationReducer,
    booking: bookingReducer,
    voucher: voucherReducer,
  },
});

src\Routes\AccountStack.js
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import EditProfile from "../Pages/Profile/EditProfile";
import Points from "../Pages/Profile/Points";
import PointsHistory from "../Pages/Profile/PointsHistory";
import Profile from "../Pages/Profile/Profile";
import RewardMember from "../Pages/Profile/RewardMember";
import ChangePasswordScreen from "../Pages/Setting/ChangePasswordScreen";
import SettingsScreen from "../Pages/Setting/SettingsScreen";
import PersonalVoucher from "../Pages/Profile/PersonalVoucher";
import VoucherDetail from "../Pages/Profile/VoucherDetail";
import LoginScreen from "../Pages/Auth/LoginScreen";
import PhoneLogin from "../Pages/Auth/PhoneLogin";
import RegisterScreen from "../Pages/Auth/RegisterScreen";
import GoogleLogin from "../Pages/Auth/GoogleLogin";

const Stack = createNativeStackNavigator();

const AccountStackNavigator = () => {
  return (
    <Stack.Navigator
      screenOptions={{
        headerTitleAlign: "center",
      }}
    >
      <Stack.Screen
        name="Profile"
        component={Profile}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="EditProfile"
        component={EditProfile}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="SettingsScreen"
        component={SettingsScreen}
        options={{
          headerShown: true,
          tabBarVisible: false,
          title: "Cài đặt ", // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="ChangePasswordScreen"
        component={ChangePasswordScreen}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Đổi mật khẩu",
        }}
      />
      <Stack.Screen
        name="RewardMember"
        component={RewardMember}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Phần thưởng & Thành viên ",
        }}
      />
      <Stack.Screen
        name="Points"
        component={Points}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Điểm thưởng ",
        }}
      />
      <Stack.Screen
        name="PointsHistory"
        component={PointsHistory}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Lịch sử điểm thưởng",
        }}
      />
      <Stack.Screen
        name="PersonalVoucher"
        component={PersonalVoucher}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Voucher của bạn",
        }}
      />
      <Stack.Screen
        name="VoucherDetail"
        component={VoucherDetail}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Chi tiết Voucher",
        }}
      />
      <Stack.Screen
        name="LoginScreen"
        component={LoginScreen}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Chi tiết Voucher",
        }}
      />
      <Stack.Screen
        name="PhoneLogin"
        component={PhoneLogin}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Chi tiết Voucher",
        }}
      />
      <Stack.Screen
        name="RegisterScreen"
        component={RegisterScreen}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Chi tiết Voucher",
        }}
      />
      <Stack.Screen
        name="GoogleLogin"
        component={GoogleLogin}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Chi tiết Voucher",
        }}
      />
    </Stack.Navigator>
  );
};

export default AccountStackNavigator;

src\Routes\AuthStack.js
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import LoginScreen from "../Pages/Auth/LoginScreen";
import RegisterScreen from "../Pages/Auth/RegisterScreen";
import GoogleLogin from "../Pages/Auth/GoogleLogin";
import PhoneLogin from "../Pages/Auth/PhoneLogin";
import VerifyAccountScreen from "../Pages/Auth/VerifyAccountScreen";
import ForgotPasswordScreen from "../Pages/Auth/ForgotPasswordScreen";
import TermScreen from "../Pages/Auth/TermScreen";

const Stack = createNativeStackNavigator();

const AuthStack = () => (
  <Stack.Navigator screenOptions={{ headerShown: false }}>
    <Stack.Screen name="Login" component={LoginScreen} />
    <Stack.Screen name="GoogleLogin" component={GoogleLogin} />
    <Stack.Screen name="PhoneLogin" component={PhoneLogin} />
    <Stack.Screen name="Register" component={RegisterScreen} />
    <Stack.Screen name="VerifyAccount" component={VerifyAccountScreen} />
    <Stack.Screen name="ForgotPassword" component={ForgotPasswordScreen} />
    <Stack.Screen name="Term" component={TermScreen} />
    <Stack.Screen name="Count" component={CounterComponent} />
  </Stack.Navigator>
);

export default AuthStack;

src\Routes\BookingStack.js
import BookingHistoryDetails from "../Pages/Booking/BookingHistoryDetails";
import BookingScreen from "../Pages/Booking/BookingScreen";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
const Stack = createNativeStackNavigator();

const BookingStackNavigator = () => {
  return (
    <Stack.Navigator
      screenOptions={{
        headerTitleAlign: "center",
      }}
    >
      <Stack.Screen
        name="BookingScreen"
        component={BookingScreen}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Lịch sử đặt phòng  ",
        }}
      />
      <Stack.Screen
        name="BookingHistoryDetails"
        component={BookingHistoryDetails}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Chi tiết đặt phòng  ",
        }}
      />
    </Stack.Navigator>
  );
};

export default BookingStackNavigator;

src\Routes\HomeStack.js
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import HomeScreen from "../Pages/Home/HomeScreen";
import DetailScreen from "../Pages/Detail/DetailScreen";
import HotelDetails from "../Pages/Hotels/HotelDetails";
import OrderFood from "../Pages/Foods/OrderFood";
import FoodDetails from "../Pages/Foods/FoodDetails";
import FoodCart from "../Pages/Foods/FoodCart";
import OrderPayment from "../Pages/Payment/OrderPayment";
import SuccessPayment from "../Pages/Payment/SuccessPayment";
import RateReviews from "../Pages/Reviews/RateReviews";
import RateDetails from "../Pages/Reviews/RateDetails";
import RateApp from "../Pages/Reviews/RateApp";
import ListHotelByLocation from "../Pages/Hotels/ListHotelByLocation";
import HotelRoomList from "../Pages/Hotels/HotelRoomList";
import InfoConfirmScreen from "../Pages/Hotels/InfoConfirmScreen";
import OrderConfirmScreen from "../Pages/Hotels/OrderConfirmScreen";
import LoginScreen from "../Pages/Auth/LoginScreen";
import RegisterScreen from "../Pages/Auth/RegisterScreen";
import Discount from "../Pages/Promotion/Discount";

import PaymentResultScreenQuan from "../Pages/Payment/PaymentResultScreenQuan";
import PaymentWebViewScreenQuan from "../Pages/Payment/PaymentWebViewScreenQuan";
import PaymentScreenQuan from "../Pages/Payment/PaymentScreenQuan";
import TestModal from "../Components/Modal/FlexibleModal/TestModal";
import AllComments from "../Pages/Hotels/AllComment";
import PhoneLogin from "../Pages/Auth/PhoneLogin";
import AllPolicy from "../Pages/Hotels/AllPolicy";
import Profile from "../Pages/Profile/Profile";
const Stack = createNativeStackNavigator();

const HomeStackNavigator = () => {
  return (
    <Stack.Navigator
      screenOptions={{
        headerTitleAlign: "center",
        title: "Trang chủ ",
      }}
    >
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Detail" component={DetailScreen} />
      <Stack.Screen
        name="HotelDetails"
        component={HotelDetails}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="OrderFood"
        component={OrderFood}
        options={{
          headerShown: true,
          title: "Dịch vụ",
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="FoodDetails"
        component={FoodDetails}
        options={{
          headerShown: true,
          title: "Chi tiết món ăn",
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="FoodCart"
        component={FoodCart}
        options={{
          headerShown: true,
          title: "Giỏ hàng ",
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="OrderPayment"
        component={OrderPayment}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="SuccessPayment"
        component={SuccessPayment}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="RateReviews"
        component={RateReviews}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="RateDetails"
        component={RateDetails}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="RateApp"
        component={RateApp}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="ListHotelLocation"
        component={ListHotelByLocation}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="HotelRoomList"
        component={HotelRoomList}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Danh sách phòng",
        }}
      />

      <Stack.Screen
        name="InfoConfirm"
        component={InfoConfirmScreen}
        options={{
          title: "Thông Tin",
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="OrderConfirm"
        component={OrderConfirmScreen}
        options={{
          title: " Chi tiết đơn đặt ",
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="LoginScreen"
        component={LoginScreen}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="RegisterScreen"
        component={RegisterScreen}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
        }}
      />
      <Stack.Screen
        name="Discount"
        component={Discount}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Mã giảm giá ",
        }}
      />

      <Stack.Screen
        name="PaymentResultScreenQuan"
        component={PaymentResultScreenQuan}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới
          title: "Kết quả thanh toán",
        }}
      />
      <Stack.Screen
        name="PaymentWebViewScreenQuan"
        component={PaymentWebViewScreenQuan}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Web view zalo",
        }}
      />
      <Stack.Screen
        name="PaymentScreenQuan"
        component={PaymentScreenQuan}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Web view zalo",
        }}
      />
      <Stack.Screen
        name="TestModal"
        component={TestModal}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Test Modal",
        }}
      />
      <Stack.Screen
        name="AllComments"
        component={AllComments}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Test Modal",
        }}
      />
      <Stack.Screen
        name="PhoneLogin"
        component={PhoneLogin}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Test Modal",
        }}
      />
      <Stack.Screen
        name="AllPolicy"
        component={AllPolicy}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Các chính sách",
        }}
      />
      <Stack.Screen
        name="Profile"
        component={Profile}
        options={{
          headerShown: false,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Các chính sách",
        }}
      />
    </Stack.Navigator>
  );
};

export default HomeStackNavigator;

src\Routes\index.js
import React from "react";
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack"; // Thay đổi ở đây
import MainTab from "./MainTab";
import AuthStack from "./AuthStack";
import { useAppSelector, useAppDispatch } from "../Redux/hook";
import { View, Text } from "react-native";
import Loading from "../Pages/Loading/Loading";
const Stack = createNativeStackNavigator(); // Thay đổi ở đây

const Navigation = () => {
  const auth = useAppSelector((state) => state.auth);
  // const checkLogin = auth.isLoggedIn;
  // const checkLogin = false;
  const loading = auth.loading;
  // console.log(">>> auth", auth);
  // const count = useAppSelector((state) => state.count.count);
  // console.log(">>> count", count);
  // const loginn = useAppSelector((state) => state.text);
  // console.log(">>> text", loginn);
  return (
    <NavigationContainer>
      <Stack.Navigator screenOptions={{ headerShown: false }}>
        {loading ? (
          <>
            <Stack.Screen name="Load" component={Loading} />
          </>
        ) : (
          <>
            {/* {checkLogin ? (
              <Stack.Screen name="Main" component={MainTab} />
            ) : (
              <Stack.Screen name="Auth" component={AuthStack} />
            )} */}
            <Stack.Screen name="Main" component={MainTab} />
          </>
        )}
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default Navigation;

src\Routes\MainTab.js
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import Ionicons from "react-native-vector-icons/Ionicons";
import HomeStackNavigator from "./HomeStack";
import PromotionStackNavigator from "./PromoStack";
import BookingStackNavigator from "./BookingStack";
import NotificationStackNavigator from "./NotifiStack";
import AccountStackNavigator from "./AccountStack";

const Tab = createBottomTabNavigator();

const MainTab = () => {
  return (
    <Tab.Navigator
      screenOptions={{
        headerShown: false,
        tabBarActiveTintColor: "#FF0000",
        tabBarInactiveTintColor: "#888888",
        tabBarIconStyle: { size: 24 },
      }}
    >
      <Tab.Screen
        name="HomeTab"
        component={HomeStackNavigator}
        options={{
          title: "Tìm phòng",
          tabBarIcon: ({ focused, color, size }) => {
            const iconName = focused ? "storefront" : "storefront-outline";
            return <Ionicons name={iconName} size={size} color={color} />;
          },
        }}
      />
      <Tab.Screen
        name="PromotionTab"
        component={PromotionStackNavigator}
        options={{
          title: "Ưu đãi",
          tabBarIcon: ({ focused, color, size }) => {
            const iconName = focused ? "bookmarks" : "bookmarks-outline";
            return <Ionicons name={iconName} size={size} color={color} />;
          },
        }}
      />
      <Tab.Screen
        name="BookingTab"
        component={BookingStackNavigator}
        options={{
          title: "Đặt phòng",
          tabBarIcon: ({ focused, color, size }) => {
            const iconName = focused ? "medkit" : "medkit-outline";
            return <Ionicons name={iconName} size={size} color={color} />;
          },
        }}
      />
      <Tab.Screen
        name="NotificationTab"
        component={NotificationStackNavigator}
        options={{
          title: "Thông báo",
          tabBarIcon: ({ focused, color, size }) => {
            const iconName = focused
              ? "notifications"
              : "notifications-outline";
            return <Ionicons name={iconName} size={size} color={color} />;
          },
        }}
      />
      <Tab.Screen
        name="AccountTab"
        component={AccountStackNavigator}
        options={{
          title: "Hồ sơ",
          tabBarIcon: ({ focused, color, size }) => {
            const iconName = focused ? "person" : "person-outline";
            return <Ionicons name={iconName} size={size} color={color} />;
          },
        }}
      />
    </Tab.Navigator>
  );
};

export default MainTab;


src\Routes\NotifiStack.js
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import NotificationsScreen from "../Pages/Notification/NotificationScreen";
const Stack = createNativeStackNavigator();
import { TouchableOpacity, Text } from "react-native";
const NotificationStackNavigator = ({ navigation }) => {
  return (
    <Stack.Navigator
      screenOptions={{
        headerTitleAlign: "center",
      }}
    >
      <Stack.Screen
        name="Thông báo"
        component={NotificationsScreen}
      />
    </Stack.Navigator>
  );
};

export default NotificationStackNavigator;

src\Routes\PromoStack.js
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import Discount from "../Pages/Promotion/Discount";
import DiscountHistory from "../Pages/Promotion/DiscountHistory ";
import DiscountHistoryExpired from "../Pages/Promotion/DiscountHistoryExpired";
import DiscountHistoryUse from "../Pages/Promotion/DiscountHistoryUse";

import { TouchableOpacity, Text } from "react-native";
import Promotion from "../Pages/Promotion/PromotionScreen";

const Stack = createNativeStackNavigator();

const PromotionStackNavigator = ({ navigation }) => {
  return (
    <Stack.Navigator
      screenOptions={{
        headerTitleAlign: "center",
      }}
    >
      <Stack.Screen
        name="Promotion"
        component={Promotion}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Mã giảm giá ",
        }}
      />
      <Stack.Screen
        name="Discount"
        component={Discount}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Mã giảm giá ",
        }}
      />
      <Stack.Screen
        name="DiscountHistory"
        component={DiscountHistory}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Lịch sử ",
        }}
      />
      <Stack.Screen
        name="DiscountHistoryUse"
        component={DiscountHistoryUse}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Lịch sử ",
        }}
      />
      <Stack.Screen
        name="DiscountHistoryExpired"
        component={DiscountHistoryExpired}
        options={{
          headerShown: true,
          tabBarVisible: false, // Ẩn thanh tab dưới cùng
          title: "Lịch sử ",
        }}
      />
    </Stack.Navigator>
  );
};

export default PromotionStackNavigator;

src\Utils\convertToCartItems.js

export const convertToCartItems = (roomRequestList) => {
  // Kiểm tra đầu vào
  if (!roomRequestList || !Array.isArray(roomRequestList)) {
    return { cartItems: [], roomMapping: {} };
  }

  // Khởi tạo roomMapping và danh sách serviceIds
  const roomMapping = {};
  const serviceIds = new Set();

  // Thu thập tất cả serviceIds và xây dựng roomMapping
  roomRequestList.forEach((room) => {
    const roomId = room.roomId;
    roomMapping[roomId] = roomMapping[roomId] || [];
    roomMapping[roomId].push(room.uniqueId);

    // Thu thập serviceIds từ serviceList
    if (room.serviceList && Array.isArray(room.serviceList)) {
      room.serviceList.forEach((service) => {
        serviceIds.add(service.id);
      });
    }
  });

  // Tạo serviceMap cho tất cả serviceIds
  const serviceMap = {};
  serviceIds.forEach((serviceId) => {
    serviceMap[serviceId] = roomRequestList.map((room) => {
      // Tìm dịch vụ tương ứng trong serviceList của phòng
      const service = room.serviceList?.find((s) => s.id === serviceId);
      return {
        roomId: room.roomId,
        quantity: service ? service.quantity || 0 : 0, // Nếu không có dịch vụ hoặc quantity undefined, dùng 0
        time: service ? service.time || "" : "",
        note: service ? service.note || "" : "",
      };
    });
  });

  // Chuyển serviceMap thành cartItems
  const cartItems = Array.from(serviceIds).map((serviceId) => ({
    serviceId: parseInt(serviceId),
    roomBookingRequestList: serviceMap[serviceId],
  }));

  return { cartItems, roomMapping };
};

src\Utils\formarPrice.js
export const formatPrice = (price) => {
  // Chuyển đổi giá thành chuỗi, tách phần nguyên và thập phân
  const [integerPart, decimalPart = "0"] = String(price).split(".");

  // Định dạng phần nguyên: thêm dấu chấm mỗi 3 chữ số từ phải sang trái
  const formattedInteger = parseInt(integerPart)
    .toString()
    .replace(/\B(?=(\d{3})+(?!\d))/g, ".");

  // Kết hợp phần nguyên, thập phân và đơn vị VNĐ
  return `${formattedInteger},${decimalPart} VNĐ`;
};

src\Utils\notificationsQuan.js
import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform, Alert } from 'react-native';

export async function registerForPushNotificationsAsync() {
    let token;

    if (Device.isDevice) {
        const { status: existingStatus } = await Notifications.getPermissionsAsync();
        let finalStatus = existingStatus;

        if (existingStatus !== 'granted') {
            const { status } = await Notifications.requestPermissionsAsync();
            finalStatus = status;
        }

        if (finalStatus !== 'granted') {
            Alert.alert('Lỗi', 'Không thể lấy quyền thông báo!');
            return null;
        }

        token = (await Notifications.getExpoPushTokenAsync()).data;
    } else {
        Alert.alert('Lỗi', 'Phải sử dụng thiết bị thật để nhận thông báo.');
    }

    if (Platform.OS === 'android') {
        Notifications.setNotificationChannelAsync('default', {
            name: 'default',
            importance: Notifications.AndroidImportance.MAX,
            vibrationPattern: [0, 250, 250, 250],
            lightColor: '#FF231F7C',
        });
    }

    return token;
}
App.js

import { StatusBar } from "expo-status-bar";
import { StyleSheet, Text, View } from "react-native";
import "react-native-gesture-handler";
import Navigation from "./src/Routes";
import { Provider } from "react-redux";
import { store } from "./src/Redux/store";
import * as Notifications from 'expo-notifications';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});
const AppContent = () => {
  const dispatch = useAppDispatch();

  useEffect(() => {
    // dispatch(restoreAuth());
  }, [dispatch]);

  return <Navigation />;
};

export default function App() {
  return (
    <Provider store={store}>
      <Navigation />
    </Provider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
});








































